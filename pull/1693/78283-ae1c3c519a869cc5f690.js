"use strict";(self.webpackChunkterra_framework=self.webpackChunkterra_framework||[]).push([[78283],{22863:function(e,t,n){var a=n(64836);t.Z=void 0;var r=a(n(67294)),i=a(n(45697)),o=a(n(47166)),s=a(n(17422)),l=o.default.bind(s.default),u={name:i.default.string.isRequired,src:i.default.string,url:i.default.string,version:i.default.string.isRequired},d=function(e){var t=e.src,n=e.name,a=e.url,i=e.version,o=r.default.createElement("a",{className:l("badge"),href:a||"https://www.npmjs.org/package/".concat(n,"/v/").concat(i)},r.default.createElement("span",{className:l("badge-name")},a?"package":"npm"),r.default.createElement("span",{className:l("badge-version")},"v".concat(i))),s=t?r.default.createElement("a",{className:l("badge"),href:t},r.default.createElement("span",{className:l("badge-name")},"github"),r.default.createElement("span",{className:l("badge-version")},"source")):void 0;return r.default.createElement("div",{className:l("badge-container")},o,s)};d.propTypes=u;var c=d;t.Z=c},70025:function(e,t,n){n.r(t),n.d(t,{default:function(){return f}});var a=n(87462),r=n(44925),i=(n(67294),n(81254)),o=n(55838),s=n(75983),l=n(64958),u=["components"],d={},c="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,u);return(0,i.mdx)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)(o.C,{mdxType:"Badge"}),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://github.com/cerner/terra-framework/blob/main/packages/terra-infinite-list#readme"},(0,i.mdx)("img",{parentName:"a",src:"https://badgen.net/badge/status/Deprecated/grey",alt:"Deprecated"}))),(0,i.mdx)("h1",{id:"terra-infinite-list--progressive-loading-list"},"Terra Infinite List â€” Progressive Loading List"),(0,i.mdx)(s.Notice,{variant:"deprecation",mdxType:"Notice"},(0,i.mdx)("p",null,"The terra-infinite-list component has been deprecated and is no longer recommended for use."),(0,i.mdx)("p",null,"From a usability perspective, infinite scrolling is a pattern designed and best used when users are casually looking for or discovering things, like shopping and social media. The infinite scrolling pattern should not be used for ",(0,i.mdx)("a",{parentName:"p",href:"https://www.nngroup.com/articles/infinite-scrolling/"},"goal-oriented tasks"),". Cerner products and our users most often fall into goal-oriented workflows. Users should have proper navigation methods (pagination) to navigate to predetermined points within the content easily."),(0,i.mdx)("p",null,"Infinite scrolling also poses significant accessibility challenges for multiple user groups:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Keyboard-only users have to navigate the entire infinite scroll to get to the content below or to the side of the endless loading content. This creates a very time-consuming and unnecessary burden for the keyboard-only user."),(0,i.mdx)("li",{parentName:"ul"},"Screen reader users would have the same problem even though they have more ways to navigate content on the page. When content is dynamically loaded and not within the DOM, screen reader users won't have access to any of that content which poses more significant challenges than just navigating."),(0,i.mdx)("li",{parentName:"ul"},"Focus can be lost when new content loads. Unless focus is managed, sighted keyboard-only users will have difficulties finding where they are on the page."),(0,i.mdx)("li",{parentName:"ul"},"For data with hierarchical relationships, infinite scrolling can make it difficult for screen readers to effectively communicate the required context if related content is split between loaded and unloaded content.")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("a",{parentName:"p",href:"https://engineering.cerner.com/terra-ui/components/cerner-terra-core-docs/paginator/paginator"},"terra-paginator")," should be considered as an alternative approach to paging large amounts of data.")),(0,i.mdx)("p",null,"To limit the impact of large data sets, progressive loading of list items is available through the InfiniteList. As the InfiniteList approaches the bottom of its scrollHeight the ",(0,i.mdx)("inlineCode",{parentName:"p"},"onRequestItems")," callback will execute, allowing the implementation to lazy load data into the list."),(0,i.mdx)("h2",{id:"state-management"},"State Management"),(0,i.mdx)("p",null,"First we'll be defaulting our state to an empty array of items, a null page key, and false for isFinishedLoading in the constructor. "),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"  constructor(props) {\n    super(props);\n\n    this.state = { isFinishedLoading: false, currentPageKey: null, items: [] };\n  }\n")),(0,i.mdx)("p",null,"In our data request callback we'll pass our parameters of our page key, then wait for the response returned from our async service. Upon receiving the response we'll map our returned paging indicators and add our new items to our existing state."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"  requestData() {\n    mockRequest(this.state.currentPageKey).then(response => (\n      this.setState(prevState => ({\n        isFinishedLoading: response.isFinalPage,\n        currentPageKey: response.nextPageKey,\n        items: prevState.items.concat(response.items),\n      }))\n    ));\n  }\n")),(0,i.mdx)("h2",{id:"unpack-data"},"Unpack Data"),(0,i.mdx)("p",null,"We can then implement the unpack of our state data into our list items. Provide unique key value to prop ",(0,i.mdx)("inlineCode",{parentName:"p"},"key"),", if internal state of ",(0,i.mdx)("inlineCode",{parentName:"p"},"InfiniteList")," needs to be updated."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"  createItems() {\n    return this.state.items.map(item => (\n      <Item key={item.key}>\n        <Placeholder title={item.title} />\n      </Item>\n    ));\n  }\n")),(0,i.mdx)("p",null,"Finally we'll declare our infinite list looping. Providing the InfiniteList with an ",(0,i.mdx)("inlineCode",{parentName:"p"},"initialLoadingIndicator")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"progressiveLoadingIndicator"),". The infinite list does not have visual styling, so loading indicators are customizable. Followed up with setting the ",(0,i.mdx)("inlineCode",{parentName:"p"},"onRequestItems")," to our requestData method."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},'  render() {\n    return (\n      <MyExampleContainer>\n        <InfiniteList\n          dividerStyle="standard"\n          isFinishedLoading={this.state.isFinishedLoading}\n          onRequestItems={this.requestData}\n          initialLoadingIndicator={<MyInitialLoadingIndicator />}\n          progressiveLoadingIndicator={<MyProgressiveLoadingIndicator />}\n        >\n          {this.createItems()}\n        </InfiniteList>\n      </MyExampleContainer>\n    );\n  }\n')),(0,i.mdx)("p",null,"Using these steps we get the following example:"),(0,i.mdx)("h2",{id:"example"},"Example"),(0,i.mdx)(l.Z,{title:"Sections Header Infinite List",mdxType:"RefreshProgressive"}))}f.isMDXComponent=!0},55838:function(e,t,n){n.d(t,{C:function(){return i}});var a=n(67294),r=n(22863),i=function(e){var t=e.url;return a.createElement(r.Z,{src:"https://github.com/cerner/terra-framework/tree/main/packages/terra-infinite-list",name:"terra-infinite-list",version:"3.41.1",url:t})}},83885:function(e,t,n){var a=n(64836),r=n(18698);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=a(n(56690)),o=a(n(89728)),s=a(n(66115)),l=a(n(61655)),u=a(n(94993)),d=a(n(73808)),c=a(n(67294)),f=n(75983),p=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var n=x(t);if(n&&n.has(e))return n.get(e);var a={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var s=i?Object.getOwnPropertyDescriptor(e,o):null;s&&(s.get||s.set)?Object.defineProperty(a,o,s):a[o]=e[o]}a.default=e,n&&n.set(e,a);return a}(n(45186)),m=a(n(47166)),g=a(n(45664)),h=a(n(30111)),v=a(n(66635)),y=a(n(91048)),b=a(n(63190));function x(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(x=function(e){return e?n:t})(e)}function w(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=(0,d.default)(e);if(t){var r=(0,d.default)(this).constructor;n=Reflect.construct(a,arguments,r)}else n=a.apply(this,arguments);return(0,u.default)(this,n)}}var k=m.default.bind(b.default),N=function(e){(0,l.default)(n,e);var t=w(n);function n(e){var a;return(0,i.default)(this,n),(a=t.call(this,e)).requestData=a.requestData.bind((0,s.default)(a)),a.state={isFinishedLoading:!1,currentPageKey:null,items:[]},a}return(0,o.default)(n,[{key:"requestData",value:function(){var e=this;(0,y.default)(this.state.currentPageKey).then((function(t){return e.setState((function(e){return{isFinishedLoading:t.isFinalPage,currentPageKey:t.nextPageKey,items:e.items.concat(t.items)}}))}))}},{key:"createItems",value:function(){return this.state.items.map((function(e){return c.default.createElement(p.Item,{key:e.key},c.default.createElement(f.Placeholder,{title:e.title,className:k("placeholder")}))}))}},{key:"render",value:function(){return c.default.createElement(v.default,null,c.default.createElement(p.default,{dividerStyle:"standard",isFinishedLoading:this.state.isFinishedLoading,onRequestItems:this.requestData,ariaLabel:"Progressive Loading",initialLoadingIndicator:c.default.createElement(g.default,null),progressiveLoadingIndicator:c.default.createElement(h.default,null)},this.createItems()))}}]),n}(c.default.Component);t.default=N},64958:function(e,t,n){var a=n(64836);t.Z=void 0;var r=a(n(56690)),i=a(n(89728)),o=a(n(66115)),s=a(n(61655)),l=a(n(94993)),u=a(n(73808)),d=a(n(67294)),c=a(n(83885));function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=(0,u.default)(e);if(t){var r=(0,u.default)(this).constructor;n=Reflect.construct(a,arguments,r)}else n=a.apply(this,arguments);return(0,l.default)(this,n)}}var p=function(e){(0,s.default)(n,e);var t=f(n);function n(e){var a;return(0,r.default)(this,n),(a=t.call(this,e)).updateKey=a.updateKey.bind((0,o.default)(a)),a.state={refreshKey:0},a}return(0,i.default)(n,[{key:"updateKey",value:function(){this.setState((function(e){return{refreshKey:e.refreshKey+1}}))}},{key:"render",value:function(){return d.default.createElement("div",null,d.default.createElement("button",{type:"button",onClick:this.updateKey},"Refresh"),d.default.createElement(c.default,{key:"".concat(this.state.refreshKey)}))}}]),n}(d.default.Component);t.Z=p},17422:function(e,t,n){n.r(t),t.default={badge:"Badges-module__badge___vex-+","badge-container":"Badges-module__badge-container___B13Mv","badge-name":"Badges-module__badge-name___jkN0m","badge-version":"Badges-module__badge-version___agZ+P"}},87462:function(e,t,n){function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},a.apply(this,arguments)}n.d(t,{Z:function(){return a}})},44925:function(e,t,n){function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})}}]);