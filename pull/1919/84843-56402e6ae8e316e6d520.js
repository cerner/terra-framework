"use strict";(self.webpackChunkterra_framework=self.webpackChunkterra_framework||[]).push([[84843,48883,57721],{60917:function(e,n,t){t.r(n),t.d(n,{default:function(){return S}});var l=t(87462),o=t(44925),c=t(67294),a=t(81254),r=t(33720),d=["components"],s={};function i(e){var n=e.components,t=(0,o.Z)(e,d);return(0,a.mdx)("wrapper",(0,l.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState, useCallback } from 'react';\nimport { FlowsheetDataGrid } from 'terra-data-grid';\n\nconst RowSelection = () => {\n  const gridDataJSON = {\n    cols: [\n      { id: 'Column-0', displayName: 'Vitals' },\n      { id: 'Column-1', displayName: 'March 16' },\n      { id: 'Column-2', displayName: 'March 17' },\n      { id: 'Column-3', displayName: 'March 18' },\n    ],\n    rows: [\n      {\n        id: '1',\n        cells: [\n          { content: 'Heart Rate Monitored (bpm)' },\n          { content: '68' },\n          { content: '66' },\n          { content: '67' },\n        ],\n      },\n      {\n        id: '2',\n        cells: [\n          { content: 'Temperature Oral (degC)' },\n          { content: '36.7' },\n          { content: '36.9' },\n          { content: '37' },\n        ],\n      },\n      {\n        id: '3',\n        cells: [\n          { content: 'Cardiac Index (L/min/m2)' },\n          { content: '2.25' },\n          { content: '2.28' },\n          { content: '2.8' },\n        ],\n      },\n      {\n        id: '4',\n        cells: [\n          { content: 'ICP (mmHg)' },\n          { content: '11' },\n          { content: '11' },\n          { content: '12' },\n        ],\n      },\n      {\n        id: '5',\n        cells: [\n          { content: 'CPP (mmHg)' },\n          { content: '63' },\n          { content: '47' },\n          { content: '48' },\n        ],\n      },\n    ],\n  };\n\n  const { cols, rows } = gridDataJSON;\n  const [rowData, setRowData] = useState(rows);\n  const [selectedRow, setSelectedRow] = useState(undefined);\n\n  const clearSelectedRow = useCallback(() => {\n    if (selectedRow) {\n      setSelectedRow(undefined);\n    }\n  }, [selectedRow]);\n\n  const onRowSelect = useCallback((rowToSelect) => {\n    const { rowId } = rowToSelect; // Contains rowId and sectionId\n    if (rowId) {\n      const rowIndex = rowData.findIndex(e => e.id === rowId);\n\n      const newRowData = [...rowData];\n\n      // Remove current selections\n      for (let row = 0; row < rowData.length; row += 1) {\n        newRowData[row].isSelected = false;\n        for (let cell = 0; cell < rowData[row].cells.length; cell += 1) {\n          newRowData[row].cells[cell].isSelected = false;\n        }\n      }\n\n      if (selectedRow !== rowId) {\n        newRowData[rowIndex].isSelected = true;\n        setSelectedRow(rowId);\n      } else {\n        newRowData[rowIndex].isSelected = false;\n        clearSelectedRow();\n      }\n\n      setRowData(newRowData);\n    }\n  }, [clearSelectedRow, rowData, selectedRow]);\n\n  const onCellSelect = useCallback((rowId, columnId) => {\n    if (rowId && columnId) {\n      const rowIndex = rowData.findIndex(e => e.id === rowId);\n      const columnIndex = cols.findIndex(e => e.id === columnId);\n      let otherSelectionsExist = false;\n\n      // Remove cell selections, excluding current cell\n      const newRowData = [...rowData];\n      for (let row = 0; row < rowData.length; row += 1) {\n        newRowData[row].isSelected = false;\n        for (let cell = 0; cell < rowData[row].cells.length; cell += 1) {\n          const currentCell = rowData[row].cells[cell];\n          if (currentCell.isSelected && !(row === rowIndex && cell === columnIndex)) {\n            currentCell.isSelected = false;\n            otherSelectionsExist = true;\n          }\n        }\n      }\n\n      // If the current cell is the only selected cell, toggle it to unselected. Otherwise, set it to selected.\n      newRowData[rowIndex].cells[columnIndex].isSelected = !rowData[rowIndex].cells[columnIndex].isSelected || otherSelectionsExist;\n      clearSelectedRow();\n      setRowData(newRowData);\n    }\n  }, [clearSelectedRow, cols, rowData]);\n\n  const onClearSelectedCells = useCallback(() => {\n    // Remove current selections\n    const newRowData = [...rowData];\n    for (let row = 0; row < rowData.length; row += 1) {\n      for (let cell = 0; cell < rowData[row].cells.length; cell += 1) {\n        newRowData[row].cells[cell].isSelected = false;\n      }\n    }\n\n    clearSelectedRow();\n    setRowData(newRowData);\n  }, [clearSelectedRow, rowData]);\n\n  const onCellRangeSelect = useCallback((cells) => {\n    const newRowData = [...rowData];\n\n    // Remove current selections\n    for (let row = 0; row < rowData.length; row += 1) {\n      newRowData[row].isSelected = false;\n      for (let cell = 0; cell < rowData[row].cells.length; cell += 1) {\n        newRowData[row].cells[cell].isSelected = false;\n      }\n    }\n\n    cells.forEach((cell) => {\n      const rowIndex = rowData.findIndex(e => e.id === cell.rowId);\n      const columnIndex = cols.findIndex(e => e.id === cell.columnId);\n\n      newRowData[rowIndex].cells[columnIndex].isSelected = true;\n    });\n\n    clearSelectedRow();\n    setRowData(newRowData);\n  }, [clearSelectedRow, cols, rowData]);\n\n  return (\n    <FlowsheetDataGrid\n      id=\"default-terra-flowsheet-data-grid\"\n      columns={cols}\n      rows={rowData}\n      ariaLabel=\"Flowsheet Data Grid\"\n      onCellSelect={onCellSelect}\n      onClearSelectedCells={onClearSelectedCells}\n      onCellRangeSelect={onCellRangeSelect}\n      onRowSelect={onRowSelect}\n    />\n  );\n};\n\nexport default RowSelection;\n\n")))}i.isMDXComponent=!0;var w=t(49271),u=function(e){var n=e.title,t=e.description,l=e.isExpanded;return c.createElement(w.Z,{title:n||"Row Selection",description:t,example:c.createElement(r.Z,null),exampleSrc:c.createElement(i,null),isExpanded:l})},f=["components"],m={},p="wrapper";function S(e){var n=e.components,t=(0,o.Z)(e,f);return(0,a.mdx)(p,(0,l.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"row-selection"},"Row Selection"),(0,a.mdx)("h3",{id:"description"},"Description"),(0,a.mdx)("p",null,"This example demonstrates a Flowsheet Data Grid with row selection support by utilizing the following ",(0,a.mdx)("a",{parentName:"p",href:"/terra-framework/pull/1919/components/cerner-terra-framework-docs/data-grid/flowsheet-data-grid/about"},"properties"),":"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"The ",(0,a.mdx)("strong",{parentName:"li"},"onRowSelect")," callback prop: When the user selects a row header cell (a cell in the pinned first column), this callback will be called with an object containing the ",(0,a.mdx)("inlineCode",{parentName:"li"},"rowId")," and ",(0,a.mdx)("inlineCode",{parentName:"li"},"sectionId")," of the selected row.\nIn this example, the ",(0,a.mdx)("inlineCode",{parentName:"li"},"isSelected")," row property is toggled to true, adding highlighting to the selected row.")),(0,a.mdx)(u,{title:"Flowsheet Data Grid with Row Selection",mdxType:"RowSelection"}))}S.isMDXComponent=!0},33720:function(e,n,t){var l=t(64836),o=t(18698);n.Z=void 0;var c=l(t(861)),a=l(t(27424)),r=function(e,n){if(!n&&e&&e.__esModule)return e;if(null===e||"object"!=o(e)&&"function"!=typeof e)return{default:e};var t=s(n);if(t&&t.has(e))return t.get(e);var l={__proto__:null},c=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if("default"!==a&&Object.prototype.hasOwnProperty.call(e,a)){var r=c?Object.getOwnPropertyDescriptor(e,a):null;r&&(r.get||r.set)?Object.defineProperty(l,a,r):l[a]=e[a]}return l.default=e,t&&t.set(e,l),l}(t(67294)),d=t(55730);function s(e){if("function"!=typeof WeakMap)return null;var n=new WeakMap,t=new WeakMap;return(s=function(e){return e?t:n})(e)}n.Z=function(){var e=[{id:"Column-0",displayName:"Vitals"},{id:"Column-1",displayName:"March 16"},{id:"Column-2",displayName:"March 17"},{id:"Column-3",displayName:"March 18"}],n=[{id:"1",cells:[{content:"Heart Rate Monitored (bpm)"},{content:"68"},{content:"66"},{content:"67"}]},{id:"2",cells:[{content:"Temperature Oral (degC)"},{content:"36.7"},{content:"36.9"},{content:"37"}]},{id:"3",cells:[{content:"Cardiac Index (L/min/m2)"},{content:"2.25"},{content:"2.28"},{content:"2.8"}]},{id:"4",cells:[{content:"ICP (mmHg)"},{content:"11"},{content:"11"},{content:"12"}]},{id:"5",cells:[{content:"CPP (mmHg)"},{content:"63"},{content:"47"},{content:"48"}]}],t=(0,r.useState)(n),l=(0,a.default)(t,2),o=l[0],s=l[1],i=(0,r.useState)(void 0),w=(0,a.default)(i,2),u=w[0],f=w[1],m=(0,r.useCallback)((function(){u&&f(void 0)}),[u]),p=(0,r.useCallback)((function(e){var n=e.rowId;if(n){for(var t=o.findIndex((function(e){return e.id===n})),l=(0,c.default)(o),a=0;a<o.length;a+=1){l[a].isSelected=!1;for(var r=0;r<o[a].cells.length;r+=1)l[a].cells[r].isSelected=!1}u!==n?(l[t].isSelected=!0,f(n)):(l[t].isSelected=!1,m()),s(l)}}),[m,o,u]),S=(0,r.useCallback)((function(n,t){if(n&&t){for(var l=o.findIndex((function(e){return e.id===n})),a=e.findIndex((function(e){return e.id===t})),r=!1,d=(0,c.default)(o),i=0;i<o.length;i+=1){d[i].isSelected=!1;for(var w=0;w<o[i].cells.length;w+=1){var u=o[i].cells[w];!u.isSelected||i===l&&w===a||(u.isSelected=!1,r=!0)}}d[l].cells[a].isSelected=!o[l].cells[a].isSelected||r,m(),s(d)}}),[m,e,o]),h=(0,r.useCallback)((function(){for(var e=(0,c.default)(o),n=0;n<o.length;n+=1)for(var t=0;t<o[n].cells.length;t+=1)e[n].cells[t].isSelected=!1;m(),s(e)}),[m,o]),D=(0,r.useCallback)((function(n){for(var t=(0,c.default)(o),l=0;l<o.length;l+=1){t[l].isSelected=!1;for(var a=0;a<o[l].cells.length;a+=1)t[l].cells[a].isSelected=!1}n.forEach((function(n){var l=o.findIndex((function(e){return e.id===n.rowId})),c=e.findIndex((function(e){return e.id===n.columnId}));t[l].cells[c].isSelected=!0})),m(),s(t)}),[m,e,o]);return r.default.createElement(d.FlowsheetDataGrid,{id:"default-terra-flowsheet-data-grid",columns:e,rows:o,ariaLabel:"Flowsheet Data Grid",onCellSelect:S,onClearSelectedCells:h,onCellRangeSelect:D,onRowSelect:p})}}}]);