"use strict";(self.webpackChunkterra_framework=self.webpackChunkterra_framework||[]).push([[97148,48883,57721],{7615:function(e,n,l){l.r(n),l.d(n,{default:function(){return f}});var t=l(87462),a=l(44925),o=l(67294),c=l(81254),r=l(64393),i=["components"],d={};function s(e){var n=e.components,l=(0,a.Z)(e,i);return(0,c.mdx)("wrapper",(0,t.Z)({},d,l,{components:n,mdxType:"MDXLayout"}),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState, useCallback } from 'react';\nimport { FlowsheetDataGrid } from 'terra-data-grid';\n\nconst CellSelection = () => {\n  const gridDataJSON = {\n    cols: [\n      { id: 'Column-0', displayName: 'Vitals' },\n      { id: 'Column-1', displayName: 'March 16' },\n      { id: 'Column-2', displayName: 'March 17' },\n      { id: 'Column-3', displayName: 'March 18' },\n    ],\n    rows: [\n      {\n        id: '1',\n        cells: [\n          { content: 'Heart Rate Monitored (bpm)' },\n          { content: '68' },\n          { content: '66' },\n          { content: '67' },\n        ],\n      },\n      {\n        id: '2',\n        cells: [\n          { content: 'Temperature Oral (degC)' },\n          { content: '36.7' },\n          { content: '36.9' },\n          { content: '37' },\n        ],\n      },\n      {\n        id: '3',\n        cells: [\n          { content: 'Cardiac Index (L/min/m2)' },\n          { content: '2.25' },\n          { content: '2.28' },\n          { content: '2.8' },\n        ],\n      },\n      {\n        id: '4',\n        cells: [\n          { content: 'ICP (mmHg)' },\n          { content: '11' },\n          { content: '11' },\n          { content: '12' },\n        ],\n      },\n      {\n        id: '5',\n        cells: [\n          { content: 'CPP (mmHg)' },\n          { content: '63' },\n          { content: '47' },\n          { content: '48' },\n        ],\n      },\n    ],\n  };\n\n  const { cols, rows } = gridDataJSON;\n  const [rowData, setRowData] = useState(rows);\n\n  const onCellSelect = useCallback((rowId, columnId) => {\n    if (rowId && columnId) {\n      const rowIndex = rowData.findIndex(e => e.id === rowId);\n      const columnIndex = cols.findIndex(e => e.id === columnId);\n      let otherSelectionsExist = false;\n\n      // Remove cell selections, excluding current cell\n      const newRowData = [...rowData];\n      for (let row = 0; row < rowData.length; row += 1) {\n        for (let cell = 0; cell < rowData[row].cells.length; cell += 1) {\n          const currentCell = rowData[row].cells[cell];\n          if (currentCell.isSelected && !(row === rowIndex && cell === columnIndex)) {\n            currentCell.isSelected = false;\n            otherSelectionsExist = true;\n          }\n        }\n      }\n\n      // If the current cell is the only selected cell, toggle it to unselected. Otherwise, set it to selected.\n      newRowData[rowIndex].cells[columnIndex].isSelected = !rowData[rowIndex].cells[columnIndex].isSelected || otherSelectionsExist;\n      setRowData(newRowData);\n    }\n  }, [cols, rowData]);\n\n  const onClearSelectedCells = useCallback(() => {\n    // Remove current selections\n    const newRowData = [...rowData];\n    for (let row = 0; row < rowData.length; row += 1) {\n      for (let cell = 0; cell < rowData[row].cells.length; cell += 1) {\n        newRowData[row].cells[cell].isSelected = false;\n      }\n    }\n\n    setRowData(newRowData);\n  }, [rowData]);\n\n  const onCellRangeSelect = useCallback((cells) => {\n    const newRowData = [...rowData];\n\n    // Remove current selections\n    for (let row = 0; row < rowData.length; row += 1) {\n      for (let cell = 0; cell < rowData[row].cells.length; cell += 1) {\n        newRowData[row].cells[cell].isSelected = false;\n      }\n    }\n\n    cells.forEach((cell) => {\n      const rowIndex = rowData.findIndex(e => e.id === cell.rowId);\n      const columnIndex = cols.findIndex(e => e.id === cell.columnId);\n\n      newRowData[rowIndex].cells[columnIndex].isSelected = true;\n    });\n\n    setRowData(newRowData);\n  }, [cols, rowData]);\n\n  return (\n    <FlowsheetDataGrid\n      id=\"default-terra-flowsheet-data-grid\"\n      columns={cols}\n      rows={rowData}\n      ariaLabel=\"Flowsheet Data Grid\"\n      onCellSelect={onCellSelect}\n      onClearSelectedCells={onClearSelectedCells}\n      onCellRangeSelect={onCellRangeSelect}\n    />\n  );\n};\n\nexport default CellSelection;\n\n")))}s.isMDXComponent=!0;var m=l(49271),u=function(e){var n=e.title,l=e.description,t=e.isExpanded;return o.createElement(m.Z,{title:n||"Cell Selection",description:l,example:o.createElement(r.Z,null),exampleSrc:o.createElement(s,null),isExpanded:t})},p=["components"],h={},w="wrapper";function f(e){var n=e.components,l=(0,a.Z)(e,p);return(0,c.mdx)(w,(0,t.Z)({},h,l,{components:n,mdxType:"MDXLayout"}),(0,c.mdx)("h1",{id:"cell-selection"},"Cell Selection"),(0,c.mdx)("h3",{id:"description"},"Description"),(0,c.mdx)("p",null,"This example demonstrates a Flowsheet Data Grid with cell selection support by utilizing the following ",(0,c.mdx)("a",{parentName:"p",href:"/terra-framework/pull/1919/components/cerner-terra-framework-docs/data-grid/flowsheet-data-grid/about"},"properties"),":"),(0,c.mdx)("ul",null,(0,c.mdx)("li",{parentName:"ul"},(0,c.mdx)("p",{parentName:"li"},"The ",(0,c.mdx)("strong",{parentName:"p"},"onCellSelect")," callback prop: When the user selects a cell, this callback will be called with the ",(0,c.mdx)("inlineCode",{parentName:"p"},"rowId")," and ",(0,c.mdx)("inlineCode",{parentName:"p"},"columnId")," of the selected cell.\nIn this example, the ",(0,c.mdx)("inlineCode",{parentName:"p"},"isSelected")," cell property is toggled to true, adding highlighting to the selected cell.")),(0,c.mdx)("li",{parentName:"ul"},(0,c.mdx)("p",{parentName:"li"},"The ",(0,c.mdx)("strong",{parentName:"p"},"onCellRangeSelect")," callback prop: When the user selects a range of multiple cells at once, a (1-D) array of cell objects, each containing ",(0,c.mdx)("inlineCode",{parentName:"p"},"rowId")," and ",(0,c.mdx)("inlineCode",{parentName:"p"},"columnId")," properties, is the function parameter.\nIn this example, the ",(0,c.mdx)("inlineCode",{parentName:"p"},"isSelected")," cell property is toggled to true for each of the provided cells, adding highlighting to each cell.")),(0,c.mdx)("li",{parentName:"ul"},(0,c.mdx)("p",{parentName:"li"},"The ",(0,c.mdx)("strong",{parentName:"p"},"onClearSelectedCells")," callback prop: When the user presses the Escape key, this callback gets called. In this example, the ",(0,c.mdx)("inlineCode",{parentName:"p"},"isSelected")," attribute of any selected cell is set to false and the Flowsheet Data Grid is re-rendered."))),(0,c.mdx)("h3",{id:"interactions"},"Interactions"),(0,c.mdx)("p",null,"When using this example, there are several ways to interact with the cells of the grid."),(0,c.mdx)("h4",{id:"single-cell-selection"},"Single Cell Selection"),(0,c.mdx)("p",null,"Selecting a single cell can be achieved by either of the following methods:"),(0,c.mdx)("ul",null,(0,c.mdx)("li",{parentName:"ul"},"Click on a selectable cell. OR"),(0,c.mdx)("li",{parentName:"ul"},"Press Spacebar when focused on a selectable cell.")),(0,c.mdx)("h4",{id:"multi-cell-range-selection"},"Multi-Cell (Range) Selection"),(0,c.mdx)("p",null,"Selecting a range of multiple cells can be achieved by the following:"),(0,c.mdx)("ol",null,(0,c.mdx)("li",{parentName:"ol"},(0,c.mdx)("p",{parentName:"li"},"Select a single cell (see ",(0,c.mdx)("a",{parentName:"p",href:"#single-cell-selection"},"Single Cell Selection"),"). AND")),(0,c.mdx)("li",{parentName:"ol"},(0,c.mdx)("p",{parentName:"li"},"Options include:"),(0,c.mdx)("ul",{parentName:"li"},(0,c.mdx)("li",{parentName:"ul"},"Hold Shift key and click on another selectable* cell. This will select the entire range of rows and columns between the selected and starting cell."),(0,c.mdx)("li",{parentName:"ul"},"Use the directional arrow keys to navigate the focus indicator, hold Shift key and press Spacebar on another selectable cell. This option will also select the range of rows and columns between the cells."),(0,c.mdx)("li",{parentName:"ul"},"Hold Shift key and use the directional arrow keys to expand the range of selected cells.")))),(0,c.mdx)("p",null,"*Both the column headers and the cells in the row header (leftmost) column are focusable but not selectable when in range selection mode."),(0,c.mdx)(u,{title:"Flowsheet Data Grid with Cell Selection",mdxType:"CellSelection"}))}f.isMDXComponent=!0},64393:function(e,n,l){var t=l(64836),a=l(18698);n.Z=void 0;var o=t(l(861)),c=t(l(27424)),r=function(e,n){if(!n&&e&&e.__esModule)return e;if(null===e||"object"!=a(e)&&"function"!=typeof e)return{default:e};var l=d(n);if(l&&l.has(e))return l.get(e);var t={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var c in e)if("default"!==c&&Object.prototype.hasOwnProperty.call(e,c)){var r=o?Object.getOwnPropertyDescriptor(e,c):null;r&&(r.get||r.set)?Object.defineProperty(t,c,r):t[c]=e[c]}return t.default=e,l&&l.set(e,t),t}(l(67294)),i=l(55730);function d(e){if("function"!=typeof WeakMap)return null;var n=new WeakMap,l=new WeakMap;return(d=function(e){return e?l:n})(e)}n.Z=function(){var e=[{id:"Column-0",displayName:"Vitals"},{id:"Column-1",displayName:"March 16"},{id:"Column-2",displayName:"March 17"},{id:"Column-3",displayName:"March 18"}],n=[{id:"1",cells:[{content:"Heart Rate Monitored (bpm)"},{content:"68"},{content:"66"},{content:"67"}]},{id:"2",cells:[{content:"Temperature Oral (degC)"},{content:"36.7"},{content:"36.9"},{content:"37"}]},{id:"3",cells:[{content:"Cardiac Index (L/min/m2)"},{content:"2.25"},{content:"2.28"},{content:"2.8"}]},{id:"4",cells:[{content:"ICP (mmHg)"},{content:"11"},{content:"11"},{content:"12"}]},{id:"5",cells:[{content:"CPP (mmHg)"},{content:"63"},{content:"47"},{content:"48"}]}],l=(0,r.useState)(n),t=(0,c.default)(l,2),a=t[0],d=t[1],s=(0,r.useCallback)((function(n,l){if(n&&l){for(var t=a.findIndex((function(e){return e.id===n})),c=e.findIndex((function(e){return e.id===l})),r=!1,i=(0,o.default)(a),s=0;s<a.length;s+=1)for(var m=0;m<a[s].cells.length;m+=1){var u=a[s].cells[m];!u.isSelected||s===t&&m===c||(u.isSelected=!1,r=!0)}i[t].cells[c].isSelected=!a[t].cells[c].isSelected||r,d(i)}}),[e,a]),m=(0,r.useCallback)((function(){for(var e=(0,o.default)(a),n=0;n<a.length;n+=1)for(var l=0;l<a[n].cells.length;l+=1)e[n].cells[l].isSelected=!1;d(e)}),[a]),u=(0,r.useCallback)((function(n){for(var l=(0,o.default)(a),t=0;t<a.length;t+=1)for(var c=0;c<a[t].cells.length;c+=1)l[t].cells[c].isSelected=!1;n.forEach((function(n){var t=a.findIndex((function(e){return e.id===n.rowId})),o=e.findIndex((function(e){return e.id===n.columnId}));l[t].cells[o].isSelected=!0})),d(l)}),[e,a]);return r.default.createElement(i.FlowsheetDataGrid,{id:"default-terra-flowsheet-data-grid",columns:e,rows:a,ariaLabel:"Flowsheet Data Grid",onCellSelect:s,onClearSelectedCells:m,onCellRangeSelect:u})}}}]);