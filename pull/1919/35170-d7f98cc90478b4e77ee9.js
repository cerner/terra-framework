"use strict";(self.webpackChunkterra_framework=self.webpackChunkterra_framework||[]).push([[35170,48883,57721],{3790:function(e,n,t){t.r(n),t.d(n,{default:function(){return p}});var l=t(87462),o=t(44925),a=t(67294),r=t(81254),c=t(92465),s=["components"],d={};function i(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.mdx)("wrapper",(0,l.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState, useCallback } from 'react';\nimport { FlowsheetDataGrid } from 'terra-data-grid';\n\nconst ColumnHeadersHidden = () => {\n  const gridDataJSON = {\n    cols: [\n      { id: 'Column-0', displayName: 'Vitals' },\n      { id: 'Column-1', displayName: 'March 16' },\n      { id: 'Column-2', displayName: 'March 17' },\n      { id: 'Column-3', displayName: 'March 18' },\n    ],\n    rows: [\n      {\n        id: '1',\n        cells: [\n          { content: 'Heart Rate Monitored (bpm)' },\n          { content: '68' },\n          { content: '66' },\n          { content: '67' },\n        ],\n      },\n      {\n        id: '2',\n        cells: [\n          { content: 'Temperature Oral (degC)' },\n          { content: '36.7' },\n          { content: '36.9' },\n          { content: '37' },\n        ],\n      },\n      {\n        id: '3',\n        cells: [\n          { content: 'Cardiac Index (L/min/m2)' },\n          { content: '2.25' },\n          { content: '2.28' },\n          { content: null },\n        ],\n      },\n      {\n        id: '4',\n        cells: [\n          { content: 'ICP (mmHg)' },\n          { content: null },\n          { content: '11' },\n          { content: '12' },\n        ],\n      },\n      {\n        id: '5',\n        cells: [\n          { content: 'CPP (mmHg)' },\n          { content: '63' },\n          { content: null },\n          { content: '48' },\n        ],\n      },\n    ],\n  };\n\n  const { cols, rows } = gridDataJSON;\n  const [rowData, setRowData] = useState(rows);\n\n  const onCellSelect = useCallback((rowId, columnId) => {\n    if (rowId && columnId) {\n      const rowIndex = rowData.findIndex(e => e.id === rowId);\n      const columnIndex = cols.findIndex(e => e.id === columnId);\n      let otherSelectionsExist = false;\n\n      // Remove cell selections, excluding current cell\n      const newRowData = [...rowData];\n      for (let row = 0; row < rowData.length; row += 1) {\n        for (let cell = 0; cell < rowData[row].cells.length; cell += 1) {\n          const currentCell = rowData[row].cells[cell];\n          if (currentCell.isSelected && !(row === rowIndex && cell === columnIndex)) {\n            currentCell.isSelected = false;\n            otherSelectionsExist = true;\n          }\n        }\n      }\n\n      // If the current cell is the only selected cell, toggle it to unselected. Otherwise, set it to selected.\n      newRowData[rowIndex].cells[columnIndex].isSelected = !rowData[rowIndex].cells[columnIndex].isSelected || otherSelectionsExist;\n      setRowData(newRowData);\n    }\n  }, [cols, rowData]);\n\n  const onClearSelectedCells = useCallback(() => {\n    // Remove current selections\n    const newRowData = [...rowData];\n    for (let row = 0; row < rowData.length; row += 1) {\n      for (let cell = 0; cell < rowData[row].cells.length; cell += 1) {\n        newRowData[row].cells[cell].isSelected = false;\n      }\n    }\n\n    setRowData(newRowData);\n  }, [rowData]);\n\n  const onCellRangeSelect = useCallback((cells) => {\n    const newRowData = [...rowData];\n\n    // Remove current selections\n    for (let row = 0; row < rowData.length; row += 1) {\n      for (let cell = 0; cell < rowData[row].cells.length; cell += 1) {\n        newRowData[row].cells[cell].isSelected = false;\n      }\n    }\n\n    cells.forEach((cell) => {\n      const rowIndex = rowData.findIndex(e => e.id === cell.rowId);\n      const columnIndex = cols.findIndex(e => e.id === cell.columnId);\n\n      newRowData[rowIndex].cells[columnIndex].isSelected = true;\n    });\n\n    setRowData(newRowData);\n  }, [cols, rowData]);\n\n  return (\n    <FlowsheetDataGrid\n      id=\"default-terra-flowsheet-data-grid\"\n      columns={cols}\n      rows={rowData}\n      ariaLabel=\"Flowsheet Data Grid\"\n      onCellSelect={onCellSelect}\n      onClearSelectedCells={onClearSelectedCells}\n      onCellRangeSelect={onCellRangeSelect}\n      hasVisibleColumnHeaders={false}\n    />\n  );\n};\n\nexport default ColumnHeadersHidden;\n\n")))}i.isMDXComponent=!0;var u=t(49271),m=function(e){var n=e.title,t=e.description,l=e.isExpanded;return a.createElement(u.Z,{title:n||"Column Headers Hidden",description:t,example:a.createElement(c.Z,null),exampleSrc:a.createElement(i,null),isExpanded:l})},w=["components"],f={},h="wrapper";function p(e){var n=e.components,t=(0,o.Z)(e,w);return(0,r.mdx)(h,(0,l.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"hiding-column-headers"},"Hiding Column Headers"),(0,r.mdx)("h3",{id:"description"},"Description"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("a",{parentName:"p",href:"/terra-framework/pull/1919/components/cerner-terra-framework-docs/data-grid/flowsheet-data-grid/about"},"Flowsheet Data Grid")," can hide column headers with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"hasVisibleColumnHeaders")," prop."),(0,r.mdx)("h3",{id:"usage"},"Usage"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"hasVisibleColumns")," is a boolean. By default, it is set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),".\nWhen it is set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),", the column headers are hidden, but still exist in the DOM and can be read by screenreaders when providing context for the table.\nThis is useful when needing to use custom alternative to column headers, such as Stella Timeline."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Note:")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Column header labels should still be provided in the dataset to ensure that sceenreaders will still read out the appropriate context for the table."),(0,r.mdx)("li",{parentName:"ul"},"When using custom column headers, then logic must be added to ensure that the column widths match are in sync if resizing columns are enabled.\nThe ",(0,r.mdx)("a",{parentName:"li",href:"/terra-framework/pull/1919/components/cerner-terra-framework-docs/data-grid/flowsheet-data-grid/about"},"columns.width")," property for columns can be used to set the column widths programatically.")),(0,r.mdx)(m,{title:"Flowsheet Data Grid with no column headers",description:"The column headers can be hidden with the hasVisibleColumnHeaders prop set to false.",mdxType:"ColumnHeadersHidden"}))}p.isMDXComponent=!0},92465:function(e,n,t){var l=t(64836),o=t(18698);n.Z=void 0;var a=l(t(861)),r=l(t(27424)),c=function(e,n){if(!n&&e&&e.__esModule)return e;if(null===e||"object"!=o(e)&&"function"!=typeof e)return{default:e};var t=d(n);if(t&&t.has(e))return t.get(e);var l={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var r in e)if("default"!==r&&Object.prototype.hasOwnProperty.call(e,r)){var c=a?Object.getOwnPropertyDescriptor(e,r):null;c&&(c.get||c.set)?Object.defineProperty(l,r,c):l[r]=e[r]}return l.default=e,t&&t.set(e,l),l}(t(67294)),s=t(55730);function d(e){if("function"!=typeof WeakMap)return null;var n=new WeakMap,t=new WeakMap;return(d=function(e){return e?t:n})(e)}n.Z=function(){var e=[{id:"Column-0",displayName:"Vitals"},{id:"Column-1",displayName:"March 16"},{id:"Column-2",displayName:"March 17"},{id:"Column-3",displayName:"March 18"}],n=[{id:"1",cells:[{content:"Heart Rate Monitored (bpm)"},{content:"68"},{content:"66"},{content:"67"}]},{id:"2",cells:[{content:"Temperature Oral (degC)"},{content:"36.7"},{content:"36.9"},{content:"37"}]},{id:"3",cells:[{content:"Cardiac Index (L/min/m2)"},{content:"2.25"},{content:"2.28"},{content:null}]},{id:"4",cells:[{content:"ICP (mmHg)"},{content:null},{content:"11"},{content:"12"}]},{id:"5",cells:[{content:"CPP (mmHg)"},{content:"63"},{content:null},{content:"48"}]}],t=(0,c.useState)(n),l=(0,r.default)(t,2),o=l[0],d=l[1],i=(0,c.useCallback)((function(n,t){if(n&&t){for(var l=o.findIndex((function(e){return e.id===n})),r=e.findIndex((function(e){return e.id===t})),c=!1,s=(0,a.default)(o),i=0;i<o.length;i+=1)for(var u=0;u<o[i].cells.length;u+=1){var m=o[i].cells[u];!m.isSelected||i===l&&u===r||(m.isSelected=!1,c=!0)}s[l].cells[r].isSelected=!o[l].cells[r].isSelected||c,d(s)}}),[e,o]),u=(0,c.useCallback)((function(){for(var e=(0,a.default)(o),n=0;n<o.length;n+=1)for(var t=0;t<o[n].cells.length;t+=1)e[n].cells[t].isSelected=!1;d(e)}),[o]),m=(0,c.useCallback)((function(n){for(var t=(0,a.default)(o),l=0;l<o.length;l+=1)for(var r=0;r<o[l].cells.length;r+=1)t[l].cells[r].isSelected=!1;n.forEach((function(n){var l=o.findIndex((function(e){return e.id===n.rowId})),a=e.findIndex((function(e){return e.id===n.columnId}));t[l].cells[a].isSelected=!0})),d(t)}),[e,o]);return c.default.createElement(s.FlowsheetDataGrid,{id:"default-terra-flowsheet-data-grid",columns:e,rows:o,ariaLabel:"Flowsheet Data Grid",onCellSelect:i,onClearSelectedCells:u,onCellRangeSelect:m,hasVisibleColumnHeaders:!1})}}}]);