"use strict";(self.webpackChunkterra_framework=self.webpackChunkterra_framework||[]).push([[41892],{21086:function(e,n,l){l.r(n),l.d(n,{default:function(){return m}});var a=l(87462),t=l(44925),d=(l(67294),l(81254)),o=l(55509),r=["components"],s={},p="wrapper";function m(e){var n=e.components,l=(0,t.Z)(e,r);return(0,d.mdx)(p,(0,a.Z)({},s,l,{components:n,mdxType:"MDXLayout"}),(0,d.mdx)("h1",{id:"expand-and-collapse-all"},"Expand and Collapse All"),(0,d.mdx)("h3",{id:"description"},"Description"),(0,d.mdx)("p",null,"The example below demonstrates expand and collapse all functionality.\nExpand and collapse all functionality is available with the toolbar buttons."),(0,d.mdx)("h3",{id:"required-properties"},"Required Properties"),(0,d.mdx)("p",null,"The consuming component controls the expanded and collapsed state.\nThe following FolderTree properties are required for expand and collapse all:"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"../about#foldertree-props-table"},"onExpandAll"),":")," This callback is requested when the user selects the ",(0,d.mdx)("strong",{parentName:"li"},"Expand All")," button."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"../about#foldertree-props-table"},"onCollapseAll"),":")," This callback is requested when the user selects the ",(0,d.mdx)("strong",{parentName:"li"},"Collapse All")," button.")),(0,d.mdx)("p",null,"Only FolderTree.Items that have ",(0,d.mdx)("inlineCode",{parentName:"p"},"subfolderItems")," with one or more items can be expanded and collapsed.\nThese FolderTree.Items display a folder icon."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'// Initialize folders to be collapsed\nconst [expandedItems, setExpandedItems] = React.useState({\n  "row-item-1": false,\n  "row-item-2": false\n});\n\nconst handleExpandAll = () => {\n  const newExpandedItems = {\n    ...expandedItems,\n  };\n  // Set all folder items in the tree to expanded\n  Object.keys(newExpandedItems).forEach(v => { newExpandedItems[v] = true; });\n\n  setExpandedItems(newExpandedItems);\n};\n\nconst handleCollapseAll = () => {\n  const newExpandedItems = {\n    ...expandedItems,\n  };\n  // Set all folder items in the tree to collapsed\n  Object.keys(newExpandedItems).forEach(v => { newExpandedItems[v] = false; });\n\n  setExpandedItems(newExpandedItems);\n};\n\n<FolderTree\n  title={data.title}\n  onExpandAll={handleExpandAll}\n  onCollapseAll={handleCollapseAll}\n>\n  // FolderTree children can be any number of FolderTree.Items\n</FolderTree>\n')),(0,d.mdx)(o.Z,{mdxType:"FolderTreeExpandCollapse"}))}m.isMDXComponent=!0}}]);