"use strict";(self.webpackChunkterra_framework=self.webpackChunkterra_framework||[]).push([[65156],{1458:function(e,n,t){t.r(n),t.d(n,{default:function(){return g}});var a=t(87462),l=t(44925),d=(t(67294),t(81254)),r=t(75983),i=t(5101),m=t(78530),o=["components"],s={},p="wrapper";function c(e){var n=e.components,t=(0,l.Z)(e,o);return(0,d.mdx)(p,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,d.mdx)(m.ZP,{mdxType:"PropsTable"},(0,d.mdx)(m.X2,{key:"ROW1",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"id"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"string\n"))),(0,d.mdx)(m.dS,{isRequired:!0,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"String that will be used to identify the Grid. If multiple grids are on the same page, each grid should have\na unique id."))),(0,d.mdx)(m.X2,{key:"ROW2",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"ariaLabel"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"string\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"String that labels the grid for accessibility. If ariaLabelledBy is specified, ariaLabel will not be used."))),(0,d.mdx)(m.X2,{key:"ROW3",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"ariaLabelledBy"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"string\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"String that identifies the element (or elements) that labels the grid."))),(0,d.mdx)(m.X2,{key:"ROW4",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"columns"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"arrayOf: [{\n  type: 'custom',\n}],\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Data for columns. Columns will be presented in the order given."))),(0,d.mdx)(m.X2,{key:"ROW5",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"columnHeaderHeight"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"string\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"'2.5rem'\n"))),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"String that specifies the column height. Any valid CSS height value is accepted."))),(0,d.mdx)(m.X2,{key:"ROW6",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"defaultColumnWidth"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"number\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"200\n"))),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Number indicating the default column width in px. This value will be used if no overriding width value is provided on a per-column basis."))),(0,d.mdx)(m.X2,{key:"ROW7",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"onColumnResize"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"func\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Function that is called when a resizable column is resized. Parameters: ",(0,d.mdx)("inlineCode",{parentName:"p"},"function(columnId, requestedWidth)")))),(0,d.mdx)(m.X2,{key:"ROW8",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"onColumnSelect"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"func\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Callback function that is called when a selectable column is selected. Parameters: ",(0,d.mdx)("inlineCode",{parentName:"p"},"function(columnId)")))),(0,d.mdx)(m.X2,{key:"ROW9",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"rows"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"arrayOf: [{\n  type: 'custom',\n}],\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Data for content in the body of the Grid. Rows will be rendered in the order given."))),(0,d.mdx)(m.X2,{key:"ROW10",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"rowHeaderIndex"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"number\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"0\n"))),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Number indicating the index of the column that represents row header. Index is 0 based and cannot exceed one less than the number of columns in the grid."))),(0,d.mdx)(m.X2,{key:"ROW11",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"rowHeight"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"string\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"'2.5rem'\n"))),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"String that specifies the height for the rows in the grid. Any valid CSS value is accepted."))),(0,d.mdx)(m.X2,{key:"ROW12",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"hasSelectableRows"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"bool\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Boolean indicating whether or not the DataGrid should allow entire rows to be selected. An additional column will be\nrendered to allow for row selection to occur."))),(0,d.mdx)(m.X2,{key:"ROW13",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"onClearSelectedRows"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"func\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Callback function that is called when all selected rows need to be unselected. Parameters: ",(0,d.mdx)("inlineCode",{parentName:"p"},"function()")))),(0,d.mdx)(m.X2,{key:"ROW14",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"onDisableSelectableRows"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"func\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Callback function that is called when no row is selected and the row selection mode needs to be disabled. Parameters: ",(0,d.mdx)("inlineCode",{parentName:"p"},"function()")))),(0,d.mdx)(m.X2,{key:"ROW15",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"onRowSelect"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"func\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Callback function that is called when a row is selected. Parameters: ",(0,d.mdx)("inlineCode",{parentName:"p"},"function(rowId)")))),(0,d.mdx)(m.X2,{key:"ROW16",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"onRowSelectAll"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"func\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Callback function that is called when all rows are selected. Parameters: ",(0,d.mdx)("inlineCode",{parentName:"p"},"function()"),"."))),(0,d.mdx)(m.X2,{key:"ROW17",mdxType:"Row"},(0,d.mdx)(m.O,{mdxType:"PropNameCell"},"onCellSelect"),(0,d.mdx)(m.Di,{mdxType:"TypeCell"},(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"func\n"))),(0,d.mdx)(m.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,d.mdx)(m.mW,{mdxType:"DefaultValueCell"},(0,d.mdx)("p",null,"none")),(0,d.mdx)(m.Ex,{mdxType:"DescriptionCell"},(0,d.mdx)("p",null,"Callback function that is called when a selectable cell is selected. Parameters: ",(0,d.mdx)("inlineCode",{parentName:"p"},"function(rowId, columnId)"),".")))))}c.isMDXComponent=!0;var u=t(52357),x=(t(29033),["components"]),y={},N="wrapper";function g(e){var n=e.components,t=(0,l.Z)(e,x);return(0,d.mdx)(N,(0,a.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,d.mdx)(i.C,{mdxType:"Badge"}),(0,d.mdx)("h1",{id:"terra-worklistdatagrid"},"Terra WorklistDataGrid"),(0,d.mdx)(r.Notice,{variant:"caution",ariaLevel:"2",mdxType:"Notice"},"Terra Worklist Data Grid is currently under alpha release. There may be breaking changes between releases until it is stable with the 1.0 release."),(0,d.mdx)("h2",{id:"getting-started"},"Getting Started"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"Install with ",(0,d.mdx)("a",{parentName:"li",href:"https://www.npmjs.com/"},"npmjs"),":",(0,d.mdx)("ul",{parentName:"li"},(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("inlineCode",{parentName:"li"},"npm install terra-worklist-data-grid"))))),(0,d.mdx)("h2",{id:"peer-dependencies"},"Peer Dependencies"),(0,d.mdx)("p",null,"This component requires the following peer dependencies be installed in your app for the component to properly function."),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Peer Dependency"),(0,d.mdx)("th",{parentName:"tr",align:null},"Version"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"react"),(0,d.mdx)("td",{parentName:"tr",align:null},"^16.8.5")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"react-dom"),(0,d.mdx)("td",{parentName:"tr",align:null},"^16.8.5")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},"react-intl"),(0,d.mdx)("td",{parentName:"tr",align:null},"^2.8.0")))),(0,d.mdx)("h2",{id:"component-features"},"Component Features"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("a",{parentName:"li",href:"https://engineering.cerner.com/terra-ui/about/terra-ui/component-standards#cross-browser-support"},"Cross-Browser Support")),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("a",{parentName:"li",href:"https://engineering.cerner.com/terra-ui/about/terra-ui/component-standards#mobile-support"},"Mobile Support")),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("a",{parentName:"li",href:"https://engineering.cerner.com/terra-ui/about/terra-ui/component-standards#internationalization-i18n"},"Internationalization Support")),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("a",{parentName:"li",href:"https://engineering.cerner.com/terra-ui/about/terra-ui/component-standards#ltr--rtl"},"LTR/RTL Support"))),(0,d.mdx)("h2",{id:"examples"},"Examples"),(0,d.mdx)(u.Z,{title:"Default Worklist Data Grid",mdxType:"DefaultWorklistDataGrid"}),(0,d.mdx)("h2",{id:"grid-props-table"},"Grid props table"),(0,d.mdx)(c,{mdxType:"WorklistDataGridPropsTable"}),(0,d.mdx)("h3",{id:"rows"},"Rows"),(0,d.mdx)("p",null,"Rows define the cells rendered within the row as well as the row's selection properties.\nThe order in which the rows are provided will be the order in which they are rendered."),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Name"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Is Required"),(0,d.mdx)("th",{parentName:"tr",align:null},"Default Value"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("strong",{parentName:"td"},"id")),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},"required"),(0,d.mdx)("td",{parentName:"tr",align:null},"none"),(0,d.mdx)("td",{parentName:"tr",align:null},"An identifier for the row. This identifier should be unique across the set of rows provided to the Grid.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("strong",{parentName:"td"},"ariaLabel")),(0,d.mdx)("td",{parentName:"tr",align:null},"string"),(0,d.mdx)("td",{parentName:"tr",align:null},"optional"),(0,d.mdx)("td",{parentName:"tr",align:null},"none"),(0,d.mdx)("td",{parentName:"tr",align:null},"A string identifier used to describe the row contents. This value will be used for accessibilty when announcing the row that is selected or deselected.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("strong",{parentName:"td"},"isSelectable")),(0,d.mdx)("td",{parentName:"tr",align:null},"bool"),(0,d.mdx)("td",{parentName:"tr",align:null},"optional"),(0,d.mdx)("td",{parentName:"tr",align:null},"none"),(0,d.mdx)("td",{parentName:"tr",align:null},"A boolean indicating whether or not the row is selectable.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("strong",{parentName:"td"},"isSelected")),(0,d.mdx)("td",{parentName:"tr",align:null},"bool"),(0,d.mdx)("td",{parentName:"tr",align:null},"optional"),(0,d.mdx)("td",{parentName:"tr",align:null},"none"),(0,d.mdx)("td",{parentName:"tr",align:null},"A boolean indicating whether or not the row should render as selected.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("strong",{parentName:"td"},"cells")),(0,d.mdx)("td",{parentName:"tr",align:null},"array"),(0,d.mdx)("td",{parentName:"tr",align:null},"optional"),(0,d.mdx)("td",{parentName:"tr",align:null},"[]"),(0,d.mdx)("td",{parentName:"tr",align:null},"An array of cell objects that define the content to be rendered in the row. The order in which the cells are rendered is determined by the order in which they are provided.")))),(0,d.mdx)("h3",{id:"cells"},"Cells"),(0,d.mdx)("p",null,"Cells define the content rendered in a given row, and column. Cells will be rendered in the order given and are expected to be in the same order as the column."),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Name"),(0,d.mdx)("th",{parentName:"tr",align:null},"Type"),(0,d.mdx)("th",{parentName:"tr",align:null},"Is Required"),(0,d.mdx)("th",{parentName:"tr",align:null},"Default Value"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("strong",{parentName:"td"},"isSelectable")),(0,d.mdx)("td",{parentName:"tr",align:null},"bool"),(0,d.mdx)("td",{parentName:"tr",align:null},"optional"),(0,d.mdx)("td",{parentName:"tr",align:null},"none"),(0,d.mdx)("td",{parentName:"tr",align:null},"A boolean indicating whether or not the cell is selectable.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("strong",{parentName:"td"},"isMasked")),(0,d.mdx)("td",{parentName:"tr",align:null},"bool"),(0,d.mdx)("td",{parentName:"tr",align:null},"optional"),(0,d.mdx)("td",{parentName:"tr",align:null},"none"),(0,d.mdx)("td",{parentName:"tr",align:null},"A boolean indicating whether or not the cell is masked.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("strong",{parentName:"td"},"content")),(0,d.mdx)("td",{parentName:"tr",align:null},"content"),(0,d.mdx)("td",{parentName:"tr",align:null},"optional"),(0,d.mdx)("td",{parentName:"tr",align:null},"none"),(0,d.mdx)("td",{parentName:"tr",align:null},"The content to render within the cell.")))),(0,d.mdx)("h2",{id:"testing"},"Testing"))}g.isMDXComponent=!0},52357:function(e,n,t){t.d(n,{Z:function(){return c}});var a=t(67294),l=t(13576),d=t(87462),r=t(44925),i=t(81254),m=["components"],o={};function s(e){var n=e.components,t=(0,r.Z)(e,m);return(0,i.mdx)("wrapper",(0,d.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport WorklistDataGrid from 'terra-worklist-data-grid';\n\nconst gridDataJSON = {\n  cols: [\n    { id: 'Column-0', displayName: 'Patient' },\n    { id: 'Column-1', displayName: 'Location' },\n    { id: 'Column-2', displayName: 'Illness Severity' },\n    { id: 'Column-3', displayName: 'Visit' },\n    { id: 'Column-4', displayName: 'Allergy' },\n    { id: 'Column-5', displayName: 'Primary Contact' },\n    { id: 'Column-6', displayName: 'Generic Order Counts' },\n    { id: 'Column-7', displayName: 'Patient Age' },\n    { id: 'Column-8', displayName: 'Medication History' },\n    { id: 'Column-9', displayName: 'My Relationship' },\n    { id: 'Column-10', displayName: 'Not Selectable', isSelectable: false },\n  ],\n  rows: [\n    {\n      id: '1',\n      cells: [\n        { content: 'Fleck, Arthur' },\n        { content: '1007-MTN' },\n        { content: 'Unstable' },\n        { content: 'Inpatient, 2 months' },\n        { content: '' },\n        { content: 'Quinzell, Harleen' },\n        { content: '' },\n        { isMasked: true },\n        { isMasked: true },\n        { content: 'Admitting Physician' },\n        { content: '', isSelectable: false },\n      ],\n    },\n    {\n      id: '2',\n      cells: [\n        { content: 'Wayne, Bruce' },\n        { content: '1007-MTN-DR' },\n        { content: 'Stable' },\n        { content: 'Outpatient, 2 days' },\n        { content: 'Phytochemicals' },\n        { content: 'Grayson, Richard' },\n        { content: '' },\n        { content: '' },\n        { isMasked: true },\n        { content: 'Admitting Physician' },\n        { content: '', isSelectable: false },\n      ],\n    },\n  ],\n};\n\nconst DefaultWorklistDataGrid = () => {\n  const rowHeaderIndex = 0;\n  const { cols, rows } = gridDataJSON;\n\n  return (\n    <React.Fragment>\n      <WorklistDataGrid\n        id=\"default-terra-worklist-data-grid\"\n        columns={cols}\n        rows={rows}\n        rowHeaderIndex={rowHeaderIndex}\n        ariaLabel=\"Worklist Data Grid\"\n      />\n    </React.Fragment>\n  );\n};\n\nexport default DefaultWorklistDataGrid;\n\n")))}s.isMDXComponent=!0;var p=t(49271),c=function(e){var n=e.title,t=e.description,d=e.isExpanded;return a.createElement(p.Z,{title:n||"Default Worklist Data Grid",description:t,example:a.createElement(l.Z,null),exampleSrc:a.createElement(s,null),isExpanded:d})}},29033:function(e,n,t){t.d(n,{Z:function(){return c}});var a=t(67294),l=t(34728),d=t(87462),r=t(44925),i=t(81254),m=["components"],o={};function s(e){var n=e.components,t=(0,r.Z)(e,m);return(0,i.mdx)("wrapper",(0,d.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport WorklistDataGrid from 'terra-worklist-data-grid';\n\nconst gridDataJSON = {\n  cols: [\n    {\n      id: 'Column-0', displayName: 'Patient', sortIndicator: 'ascending', hasError: true,\n    },\n    { id: 'Column-1', displayName: 'Location' },\n    { id: 'Column-2', displayName: 'Illness Severity' },\n    { id: 'Column-3', displayName: 'Visit' },\n    { id: 'Column-4', displayName: 'Allergy', hasError: true },\n    { id: 'Column-5', displayName: 'Primary Contact' },\n    { id: 'Column-6', displayName: 'Generic Order Counts' },\n    { id: 'Column-7', displayName: 'Patient Age' },\n    { id: 'Column-8', displayName: 'Medication History' },\n    { id: 'Column-9', displayName: 'My Relationship' },\n    { id: 'Column-10', displayName: 'Not Selectable', isSelectable: false },\n  ],\n  rows: [\n    {\n      id: '1',\n      cells: [\n        { content: 'Fleck, Arthur' },\n        { content: '1007-MTN' },\n        { content: 'Unstable' },\n        { content: 'Inpatient, 2 months' },\n        { content: '' },\n        { content: 'Quinzell, Harleen' },\n        { content: '' },\n        { isMasked: true },\n        { isMasked: true },\n        { content: 'Admitting Physician' },\n        { content: '', isSelectable: false },\n      ],\n    },\n    {\n      id: '2',\n      cells: [\n        { content: 'Wayne, Bruce' },\n        { content: '1007-MTN-DR' },\n        { content: 'Stable' },\n        { content: 'Outpatient, 2 days' },\n        { content: 'Phytochemicals' },\n        { content: 'Grayson, Richard' },\n        { content: '' },\n        { content: '' },\n        { isMasked: true },\n        { content: 'Admitting Physician' },\n        { content: '', isSelectable: false },\n      ],\n    },\n  ],\n};\n\nconst DefaultWorklistDataGrid = () => {\n  const rowHeaderIndex = 0;\n  const { cols, rows } = gridDataJSON;\n\n  const [gridColumns, setGridColumns] = useState(cols);\n  const [gridRows, setGridRows] = useState(rows);\n\n  const onColumnSelect = (columnId) => {\n    const newColumnArray = gridColumns.map((column, columnIndex) => {\n      const newColumn = { ...column };\n\n      if (column.id === columnId) {\n        newColumn.sortIndicator = column.sortIndicator === 'ascending' ? 'descending' : 'ascending';\n\n        const newGridRows = [...gridRows];\n        newGridRows.sort((rowA, rowB) => {\n          const firstRowContent = rowA.cells[columnIndex].content || '';\n          const secondRowContent = rowB.cells[columnIndex].content || '';\n\n          if (newColumn.sortIndicator === 'ascending') {\n            return firstRowContent.localeCompare(secondRowContent);\n          }\n          return secondRowContent.localeCompare(firstRowContent);\n        });\n\n        setGridRows(newGridRows);\n      } else {\n        newColumn.sortIndicator = undefined;\n      }\n\n      return newColumn;\n    });\n\n    setGridColumns(newColumnArray);\n  };\n\n  return (\n    <React.Fragment>\n      <WorklistDataGrid\n        id=\"default-terra-worklist-data-grid\"\n        columns={gridColumns}\n        rows={gridRows}\n        rowHeaderIndex={rowHeaderIndex}\n        rowHeight=\"50px\"\n        defaultColumnWidth={100}\n        columnHeaderHeight=\"50px\"\n        onColumnSelect={onColumnSelect}\n        ariaLabel=\"Worklist Data Grid\"\n      />\n    </React.Fragment>\n  );\n};\n\nexport default DefaultWorklistDataGrid;\n\n")))}s.isMDXComponent=!0;var p=t(49271),c=function(e){var n=e.title,t=e.description,d=e.isExpanded;return a.createElement(p.Z,{title:n||"Worklist Data Grid Column States",description:t,example:a.createElement(l.Z,null),exampleSrc:a.createElement(s,null),isExpanded:d})}},13576:function(e,n,t){var a=t(64836);n.Z=void 0;var l=a(t(67294)),d=a(t(72095)),r=[{id:"Column-0",displayName:"Patient"},{id:"Column-1",displayName:"Location"},{id:"Column-2",displayName:"Illness Severity"},{id:"Column-3",displayName:"Visit"},{id:"Column-4",displayName:"Allergy"},{id:"Column-5",displayName:"Primary Contact"},{id:"Column-6",displayName:"Generic Order Counts"},{id:"Column-7",displayName:"Patient Age"},{id:"Column-8",displayName:"Medication History"},{id:"Column-9",displayName:"My Relationship"},{id:"Column-10",displayName:"Not Selectable",isSelectable:!1}],i=[{id:"1",cells:[{content:"Fleck, Arthur"},{content:"1007-MTN"},{content:"Unstable"},{content:"Inpatient, 2 months"},{content:""},{content:"Quinzell, Harleen"},{content:""},{isMasked:!0},{isMasked:!0},{content:"Admitting Physician"},{content:"",isSelectable:!1}]},{id:"2",cells:[{content:"Wayne, Bruce"},{content:"1007-MTN-DR"},{content:"Stable"},{content:"Outpatient, 2 days"},{content:"Phytochemicals"},{content:"Grayson, Richard"},{content:""},{content:""},{isMasked:!0},{content:"Admitting Physician"},{content:"",isSelectable:!1}]}],m=function(){var e=r,n=i;return l.default.createElement(l.default.Fragment,null,l.default.createElement(d.default,{id:"default-terra-worklist-data-grid",columns:e,rows:n,rowHeaderIndex:0,ariaLabel:"Worklist Data Grid"}))};n.Z=m},34728:function(e,n,t){var a=t(64836),l=t(18698);n.Z=void 0;var d=a(t(861)),r=a(t(38416)),i=a(t(27424)),m=function(e,n){if(!n&&e&&e.__esModule)return e;if(null===e||"object"!==l(e)&&"function"!=typeof e)return{default:e};var t=s(n);if(t&&t.has(e))return t.get(e);var a={},d=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var r in e)if("default"!==r&&Object.prototype.hasOwnProperty.call(e,r)){var i=d?Object.getOwnPropertyDescriptor(e,r):null;i&&(i.get||i.set)?Object.defineProperty(a,r,i):a[r]=e[r]}a.default=e,t&&t.set(e,a);return a}(t(67294)),o=a(t(72095));function s(e){if("function"!=typeof WeakMap)return null;var n=new WeakMap,t=new WeakMap;return(s=function(e){return e?t:n})(e)}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}var c=[{id:"Column-0",displayName:"Patient",sortIndicator:"ascending",hasError:!0},{id:"Column-1",displayName:"Location"},{id:"Column-2",displayName:"Illness Severity"},{id:"Column-3",displayName:"Visit"},{id:"Column-4",displayName:"Allergy",hasError:!0},{id:"Column-5",displayName:"Primary Contact"},{id:"Column-6",displayName:"Generic Order Counts"},{id:"Column-7",displayName:"Patient Age"},{id:"Column-8",displayName:"Medication History"},{id:"Column-9",displayName:"My Relationship"},{id:"Column-10",displayName:"Not Selectable",isSelectable:!1}],u=[{id:"1",cells:[{content:"Fleck, Arthur"},{content:"1007-MTN"},{content:"Unstable"},{content:"Inpatient, 2 months"},{content:""},{content:"Quinzell, Harleen"},{content:""},{isMasked:!0},{isMasked:!0},{content:"Admitting Physician"},{content:"",isSelectable:!1}]},{id:"2",cells:[{content:"Wayne, Bruce"},{content:"1007-MTN-DR"},{content:"Stable"},{content:"Outpatient, 2 days"},{content:"Phytochemicals"},{content:"Grayson, Richard"},{content:""},{content:""},{isMasked:!0},{content:"Admitting Physician"},{content:"",isSelectable:!1}]}],x=function(){var e=c,n=u,t=(0,m.useState)(e),a=(0,i.default)(t,2),l=a[0],s=a[1],x=(0,m.useState)(n),y=(0,i.default)(x,2),N=y[0],g=y[1];return m.default.createElement(m.default.Fragment,null,m.default.createElement(o.default,{id:"default-terra-worklist-data-grid",columns:l,rows:N,rowHeaderIndex:0,rowHeight:"50px",defaultColumnWidth:100,columnHeaderHeight:"50px",onColumnSelect:function(e){var n=l.map((function(n,t){var a=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){(0,r.default)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({},n);if(n.id===e){a.sortIndicator="ascending"===n.sortIndicator?"descending":"ascending";var l=(0,d.default)(N);l.sort((function(e,n){var l=e.cells[t].content||"",d=n.cells[t].content||"";return"ascending"===a.sortIndicator?l.localeCompare(d):d.localeCompare(l)})),g(l)}else a.sortIndicator=void 0;return a}));s(n)},ariaLabel:"Worklist Data Grid"}))};n.Z=x}}]);