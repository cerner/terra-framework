"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _keycodeJs = require("keycode-js");
var _ButtonGroupButton = _interopRequireDefault(require("./ButtonGroupButton"));
var _ButtonGroupUtils = _interopRequireDefault(require("./ButtonGroupUtils"));
var _ButtonGroupModule = _interopRequireDefault(require("./ButtonGroup.module.scss"));
var _excluded = ["children", "isBlock", "isMultiSelect", "onChange", "selectedKeys"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var cx = _bind.default.bind(_ButtonGroupModule.default);
var propTypes = {
  /**
   * Child nodes
   */
  children: _propTypes.default.node,
  /**
   * Allows user to set button group to fill container width.
   */
  isBlock: _propTypes.default.bool,
  /**
   * Whether or not it is a multi select button group.
   */
  isMultiSelect: _propTypes.default.bool,
  /**
   * Callback function when the state changes. Parameters are (event, key).
   */
  onChange: _propTypes.default.func,
  /**
   * A list of keys of the buttons that should be selected.
   */
  selectedKeys: _propTypes.default.arrayOf(_propTypes.default.string)
};
var defaultProps = {
  children: [],
  isBlock: false,
  selectedKeys: [],
  isMultiSelect: false
};
var ButtonGroup = /*#__PURE__*/function (_React$Component) {
  _inherits(ButtonGroup, _React$Component);
  var _super = _createSuper(ButtonGroup);
  function ButtonGroup(props) {
    var _this;
    _classCallCheck(this, ButtonGroup);
    _this = _super.call(this, props);
    _this.handleOnChange = _this.handleOnChange.bind(_assertThisInitialized(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(ButtonGroup, [{
    key: "handleOnChange",
    value: function handleOnChange(event, key) {
      if (this.props.onChange) {
        this.props.onChange(event, key);
      }
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event, idx) {
      var allBtns = this.btnGrpRef.querySelectorAll('[data-terra-button-group-button]');
      var key = idx;
      if (event.keyCode === _keycodeJs.KEY_RIGHT && allBtns[key + 1]) {
        key += 1;
        while (allBtns[key] && allBtns[key].hasAttribute('disabled')) {
          key += 1;
        }
        if (allBtns[key]) allBtns[key].focus();
      }
      if (event.keyCode === _keycodeJs.KEY_LEFT && allBtns[key - 1]) {
        key -= 1;
        while (allBtns[key] && allBtns[key].hasAttribute('disabled')) {
          key -= 1;
        }
        if (allBtns[key]) allBtns[key].focus();
      }
    }
  }, {
    key: "wrapKeyDown",
    value: function wrapKeyDown(item, idx) {
      var _this2 = this;
      var onKeyDown = item.props.onKeyDown;
      return function (event) {
        _this2.handleKeyDown(event, idx);
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
    }
  }, {
    key: "wrapOnClick",
    value: function wrapOnClick(item) {
      var _this3 = this;
      var onClick = item.props.onClick;
      return function (event) {
        _this3.handleOnChange(event, item.key);
        if (onClick) {
          onClick(event);
        }
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;
      var _this$props = this.props,
        children = _this$props.children,
        isBlock = _this$props.isBlock,
        isMultiSelect = _this$props.isMultiSelect,
        onChange = _this$props.onChange,
        selectedKeys = _this$props.selectedKeys,
        customProps = _objectWithoutProperties(_this$props, _excluded);
      var theme = this.context;
      var buttonGroupClassNames = (0, _classnames.default)(cx('button-group', {
        'is-block': isBlock
      }, theme.className), customProps.className);
      var allButtons = children ? [] : undefined;
      // eslint-disable-next-line no-nested-ternary
      var btnRole = onChange ? isMultiSelect ? 'checkbox' : 'radio' : 'button';
      _react.default.Children.forEach(children, function (child, index) {
        var isSelected = selectedKeys.indexOf(child.key) > -1;
        var cloneChild = /*#__PURE__*/_react.default.cloneElement(child, {
          role: btnRole,
          onClick: _this4.wrapOnClick(child),
          onKeyDown: _this4.wrapKeyDown(child, index),
          className: cx([{
            'is-selected': isSelected && !child.props.isDisabled
          }, child.props.className]),
          'aria-pressed': btnRole === 'button' && !child.props.isDisabled ? isSelected : undefined,
          'aria-checked': btnRole !== 'button' && !child.props.isDisabled ? isSelected : undefined
        });
        allButtons.push(cloneChild);
      });
      return /*#__PURE__*/_react.default.createElement("div", _extends({}, customProps, {
        ref: function ref(btnGrpRef) {
          _this4.btnGrpRef = btnGrpRef;
        },
        role: btnRole === 'radio' ? 'radiogroup' : 'group',
        className: buttonGroupClassNames
      }), allButtons);
    }
  }]);
  return ButtonGroup;
}(_react.default.Component);
ButtonGroup.propTypes = propTypes;
ButtonGroup.defaultProps = defaultProps;
ButtonGroup.Button = _ButtonGroupButton.default;
ButtonGroup.Utils = _ButtonGroupUtils.default;
ButtonGroup.contextType = _terraThemeContext.default;
var _default = ButtonGroup;
exports.default = _default;