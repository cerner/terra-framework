"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _IconModule = _interopRequireDefault(require("./Icon.module.scss"));
var _excluded = ["isBidi", "isSpin", "children", "height", "width", "ariaLabel", "a11yLabel", "focusable"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var cx = _bind.default.bind(_IconModule.default);
var propTypes = {
  /**
   * Should the svg mirror when dir="rtl".
   */
  isBidi: _propTypes.default.bool,
  /**
   * Should the SVG rotate.
   */
  isSpin: _propTypes.default.bool,
  /**
   * Child nodes.
   */
  children: _propTypes.default.node,
  /**
   * Height of SVG.
   */
  height: _propTypes.default.string,
  /**
   * Width of SVG.
   */
  width: _propTypes.default.string,
  /**
   * ![IMPORTANT](https://badgen.net/badge/UX/Accessibility/blue)
   * String that labels the current element.
   * a11yLabel is required for informative icons to convey meaning of icon to screenreaders.
   */
  a11yLabel: _propTypes.default.string,
  /**
   * ![IMPORTANT](https://badgen.net/badge/prop/deprecated/red)
   * ariaLabel has been deprecated and will be removed on next major version release.
   * rename the `ariaLabel` prop to `a11yLabel`.
   */
  ariaLabel: _propTypes.default.string,
  // to be removed on next major version release.
  /**
   * Focusable attribute. IE 10/11 are focusable without this attribute.
   */
  focusable: _propTypes.default.string
};
var defaultProps = {
  isBidi: false,
  isSpin: false,
  children: null,
  height: '1em',
  width: '1em',
  focusable: 'false'
};
var IconBase = function IconBase(_ref) {
  var isBidi = _ref.isBidi,
    isSpin = _ref.isSpin,
    children = _ref.children,
    height = _ref.height,
    width = _ref.width,
    ariaLabel = _ref.ariaLabel,
    a11yLabel = _ref.a11yLabel,
    focusable = _ref.focusable,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var attributes = _objectSpread({}, customProps);

  // append to existing classNames
  var classes = (0, _classnames.default)(cx('tui-Icon', 'icon', {
    'is-bidi': isBidi
  }, {
    'is-spin': isSpin
  }), attributes.className);
  var svgTitleTag;
  if (a11yLabel || ariaLabel) {
    svgTitleTag = /*#__PURE__*/_react.default.createElement('title', {}, a11yLabel || ariaLabel);
    if (ariaLabel) {
      // eslint-disable-next-line no-console
      console.warn('`ariaLabel` prop has been renamed to `a11yLabel`. please update all the refernces of ariaLabel prop to a11yLabel.'); // to be removed on next major version release.
    }
  } else {
    // removes Aria attributes, role and title from customProps
    Object.keys(attributes).forEach(function (prop) {
      if (prop.includes('aria') || prop === 'title' || prop === 'role') {
        delete attributes[prop];
      }
    });
    attributes.role = 'presentation';
  }
  attributes.height = height;
  attributes.width = width;
  attributes.focusable = focusable;
  return /*#__PURE__*/_react.default.createElement("svg", _extends({}, attributes, {
    className: classes
  }), svgTitleTag, children);
};
IconBase.propTypes = propTypes;
IconBase.defaultProps = defaultProps;
var _default = IconBase;
exports.default = _default;