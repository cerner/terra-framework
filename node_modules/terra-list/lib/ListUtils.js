"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var KeyCode = _interopRequireWildcard(require("keycode-js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var shouldBeMultiSelectable = function shouldBeMultiSelectable(maxSelectionCount, selectedKeys, key) {
  return maxSelectionCount < 0 || selectedKeys.indexOf(key) >= 0 || selectedKeys.length < maxSelectionCount;
};

/**
 * Returns a new array, updated with the newKey being added or removed from the existing.
 */
var updatedMultiSelectedKeys = function updatedMultiSelectedKeys(currentKeys, newKey) {
  var newKeys = [];
  if (currentKeys.length) {
    if (currentKeys.indexOf(newKey) >= 0) {
      newKeys = currentKeys.slice();
      newKeys.splice(newKeys.indexOf(newKey), 1);
    } else {
      newKeys = currentKeys.concat([newKey]);
    }
  } else {
    newKeys.push(newKey);
  }
  return newKeys;
};

/**
 * Returns a wrapped onClick callback function. If the onSelect method isn't passed, we return the initial onClick.
 */
var wrappedOnClickForItem = function wrappedOnClickForItem(onClick, onSelect, metaData) {
  if (!onSelect) {
    return onClick;
  }
  return function (event) {
    onSelect(event, metaData);
    if (onClick) {
      onClick(event);
    }
  };
};

/**
 * Returns a wrapped onKeyDown callback function with enter and space keys triggering onSelect. If the onSelect method isn't passed, we return the initial onClick.
 */
var wrappedOnKeyDownForItem = function wrappedOnKeyDownForItem(onKeyDown, onSelect, metaData) {
  if (!onSelect) {
    return onKeyDown;
  }
  return function (event) {
    if (event.nativeEvent.keyCode === KeyCode.KEY_RETURN || event.nativeEvent.keyCode === KeyCode.KEY_SPACE) {
      onSelect(event, metaData);
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  };
};

/**
 * Returns a function that wraps both the old and new callback.
 */
var wrappedEventCallback = function wrappedEventCallback(callback, newCallback) {
  if (!callback) {
    return newCallback;
  }
  return function (event) {
    newCallback(event);
    if (callback) {
      callback(event);
    }
  };
};
var SelectableUtils = {
  updatedMultiSelectedKeys: updatedMultiSelectedKeys,
  shouldBeMultiSelectable: shouldBeMultiSelectable,
  wrappedOnClickForItem: wrappedOnClickForItem,
  wrappedOnKeyDownForItem: wrappedOnKeyDownForItem,
  wrappedEventCallback: wrappedEventCallback
};
var _default = SelectableUtils;
exports.default = _default;