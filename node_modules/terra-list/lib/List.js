"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _reactIntl = require("react-intl");
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _ListModule = _interopRequireDefault(require("./List.module.scss"));
var _excluded = ["ariaDescribedBy", "ariaDescription", "ariaDetails", "children", "intl", "dividerStyle", "paddingStyle", "refCallback", "role", "ariaSelectionStyle"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var cx = _bind.default.bind(_ListModule.default);
var propTypes = {
  /**
   * References a visible or visually hidden text element
   * on the page that conveys information about the list
   * and how to interact with it. Maps to [aria-describedby](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby).
   * Because `aria-describedby` has the most comprehensive
   * screen reader support of `aria-describedby`, `aria-description`, and
   * `aria-details`, it should be the first choice for conveying
   * List instructions to screen readers. (Note: In some screen readers,
   * including JAWS, `aria-describedby` is not supported for non-interactable
   * elements. In these cases, use `aria-details`.)
   */
  ariaDescribedBy: _propTypes.default.string,
  /**
    * String that provides information about the list and how to interact
    * with it. Maps to [aria-description](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-description).
    * When used with the `ariaDescribedBy` prop, `ariaDescribedBy`
    * takes precedence in defining the accessible description property.
    * Because `aria-description` still has limited screen reader support
    * compared to `aria-describedby`, this prop should only be used in cases where
    * `aria-describedby` is not sufficient.
    */
  ariaDescription: _propTypes.default.string,
  /**
   * References a visible or visually hidden text element
   * on the page that conveys information about the list
   * and how to interact with it. Maps to
   * [aria-details](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-details).
   * Can be used alongside `ariaDescribedBy` or `ariaDescription`.
   * `aria-details` is not supported in all screen reader/browser
   * combinations. Consumers should test for different screen
   * reader/browser combinations to ensure that instructions
   * are consistently read.
   */
  ariaDetails: _propTypes.default.string,
  /**
   * The children list items passed to the component.
   */
  children: _propTypes.default.node,
  /**
   * @private
   * The intl object to be injected for translations.
   */
  intl: _propTypes.default.shape({
    formatMessage: _propTypes.default.func
  }),
  /**
   * Whether or not the list's child items should have a border color applied.
   * One of `'none'`, `'standard'`, `'bottom-only'`.
   */
  dividerStyle: _propTypes.default.oneOf(['none', 'standard', 'bottom-only']),
  /**
   * The padding styling to apply to the child list item content.
   * One of `'none'`, `'standard'`, `'compact'`.
   */
  paddingStyle: _propTypes.default.oneOf(['none', 'standard', 'compact']),
  /**
   * Function callback for the ref of the ul.
   */
  refCallback: _propTypes.default.func,
  /**
   * Accessibility role of the list, defaults to 'none'.
   */
  role: _propTypes.default.string,
  /**
   * Sets the role to `'listbox'` and provides an aria-description of whether its a single or multi-select list.
   * For multi-select lists, it sets aria-multiselectable to true.
   * One of `'none'`, `'single-select'`, `'multi-select'`.
   */
  ariaSelectionStyle: _propTypes.default.oneOf(['none', 'single-select', 'multi-select'])
};
var defaultProps = {
  children: [],
  dividerStyle: 'none',
  paddingStyle: 'none',
  role: 'none',
  ariaSelectionStyle: 'none'
};
var List = function List(_ref) {
  var ariaDescribedBy = _ref.ariaDescribedBy,
    ariaDescription = _ref.ariaDescription,
    ariaDetails = _ref.ariaDetails,
    children = _ref.children,
    intl = _ref.intl,
    dividerStyle = _ref.dividerStyle,
    paddingStyle = _ref.paddingStyle,
    refCallback = _ref.refCallback,
    role = _ref.role,
    ariaSelectionStyle = _ref.ariaSelectionStyle,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var listClassNames = (0, _classnames.default)(cx('list', {
    'padding-standard': paddingStyle === 'standard'
  }, {
    'padding-compact': paddingStyle === 'compact'
  }, {
    'divider-standard': dividerStyle === 'standard'
  }, {
    'divider-bottom-only': dividerStyle === 'bottom-only'
  }, theme.className), customProps.className);
  var attrSpread = {};
  attrSpread.role = 'list'; // Explicitly set role='list' as it's missing in Safari
  if (role && role.length > 0 && role !== 'none') {
    attrSpread.role = role;
  }
  if (ariaSelectionStyle === 'single-select') {
    attrSpread.role = 'listbox';
    attrSpread['aria-label'] = intl.formatMessage({
      id: 'Terra.list.singleSelect'
    });
  }
  if (ariaSelectionStyle === 'multi-select') {
    attrSpread.role = 'listbox';
    attrSpread['aria-multiselectable'] = true;
    attrSpread['aria-label'] = intl.formatMessage({
      id: 'Terra.list.multiSelect'
    });
  }
  return /*#__PURE__*/_react.default.createElement("ul", _extends({}, customProps, attrSpread, {
    "aria-describedby": ariaDescribedBy,
    "aria-description": ariaDescription // eslint-disable-line jsx-a11y/aria-props
    ,
    "aria-details": ariaDetails,
    className: listClassNames,
    ref: refCallback
  }), children);
};
List.propTypes = propTypes;
List.defaultProps = defaultProps;
var _default = (0, _reactIntl.injectIntl)(List);
exports.default = _default;