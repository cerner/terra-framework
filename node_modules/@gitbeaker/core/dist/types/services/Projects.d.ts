import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { EventOptions } from './Events';
import { UploadMetadata } from './ProjectImportExport';
export interface NamespaceInfoSchemaDefault {
    id: number;
    name: string;
    path: string;
    kind: string;
    full_path: string;
}
export interface NamespaceInfoSchemaCamelize {
    id: number;
    name: string;
    path: string;
    kind: string;
    fullPath: string;
}
export declare type ProjectSchema = ProjectSchemaDefault | ProjectSchemaCamelized;
export interface ProjectSchemaDefault {
    id: number;
    name: string;
    name_with_namespace: string;
    path: string;
    path_with_namespace: string;
    namespace: NamespaceInfoSchemaDefault;
    ssh_url_to_repo: string;
    http_url_to_repo: string;
    archived: boolean;
}
export interface ProjectSchemaCamelized {
    id: number;
    name: string;
    nameWithNamespace: string;
    path: string;
    pathWithNamespace: string;
    namespace: NamespaceInfoSchemaCamelize;
    sshUrlToRepo: string;
    httpUrlToRepo: string;
    archived: boolean;
}
export declare class Projects extends BaseService {
    all(options?: PaginatedRequestOptions): Promise<ProjectSchema[]>;
    archive(projectId: string | number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    create({ userId, ...options }: ({
        name: string;
    } | {
        path: string;
    }) & {
        userId?: number;
    } & BaseRequestOptions): Promise<import("../infrastructure").PostResponse>;
    edit(projectId: string | number, options?: BaseRequestOptions): Promise<import("../infrastructure").PostResponse>;
    events(projectId: string | number, options?: BaseRequestOptions & EventOptions): Promise<import("../infrastructure").GetResponse>;
    fork(projectId: string | number, { forkedFromId, ...options }?: {
        forkedFromId?: number;
    } & BaseRequestOptions): Promise<import("../infrastructure").PostResponse>;
    forks(projectId: string | number, options?: BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    languages(projectId: string | number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    mirrorPull(projectId: string | number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    remove(projectId: string | number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    removeFork(projectId: string | number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    search(projectName: string, options?: BaseRequestOptions): Promise<ProjectSchema[]>;
    share(projectId: string | number, groupId: string | number, groupAccess: number, options?: BaseRequestOptions): Promise<import("../infrastructure").PostResponse>;
    show(projectId: string | number, options?: BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    star(projectId: string | number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    statuses(projectId: string | number, sha: string, state: string, options?: BaseRequestOptions): Promise<import("../infrastructure").PostResponse>;
    transfer(projectId: string | number, namespaceId: string | number): Promise<import("../infrastructure").PostResponse>;
    unarchive(projectId: string | number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    unshare(projectId: string | number, groupId: string | number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    unstar(projectId: string | number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    upload(projectId: any, content: any, { metadata, ...options }?: {
        metadata?: UploadMetadata;
    } & BaseRequestOptions): Promise<import("../infrastructure").PostResponse>;
}
