import { BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { CommitSchema } from './Commits';
import { PipelineSchema } from './Pipelines';
import { UserSchema } from './Users';
import { RunnerSchema } from './Runners';
export declare type DeploymentStatus = 'created' | 'running' | 'success' | 'failed' | 'canceled';
export interface DeploymentSchema {
    id: number;
    iid: number;
    ref: string;
    sha: string;
    user: UserSchema;
}
export declare type Deployable = DeployableDefault | DeployableCamelized;
export interface DeployableDefault {
    id: number;
    ref: string;
    name: string;
    runner?: RunnerSchema;
    stage?: string;
    started_at?: Date;
    status?: DeploymentStatus;
    tag: boolean;
    commit?: CommitSchema;
    coverage?: string;
    created_at?: Date;
    finished_at?: Date;
    user?: UserSchema;
    pipeline?: PipelineSchema;
}
export interface DeployableCamelized {
    id: number;
    ref: string;
    name: string;
    runner?: RunnerSchema;
    stage?: string;
    startedAt?: Date;
    status?: DeploymentStatus;
    tag: boolean;
    commit?: CommitSchema;
    coverage?: string;
    createdAt?: Date;
    finishedAt?: Date;
    user?: UserSchema;
    pipeline?: PipelineSchema;
}
export declare class Deployments extends BaseService {
    all(projectId: string | number, options?: PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
    show(projectId: string | number, deploymentId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    mergeRequests(projectId: string | number, deploymentId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
}
