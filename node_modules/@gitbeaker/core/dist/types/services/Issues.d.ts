import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
declare type ProjectOrGroup = {
    projectId: string | number;
} | {
    groupId: string | number;
} | {};
export declare class Issues extends BaseService {
    addSpentTime(projectId: string | number, issueId: number, duration: string, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    addTimeEstimate(projectId: string | number, issueId: number, duration: string, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    all({ projectId, groupId, ...options }?: ProjectOrGroup & PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
    create(projectId: string | number, options?: BaseRequestOptions): Promise<import("../infrastructure").PostResponse>;
    edit(projectId: string | number, issueId: number, options?: BaseRequestOptions): Promise<import("../infrastructure").PostResponse>;
    links(projectId: string | number, issueIId: number): Promise<import("../infrastructure").GetResponse>;
    link(projectId: string | number, issueIid: number, targetProjectId: string | number, targetIssueId: number, options?: BaseRequestOptions): Promise<import("../infrastructure").PostResponse>;
    removeLink(projectId: string | number, issueIId: number, issueLinkId: string | number, options?: BaseRequestOptions): Promise<import("../infrastructure").PostResponse>;
    participants(projectId: string | number, issueId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    remove(projectId: string | number, issueId: number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    resetSpentTime(projectId: string | number, issueId: number, options?: BaseRequestOptions): Promise<import("../infrastructure").PostResponse>;
    resetTimeEstimate(projectId: string | number, issueId: number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    show(projectId: string | number, issueId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    subscribe(projectId: string | number, issueId: number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
    timeStats(projectId: string | number, issueId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    unsubscribe(projectId: string | number, issueId: number, options?: Sudo): Promise<import("../infrastructure").PostResponse>;
}
export {};
