import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
export interface AcceptMergeRequestOptions {
    mergeCommitMessage?: string;
    squashCommitMessage?: string;
    squash?: boolean;
    shouldRemoveSourceBranch?: boolean;
    mergeWhenPipelineSucceeds?: boolean;
    sha?: string;
}
export interface ShowMergeRequestOptions {
    renderHtml?: boolean;
    includeDivergedCommitsCount?: true;
    includeRebaseInProgress?: boolean;
}
export interface CreateMergeRequestOptions {
    assigneeId?: number;
    description?: string;
    targetProjectId?: number;
    labels?: string;
    milestoneId?: number;
    removeSourceBranch?: boolean;
    allowCollaboration?: boolean;
    allowMaintainerToPush?: boolean;
    squash?: boolean;
}
export interface UpdateMergeRequestOptions {
    targetBranch?: number;
    title?: string;
    assigneeId?: number;
    milestoneId?: number;
    labels?: string;
    description?: string;
    stateEvent?: string;
    removeSourceBranch?: boolean;
    squash?: boolean;
    discussionLocked?: boolean;
    allowCollaboration?: boolean;
    allowMaintainerToPush?: boolean;
}
export interface AllMergeRequestsOptions {
    state?: 'opened' | 'closed' | 'locked' | 'merged';
    orderBy?: 'created_at' | 'updated_at';
    sort?: 'asc' | 'desc';
    milestone?: 'None' | string;
    view?: string;
    labels?: string;
    withLabelsDetails?: boolean;
    createdAfter?: string;
    createdBefore?: string;
    updatedBefore?: string;
    updatedAfter?: string;
    scope?: 'created_by_me' | 'assigned_to_me' | 'all';
    authorId?: number;
    asigneeId?: number;
    approverIds?: Array<number>;
    approvedByIds?: Array<number>;
    myReactionEmoji?: string;
    sourceBranch?: string;
    targetBranch?: string;
    in?: string;
    wip?: string;
}
export declare class MergeRequests extends BaseService {
    accept(projectId: string | number, mergerequestIid: number, options?: AcceptMergeRequestOptions & BaseRequestOptions): Promise<import("../infrastructure").PutResponse>;
    addSpentTime(projectId: string | number, mergerequestIid: number, duration: string, options?: Sudo): Promise<import("../infrastructure").PutResponse>;
    addTimeEstimate(projectId: string | number, mergerequestIid: number, duration: string, options?: Sudo): Promise<import("../infrastructure").PutResponse>;
    all({ projectId, groupId, ...options }: ({
        projectId: string | number;
    } | {
        groupId: string | number;
    }) & AllMergeRequestsOptions & PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
    approve(projectId: string | number, mergerequestIid: number, options?: {
        sha?: string;
    } & BaseRequestOptions): Promise<import("../infrastructure").PutResponse>;
    approvals(projectId: string | number, { mergerequestIid, ...options }?: {
        mergerequestIid?: number;
    } & BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    approvalState(projectId: string | number, mergerequestIid: number, options?: {
        sha?: string;
    } & BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    approvers(projectId: string | number, approverIds: number[], approverGroupIds: (string | number)[], { mergerequestIid, ...options }?: {
        mergerequestIid?: number;
    } & BaseRequestOptions): Promise<import("../infrastructure").PutResponse>;
    cancelOnPipelineSucess(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").PutResponse>;
    changes(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    closesIssues(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    commits(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    create(projectId: string | number, sourceBranch: string, targetBranch: string, title: string, options?: CreateMergeRequestOptions & BaseRequestOptions): Promise<import("../infrastructure").PutResponse>;
    edit(projectId: string | number, mergerequestIid: number, options?: UpdateMergeRequestOptions & BaseRequestOptions): Promise<import("../infrastructure").PutResponse>;
    editApprovals(projectId: string | number, { mergerequestIid, ...options }?: {
        mergerequestIid?: number;
    } & BaseRequestOptions): Promise<import("../infrastructure").PutResponse>;
    participants(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    pipelines(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    remove(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").PutResponse>;
    resetSpentTime(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").PutResponse>;
    resetTimeEstimate(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").PutResponse>;
    show(projectId: string | number, mergerequestIid: number, options?: ShowMergeRequestOptions & BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    timeStats(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    version(projectId: string | number, mergerequestIid: number, versionId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    versions(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    unapprove(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").PutResponse>;
    unsubscribe(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<import("../infrastructure").PutResponse>;
}
