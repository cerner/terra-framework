import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo, ShowExpanded } from '../infrastructure';
import { ProjectSchema } from './Projects';
export declare type GroupSchema = GroupSchemaDefault | GroupSchemaCamelized;
export interface GroupSchemaDefault {
    id: number;
    name: string;
    path: string;
    full_name: string;
    full_path: string;
    parent_id: number;
    visibility: string;
    avatar_url: string;
    web_url: string;
}
export interface GroupSchemaCamelized {
    id: number;
    name: string;
    path: string;
    fullName: string;
    fullPath: string;
    parentId: number;
    visibility: string;
    avatarUrl: string;
    webUrl: string;
}
export declare type GroupDetailSchema = GroupSchema & {
    projects: ProjectSchema[];
};
export declare class Groups extends BaseService {
    all(options?: PaginatedRequestOptions): Promise<GroupSchema[]>;
    create(name: any, path: any, options?: BaseRequestOptions & ShowExpanded): Promise<import("../infrastructure").PostResponse>;
    createLDAPLink(groupId: string | number, cn: any, groupAccess: any, provider: string, options?: Sudo & ShowExpanded): Promise<import("../infrastructure").PostResponse>;
    edit(groupId: string | number, options?: BaseRequestOptions & ShowExpanded): Promise<import("../infrastructure").PostResponse>;
    projects(groupId: string | number, options?: BaseRequestOptions): Promise<ProjectSchema[]>;
    remove(groupId: string | number, options?: Sudo & ShowExpanded): Promise<import("../infrastructure").PostResponse>;
    removeLDAPLink(groupId: string | number, cn: any, { provider, ...options }?: Sudo & ShowExpanded & {
        provider?: string;
    }): Promise<import("../infrastructure").PostResponse>;
    search(nameOrPath: string, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    show(groupId: string | number, options?: BaseRequestOptions): Promise<GroupDetailSchema>;
    subgroups(groupId: string | number, options?: PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
    syncLDAP(groupId: string | number, options?: Sudo & ShowExpanded): Promise<import("../infrastructure").PostResponse>;
}
