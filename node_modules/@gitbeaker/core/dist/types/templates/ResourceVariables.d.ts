import { BaseService, BaseServiceOptions, PaginatedRequestOptions } from '../infrastructure';
export declare type ResourceVariableSchema = ResourceVariableSchemaDefault | ResourceVariableSchemaCamelized;
export interface ResourceVariableSchemaDefault {
    variable_type: 'env_var' | 'file';
    value: string;
    protected: boolean;
    masked: boolean;
    environment_scope?: string;
    key: string;
}
export interface ResourceVariableSchemaCamelizedNoKey {
    variableType: 'env_var' | 'file';
    value: string;
    protected: boolean;
    masked: boolean;
    environmentScope?: string;
}
export interface ResourceVariableSchemaCamelized extends ResourceVariableSchemaCamelizedNoKey {
    key: string;
}
export declare class ResourceVariables extends BaseService {
    constructor(resourceType: string, options: BaseServiceOptions);
    all(resourceId: string | number, options?: PaginatedRequestOptions): Promise<ResourceVariableSchema[]>;
    create(resourceId: string | number, options?: ResourceVariableSchemaCamelized): Promise<ResourceVariableSchema>;
    edit(resourceId: string | number, keyId: string, options?: ResourceVariableSchemaCamelizedNoKey): Promise<ResourceVariableSchema>;
    show(resourceId: string | number, keyId: string, options?: PaginatedRequestOptions): Promise<ResourceVariableSchema>;
    remove(resourceId: string | number, keyId: string, options?: PaginatedRequestOptions): Promise<import("../infrastructure").PostResponse>;
}
