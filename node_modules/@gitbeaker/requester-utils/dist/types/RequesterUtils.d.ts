/// <reference types="node" />
import { Agent } from 'https';
import * as FormData from 'form-data';
export interface RequesterType {
    get(service: object, endpoint: string, options?: object): Promise<any>;
    post(service: object, endpoint: string, options?: object): Promise<any>;
    put(service: object, endpoint: string, options?: object): Promise<any>;
    delete(service: object, endpoint: string, options?: object): Promise<any>;
    stream?(service: object, endpoint: string, options?: object): Promise<any>;
}
export interface Service {
    headers: Record<string, string | string[]>;
    requestTimeout: number;
    url: string;
    rejectUnauthorized?: boolean;
}
export declare type DefaultRequestOptions = {
    body?: FormData | object;
    query?: object;
    sudo?: string;
    method?: string;
};
export declare function formatQuery(options: any): string;
export declare function defaultRequest(service: Service, { body, query, sudo, method }?: DefaultRequestOptions): Record<string, string | number | FormData | Agent | Record<string, string | string[] | Agent>>;
export declare function createInstance(optionsHandler: any, requestHandler: any): RequesterType;
export interface Constructable {
    new (...args: any[]): any;
}
export declare function modifyServices<T extends {
    [name: string]: Constructable;
}>(services: T, customConfig?: object): T;
