"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _events = require("events");

var _jsonrpcDispatch = _interopRequireDefault(require("jsonrpc-dispatch"));

var _logger = _interopRequireDefault(require("../lib/logger"));

var _uri = _interopRequireDefault(require("../lib/uri"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * Application container class which represents an application frame hosting
 * an app on a 3rd party domain.
 */
var Frame = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2.default)(Frame, _EventEmitter);

  var _super = _createSuper(Frame);

  function Frame(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Frame);
    _this = _super.call(this, props); // Binds 'this' for methods called internally

    _this.handleProviderMessage = _this.handleProviderMessage.bind((0, _assertThisInitialized2.default)(_this));
    _this.initIframeResizer = _this.initIframeResizer.bind((0, _assertThisInitialized2.default)(_this));
    _this.send = _this.send.bind((0, _assertThisInitialized2.default)(_this));
    _this.cleanup = _this.cleanup.bind((0, _assertThisInitialized2.default)(_this));
    _this.load = _this.load.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }
  /**
  * @param {object} container - The DOM node to append the application frame to.
  * @param {string} source - The url source of the application
  * @param {object} options - An optional parameter that contains a set of optional configs
  */


  (0, _createClass2.default)(Frame, [{
    key: "init",
    value: function init(container, source) {
      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref$secret = _ref.secret,
          secret = _ref$secret === void 0 ? null : _ref$secret,
          _ref$resizeConfig = _ref.resizeConfig,
          resizeConfig = _ref$resizeConfig === void 0 ? {} : _ref$resizeConfig,
          _ref$iframeAttrs = _ref.iframeAttrs,
          iframeAttrs = _ref$iframeAttrs === void 0 ? {} : _ref$iframeAttrs,
          _ref$customMethods = _ref.customMethods,
          customMethods = _ref$customMethods === void 0 ? {} : _ref$customMethods;

      this.source = source;
      this.container = container;
      this.iframe = null;
      this.iframeAttrs = iframeAttrs;
      this.wrapper = null;
      this.origin = new _uri.default(this.source).origin;
      this.secret = secret;
      this.resizeConfig = resizeConfig;
      var self = this;
      this.JSONRPC = new _jsonrpcDispatch.default(self.send, _objectSpread({
        launch: function launch() {
          self.wrapper.setAttribute('data-status', 'launched');
          self.emit('xfc.launched');
          return Promise.resolve();
        },
        authorized: function authorized() {
          var detail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          self.wrapper.setAttribute('data-status', 'authorized');
          self.emit('xfc.authorized', detail);
          self.initIframeResizer();
          return Promise.resolve();
        },
        unload: function unload() {
          var detail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          self.wrapper.setAttribute('data-status', 'unloaded');
          self.emit('xfc.unload', detail);
          return Promise.resolve();
        },
        resize: function resize() {
          var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
          var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

          if (typeof resizeConfig.customCalculationMethod === 'function') {
            resizeConfig.customCalculationMethod.call(self.iframe);
            return Promise.resolve();
          }

          if (height) {
            self.iframe.style.height = height;
          }

          if (width) {
            self.iframe.style.width = width;
          }

          return Promise.resolve();
        },
        event: function event(_event, detail) {
          self.emit(_event, detail);
          return Promise.resolve();
        },
        authorizeConsumer: function authorizeConsumer() {
          return Promise.resolve('hello');
        },
        challengeConsumer: function challengeConsumer() {
          return Promise.resolve(self.secret);
        },
        loadPage: function loadPage(url) {
          self.load(url);
          return Promise.resolve();
        }
      }, customMethods));
    }
  }, {
    key: "initIframeResizer",
    value: function initIframeResizer() {
      var config = this.resizeConfig; // If user chooses to use fixedHeight or fixedWidth,
      // set height/width to the specified value and keep unchanged.

      if (config.fixedHeight || config.fixedWidth) {
        if (config.fixedHeight) {
          this.iframe.style.height = config.fixedHeight;
        }

        if (config.fixedWidth) {
          this.iframe.style.width = config.fixedWidth;
        }
      } else {
        // If user chooses to update iframe dynamically,
        // replace customCalculationMethod by a boolean indicator
        // in config because method is not transferrable.
        if (typeof config.customCalculationMethod === 'function') {
          config = _objectSpread({}, config);
          config.customCal = true;
          delete config.customCalculationMethod;
        }

        this.JSONRPC.notification('resize', [config]);
      }
    }
    /**
    * Mount this application onto its container and initiate resize sync.
    */

  }, {
    key: "mount",
    value: function mount() {
      if (this.iframe) return; // Set up listener for all incoming communication

      window.addEventListener('message', this.handleProviderMessage);
      this.wrapper = document.createElement('div');
      this.wrapper.className = 'xfc';
      this.wrapper.setAttribute('data-status', 'mounted');
      this.container.appendChild(this.wrapper);
      var iframe = document.createElement('iframe');
      iframe.src = this.source;

      if (!this.resizeConfig.scrolling) {
        iframe.style.overflow = 'hidden';
        iframe.scrolling = 'no';
      } // Put custom attributes on iframe if specified


      Object.entries(this.iframeAttrs).forEach(function (_ref2) {
        var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
            key = _ref3[0],
            value = _ref3[1];

        iframe.setAttribute(key, value);
      });
      this.iframe = iframe;
      this.wrapper.appendChild(iframe);
      this.emit('xfc.mounted');
    }
    /**
     * Unmount this application from its container
     */

  }, {
    key: "unmount",
    value: function unmount() {
      if (this.wrapper.parentNode === this.container) {
        this.container.removeChild(this.wrapper);
        this.emit('xfc.unmounted');
        this.cleanup();
      }
    }
    /**
     * Cleans up unused message listeners and references of detached nodes
     */

  }, {
    key: "cleanup",
    value: function cleanup() {
      // Remove listener for all incoming communication
      window.removeEventListener('message', this.handleProviderMessage); // Sets references of detached nodes to null to avoid potential memory leak

      this.iframe = null;
      this.wrapper = null;
    }
    /**
     * Loads a new page within existing frame.
     * @param  {string} url - the URL of new page to load.
     */

  }, {
    key: "load",
    value: function load(url) {
      this.origin = new _uri.default(url).origin;
      this.source = url;
      this.wrapper.setAttribute('data-status', 'mounted');
      this.iframe.src = url; // Triggers the loading of new page
    }
    /**
    * Handles an incoming message event by processing the JSONRPC request
    * @param {object} event - The emitted message event.
    */

  }, {
    key: "handleProviderMessage",
    value: function handleProviderMessage(event) {
      // 1. This isn't a JSONRPC message or iframe is null, exit.
      if (!event.data.jsonrpc || !this.iframe) return; // 2. Identify the app the message came from.

      if (this.iframe.contentWindow !== event.source) return; // For Chrome, the origin property is in the event.originalEvent object.
      // Update origin so it can be used to post back to this frame.

      this.origin = event.origin || event.originalEvent.origin;

      _logger.default.log('<< consumer', event.origin, event.data); // 3. Send a response, if any, back to the app.


      this.JSONRPC.handle(event.data);
    }
    /**
    * Post the given message to the application frame.
    * @param {object} message - The message to post.
    * See: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
    */

  }, {
    key: "send",
    value: function send(message) {
      if (message) {
        _logger.default.log('>> consumer', this.origin, message);

        this.iframe.contentWindow.postMessage(message, this.origin);
      }
    }
    /**
    * Triggers an event within the embedded application.
    * @param {string} event - The event name to trigger.
    * @param {object} detail - The data context to send with the event.
    */

  }, {
    key: "trigger",
    value: function trigger(event, detail) {
      this.JSONRPC.notification('event', [event, detail]);
    }
    /**
    * Calls an event in the parent application.
    * @param {string} method - The event name to trigger.
    * @param {array} args - params to be sent to the event.
    */

  }, {
    key: "invoke",
    value: function invoke(method) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      return this.JSONRPC.request(method, args);
    }
  }]);
  return Frame;
}(_events.EventEmitter);

var _default = Frame;
exports.default = _default;