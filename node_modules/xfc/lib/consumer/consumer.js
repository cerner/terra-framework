"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _frame = _interopRequireDefault(require("./frame"));

var Consumer = /*#__PURE__*/function () {
  function Consumer() {
    (0, _classCallCheck2.default)(this, Consumer);
  }

  (0, _createClass2.default)(Consumer, [{
    key: "init",

    /**
     * Initialize a consumer.
     * @param  {Array}  globalHandlers - an object containing event handlers that apply to all frames.
     * @example
     * // Each key/value pair in globalHandlers should be a pair of event name and event handler.
     * const handlers = {'eventA': function() {}, 'eventB': function() {}};
     * Consumer.init(handlers);
     */
    value: function init() {
      var globalHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.globalHandlers = globalHandlers;
    }
    /**
     * Mount the given source as an application into the given container.
     * @param {object} container - The DOM element to append the mounted frame to.
     * @param {string} source - The source URL to load the app from.
     * @param {string} options - An optional parameter that contains optional configs
     * @return {Frame} Returns the application that was mounted.
     */

  }, {
    key: "mount",
    value: function mount(container, source) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var frame = new _frame.default();
      frame.init(container, source, options); // Apply global handlers to the frame

      Object.entries(this.globalHandlers).forEach(function (_ref) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            event = _ref2[0],
            handler = _ref2[1];

        var handlersArray = [].concat(handler);
        handlersArray.forEach(function (eventHandler) {
          // Add the given event handler to the frame.
          if (typeof eventHandler === 'function') {
            frame.on(event, eventHandler);
          }
        });
      });
      frame.mount();
      return frame;
    }
  }]);
  return Consumer;
}();

var _default = Consumer;
exports.default = _default;