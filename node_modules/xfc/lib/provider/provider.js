"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _application = _interopRequireDefault(require("./application"));

var _logger = _interopRequireDefault(require("../lib/logger"));

var Provider = /*#__PURE__*/function () {
  function Provider() {
    (0, _classCallCheck2.default)(this, Provider);
  }

  (0, _createClass2.default)(Provider, [{
    key: "init",
    value: function init(config) {
      var enforceSecurity = config.secret || config.acls.some(function (x) {
        return x !== '*';
      }); // Set hidden attribute with script if not present and security is being enforced

      if (enforceSecurity && window.self !== window.top && !(document.documentElement.hasAttribute && document.documentElement.hasAttribute('hidden'))) {
        document.documentElement.setAttribute('hidden', null); // WARNING: Setting hidden attribute with script can be countered by
        // hackers using iframe sandbox attribute OR a frame busting technique.

        _logger.default.warn('Security warning: Hidden attribute not detected on document and has been added.');
      }

      this.application = new _application.default();
      this.application.init(config);
      this.application.launch();
    }
  }, {
    key: "on",
    value: function on(eventName, listener) {
      this.application.on(eventName, listener);
    }
  }, {
    key: "fullscreen",
    value: function fullscreen(source) {
      this.application.fullscreen(source);
    }
  }, {
    key: "httpError",
    value: function httpError(error) {
      this.application.httpError(error);
    }
  }, {
    key: "trigger",
    value: function trigger(event, detail) {
      this.application.trigger(event, detail);
    }
  }, {
    key: "loadPage",
    value: function loadPage(url) {
      this.application.loadPage(url);
    }
  }, {
    key: "invoke",
    value: function invoke(jsonRPCFunction, args) {
      return this.application.invoke(jsonRPCFunction, args);
    }
  }]);
  return Provider;
}();

var _default = Provider;
exports.default = _default;