"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TextWeight = exports.TextFontSize = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _TextModule = _interopRequireDefault(require("./Text.module.scss"));
var _excluded = ["children", "isVisuallyHidden", "isItalic", "fontSize", "weight", "isWordWrapped", "colorClass"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var cx = _bind.default.bind(_TextModule.default);

/* eslint-disable quote-props */
var TextFontSize = {
  '10': 10,
  '12': 12,
  '14': 14,
  '16': 16,
  '18': 18,
  '20': 20,
  '24': 24,
  '32': 32,
  '36': 36,
  '46': 46,
  '50': 50,
  '56': 56,
  '64': 64,
  '72': 72,
  '92': 92,
  '100': 100
};
exports.TextFontSize = TextFontSize;
var TextWeight = {
  '200': 200,
  '300': 300,
  '400': 400,
  '700': 700
};
/* eslint-enable quote-props */
exports.TextWeight = TextWeight;
var propTypes = {
  /**
   * Child nodes
   */
  children: _propTypes.default.node.isRequired,
  /**
   * Sets the text to display in italics.
   */
  isItalic: _propTypes.default.bool,
  /**
   * Sets the text to appear visually hidden. The text will still be available to screen readers.
   */
  isVisuallyHidden: _propTypes.default.bool,
  /**
   * Indicates if word wrapping styles should be applied.
   */
  isWordWrapped: _propTypes.default.bool,
  /**
   * Sets the text size. One of `10`, `12`, `14`, `16`, `18`, `20`, `24`, `32`, `36`, `46`, `50`, `56`, `64`, `72`, `92`, `100`.
   */
  fontSize: _propTypes.default.oneOf([10, 12, 14, 16, 18, 20, 24, 32, 36, 46, 50, 56, 64, 72, 92, 100]),
  /**
   * The prop can be used to specify the weight or boldness of the Text component. One of `200`, `300`, `400`, `700`.
   */
  weight: _propTypes.default.oneOf([200, 300, 400, 700]),
  /**
   * Sets an author defined class, to control the colors of the text and override the base color styles.
   *
   * ![IMPORTANT](https://badgen.net/badge//IMPORTANT/blue?icon=github)
   * Adding `var(--my-app...` CSS variables is required for proper re-themeability when creating custom color styles _(see included examples)_.
   */
  colorClass: _propTypes.default.string
};
var defaultProps = {
  isItalic: false,
  isVisuallyHidden: false,
  isWordWrapped: false
};
var Text = function Text(_ref) {
  var children = _ref.children,
    isVisuallyHidden = _ref.isVisuallyHidden,
    isItalic = _ref.isItalic,
    fontSize = _ref.fontSize,
    weight = _ref.weight,
    isWordWrapped = _ref.isWordWrapped,
    colorClass = _ref.colorClass,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var attributes = _objectSpread({}, customProps);
  var TextClassNames = (0, _classnames.default)(cx(['text', {
    'inherit-color': !colorClass
  },
  // set `color: inherit` via class if colorClass is not provided
  {
    italic: isItalic
  }, {
    'word-wrap': isWordWrapped
  }, {
    'visually-hidden': isVisuallyHidden
  }, _defineProperty({}, "font-size-".concat(fontSize), fontSize), _defineProperty({}, "font-weight-".concat(weight), weight), colorClass, theme.className]), attributes.className);
  return /*#__PURE__*/_react.default.createElement("span", _extends({}, attributes, {
    className: TextClassNames
  }), children);
};
Text.propTypes = propTypes;
Text.defaultProps = defaultProps;
var _default = Text;
exports.default = _default;