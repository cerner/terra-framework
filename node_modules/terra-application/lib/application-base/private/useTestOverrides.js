"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var APPLICATION_BASE_OVERRIDE_EVENT = 'applicationBase.testOverride';

/**
 * Custom React hook that overrides locale and themes via events. Leveraged by full stack testing to control deployed applications.
 * @returns {Object} Contains the locale, theme to override with.
 */
var useTestOverrides = function useTestOverrides() {
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    localeOverride = _useState2[0],
    setLocaleOverride = _useState2[1];
  var _useState3 = (0, _react.useState)(),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    themeOverride = _useState4[0],
    setThemeOverride = _useState4[1];
  (0, _react.useEffect)(function () {
    var handleTestOverrides = function handleTestOverrides(event) {
      if (!event || !event.metaData) {
        return;
      }
      var metaData = event.metaData;
      if (typeof metaData.locale !== 'undefined') {
        setLocaleOverride(metaData.locale);
      }
      if (typeof metaData.theme !== 'undefined') {
        setThemeOverride(metaData.theme);
      }
    };
    window.addEventListener(APPLICATION_BASE_OVERRIDE_EVENT, handleTestOverrides);
    return function () {
      window.removeEventListener(APPLICATION_BASE_OVERRIDE_EVENT, handleTestOverrides);
    };
  }, []); // Empty array ensures we setup and teardown event listener once.

  return {
    localeOverride: localeOverride,
    themeOverride: themeOverride
  };
};
var _default = useTestOverrides;
exports.default = _default;