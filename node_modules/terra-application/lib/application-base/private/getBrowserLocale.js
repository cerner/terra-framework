"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSupported = exports.filterLanguages = exports.default = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
/* global TERRA_AGGREGATED_LOCALES */

// The fallback locale that will be used if a supported locale is unable to be retrieved from the browser.
var DEFAULT_LOCALE = 'en';

/**
 * Returns a boolean indicating if the locale is supported.
 * @param {string} locale - The locale.
 * @returns {bool} - A boolean indicating the locale is supported.
 */
var isSupported = function isSupported(locale) {
  if ((typeof TERRA_AGGREGATED_LOCALES === "undefined" ? "undefined" : (0, _typeof2.default)(TERRA_AGGREGATED_LOCALES)) === 'object' && Array.isArray(TERRA_AGGREGATED_LOCALES) && locale) {
    return TERRA_AGGREGATED_LOCALES.indexOf(locale) > -1;
  }
  return false;
};

/**
 * Filters the user's preferred languages from the browser and returns the first language found that is included in the supported locale list.
 * @returns {string|null} - A supported locale. Null if not found.
 */
exports.isSupported = isSupported;
var filterLanguages = function filterLanguages() {
  if (navigator.languages && navigator.languages.length > 0) {
    for (var index = 0; index < navigator.languages.length; index += 1) {
      var locale = navigator.languages[index];
      var fallbackLocale = locale.split('-').length > 1 ? locale.split('-')[0] : undefined;
      if (isSupported(locale)) {
        return locale;
      }
      if (fallbackLocale && isSupported(fallbackLocale)) {
        return fallbackLocale;
      }
    }
  }
  return null;
};

/**
 * Retrieves the preferred browser locale.
 * @returns {string} - A supported browser locale. Falls back to en.
 */
exports.filterLanguages = filterLanguages;
var getBrowserLocale = function getBrowserLocale() {
  var preferredLocale = filterLanguages();
  if (preferredLocale) {
    return preferredLocale;
  }
  if (isSupported(navigator.language)) {
    return navigator.language;
  }
  if (isSupported(navigator.userLanguage)) {
    return navigator.userLanguage;
  }
  if (isSupported(navigator.browserLanguage)) {
    return navigator.browserLanguage;
  }
  return DEFAULT_LOCALE;
};
var _default = getBrowserLocale;
exports.default = _default;