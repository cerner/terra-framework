"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraBase = _interopRequireDefault(require("terra-base"));
var _terraThemeProvider = _interopRequireDefault(require("terra-theme-provider"));
var _terraBreakpoints = require("terra-breakpoints");
var _ThemeContextProvider = _interopRequireDefault(require("terra-theme-context/lib/ThemeContextProvider"));
var _applicationErrorBoundary = _interopRequireDefault(require("../application-error-boundary"));
var _applicationIntl = require("../application-intl");
var _applicationLoadingOverlay = _interopRequireWildcard(require("../application-loading-overlay"));
var _applicationStatusOverlay = require("../application-status-overlay");
var _navigationPrompt = require("../navigation-prompt");
var _getBrowserLocale = _interopRequireDefault(require("./private/getBrowserLocale"));
var _useTestOverrides2 = _interopRequireDefault(require("./private/useTestOverrides"));
require("./private/initializeInert");
var _ApplicationBaseModule = _interopRequireDefault(require("./ApplicationBase.module.scss"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* global TERRA_THEME_CONFIG */

var cx = _bind.default.bind(_ApplicationBaseModule.default);
var browserLocale = (0, _getBrowserLocale.default)();

// We only need to retrieve the root theme and root theme name once for the life of the application.
var themeConfig = typeof TERRA_THEME_CONFIG !== 'undefined' ? TERRA_THEME_CONFIG : undefined;
var rootThemeName = themeConfig !== null && themeConfig !== void 0 && themeConfig.theme ? themeConfig.theme : 'terra-default-theme';
var propTypes = {
  /**
   * The components to render within ApplicationBase.
   */
  children: _propTypes.default.node.isRequired,
  /**
   * The locale name to be used to load translated messages.
   * If the `locale` prop is not provided, the preferred language from the browser will be used.
   */
  locale: _propTypes.default.string,
  /**
   * Custom translations for the current locale.
   */
  customTranslatedMessages: function customTranslatedMessages(props, propName, componentName) {
    if (!props[propName]) {
      return null;
    }
    if (Object.keys(props[propName]).length !== 0 && props.locale === undefined) {
      return new Error("Missing locale prop for ".concat(propName, " in ").concat(componentName, " props"));
    }
    return null;
  },
  /**
   * The component to render while the translation files are being retrieved.
   * NOTE: Absolutely no locale-dependent logic should be
   * utilized in this placeholder.
   */
  translationsLoadingPlaceholder: _propTypes.default.node,
  /**
   * The name of the theme to apply to the application using terra-theme-provider.
   */
  themeName: _propTypes.default.string,
  /**
   * By default, the elements rendered by ApplicationBase are fit to the Application's parent using 100% height.
   * If `fitToParentIsDisabled` is provided, the Application will render at its intrinsic content height and
   * potentially overflow its parent.
   */
  fitToParentIsDisabled: _propTypes.default.bool,
  /**
   * By default, NavigationPrompts rendered within ApplicationBase will cause the user to be prompted during
   * the window's beforeUnload event. If `unloadPromptIsDisabled` is provided, the user will **not** be prompted
   * before continuing with the unload event, even if NavigationPrompts are present.
   */
  unloadPromptIsDisabled: _propTypes.default.bool
};
var ApplicationBase = function ApplicationBase(_ref) {
  var locale = _ref.locale,
    customTranslatedMessages = _ref.customTranslatedMessages,
    translationsLoadingPlaceholder = _ref.translationsLoadingPlaceholder,
    themeName = _ref.themeName,
    fitToParentIsDisabled = _ref.fitToParentIsDisabled,
    children = _ref.children,
    unloadPromptIsDisabled = _ref.unloadPromptIsDisabled;
  var registeredPromptsRef = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    if (unloadPromptIsDisabled) {
      return undefined;
    }
    function onBeforeUnload(event) {
      if (registeredPromptsRef.current && registeredPromptsRef.current.length) {
        event.preventDefault();

        // Chrome requires returnValue to be set to present the confirmation dialog
        event.returnValue = ''; // eslint-disable-line no-param-reassign

        // For this prompt, ApplicationBase is limited to browser-defaulted messaging.
        return '';
      }
      return undefined;
    }
    window.addEventListener('beforeunload', onBeforeUnload);
    return function () {
      window.removeEventListener('beforeunload', onBeforeUnload);
    };
  }, [unloadPromptIsDisabled, registeredPromptsRef]);
  var _useTestOverrides = (0, _useTestOverrides2.default)(),
    localeOverride = _useTestOverrides.localeOverride,
    themeOverride = _useTestOverrides.themeOverride; // Allows us to test deployed applications in different locales.

  var theme = (0, _react.useMemo)(function () {
    return {
      // If the theme class name is undefined or an empty string, that indicates we have the root theme and should apply the root theme name.
      name: themeOverride || themeName || rootThemeName,
      className: themeOverride || themeName
    };
  }, [themeOverride, themeName]);
  return /*#__PURE__*/_react.default.createElement("div", {
    "data-terra-application-base": true,
    className: cx('application-base', {
      fill: !fitToParentIsDisabled
    })
  }, /*#__PURE__*/_react.default.createElement(_terraThemeProvider.default, {
    themeName: themeName
  }, /*#__PURE__*/_react.default.createElement(_ThemeContextProvider.default, {
    theme: theme
  }, /*#__PURE__*/_react.default.createElement(_terraBase.default, {
    customMessages: customTranslatedMessages,
    throwOnI18nLoadError: true,
    translationsLoadingPlaceholder: translationsLoadingPlaceholder,
    locale: localeOverride || locale || browserLocale
  }, /*#__PURE__*/_react.default.createElement(_applicationErrorBoundary.default, null, /*#__PURE__*/_react.default.createElement(_applicationIntl.ApplicationIntlProvider, null, /*#__PURE__*/_react.default.createElement(_terraBreakpoints.ActiveBreakpointProvider, null, /*#__PURE__*/_react.default.createElement(_navigationPrompt.NavigationPromptCheckpoint, {
    onPromptChange: function onPromptChange(registeredPrompts) {
      registeredPromptsRef.current = registeredPrompts;
    }
  }, /*#__PURE__*/_react.default.createElement(_applicationLoadingOverlay.ApplicationLoadingOverlayProvider, null, /*#__PURE__*/_react.default.createElement(_applicationStatusOverlay.ApplicationStatusOverlayProvider, null, /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement(_applicationLoadingOverlay.default, {
      isOpen: true
    })
  }, children)))))))))));
};
ApplicationBase.propTypes = propTypes;
var _default = ApplicationBase;
exports.default = _default;