"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _breakpoints = require("terra-application/lib/breakpoints");
var _applicationLoadingOverlay = _interopRequireDefault(require("terra-application/lib/application-loading-overlay"));
var _applicationStatusOverlay = _interopRequireDefault(require("terra-application/lib/application-status-overlay"));
var _applicationBase = _interopRequireDefault(require("terra-application/lib/application-base"));
var _navigationPrompt = _interopRequireDefault(require("terra-application/lib/navigation-prompt"));
var _applicationIntl = require("terra-application/lib/application-intl");
var _theme = require("terra-application/lib/theme");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var ApplicationContentTest = function ApplicationContentTest() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isLoading = _useState2[0],
    setIsLoading = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    throwError = _useState4[0],
    setThrowError = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    blockUnload = _useState6[0],
    setBlockUnload = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    showStatusOverlay = _useState8[0],
    setShowStatusOverlay = _useState8[1];
  var activeBreakpoint = (0, _react.useContext)(_breakpoints.ActiveBreakpointContext);
  var applicationIntl = (0, _react.useContext)(_applicationIntl.ApplicationIntlContext);
  var theme = (0, _react.useContext)(_theme.ThemeContext);
  if (throwError) {
    throw new Error("Testing ApplicationBase's error boundary...");
  }
  var activeBreakpointTest = /*#__PURE__*/_react.default.createElement("p", null, "Active Breakpoint:", ' ', activeBreakpoint);
  var intlTest = /*#__PURE__*/_react.default.createElement("p", null, "Active Locale:", ' ', applicationIntl.locale);
  var themeTest = /*#__PURE__*/_react.default.createElement("p", null, "Active Theme:", ' ', theme.name);
  var errorBoundaryTest = /*#__PURE__*/_react.default.createElement("p", null, "Render Error:", ' ', /*#__PURE__*/_react.default.createElement("button", {
    id: "error",
    type: "button",
    onClick: function onClick() {
      setThrowError(true);
    }
  }, "Throw"));
  var loadingOverlayTest = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, "Show Loading Overlay:", ' ', /*#__PURE__*/_react.default.createElement("button", {
    id: "overlay",
    type: "button",
    onClick: function onClick() {
      setIsLoading(true);
    }
  }, "Show")), /*#__PURE__*/_react.default.createElement(_applicationLoadingOverlay.default, {
    isOpen: isLoading,
    message: "Testing ApplicationBase's loading overlay"
  }));
  var statusOverlayTest = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, "Show Status View:", ' ', /*#__PURE__*/_react.default.createElement("button", {
    id: "statusView",
    type: "button",
    onClick: function onClick() {
      setShowStatusOverlay(true);
    }
  }, "Show")), showStatusOverlay && /*#__PURE__*/_react.default.createElement(_applicationStatusOverlay.default, {
    message: "Testing ApplicationBase's status view",
    variant: "no-matching-results"
  }));
  var navigationPromptTest = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, "Prompt on window close:", ' ', /*#__PURE__*/_react.default.createElement("button", {
    id: "prompt",
    type: "button",
    onClick: function onClick() {
      setBlockUnload(!blockUnload);
    }
  }, "Enable navigation prompt")), blockUnload ? /*#__PURE__*/_react.default.createElement(_navigationPrompt.default, {
    description: "Testing ApplicationBase's navigation prompt handling"
  }) : undefined);
  return /*#__PURE__*/_react.default.createElement("div", null, activeBreakpointTest, intlTest, themeTest, errorBoundaryTest, loadingOverlayTest, statusOverlayTest, navigationPromptTest);
};
var ApplicationBaseTest = function ApplicationBaseTest() {
  return /*#__PURE__*/_react.default.createElement(_applicationBase.default, null, /*#__PURE__*/_react.default.createElement(ApplicationContentTest, null));
};
var _default = ApplicationBaseTest;
exports.default = _default;