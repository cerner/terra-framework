"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ModalContent = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraScroll = _interopRequireDefault(require("terra-scroll"));
var _breakpoints = require("terra-application/lib/breakpoints");
var _applicationLoadingOverlay = _interopRequireDefault(require("terra-application/lib/application-loading-overlay"));
var _applicationIntl = require("terra-application/lib/application-intl");
var _disclosureManager = require("terra-application/lib/disclosure-manager");
var _PendingActionToggle = _interopRequireDefault(require("./PendingActionToggle"));
var _ModalPresenterModule = _interopRequireDefault(require("./ModalPresenter.module.scss"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var cx = _bind.default.bind(_ModalPresenterModule.default);
var ModalContent = function ModalContent(_ref) {
  var name = _ref.name,
    onSubmit = _ref.onSubmit;
  var activeBreakpoint = (0, _react.useContext)(_breakpoints.ActiveBreakpointContext);
  var applicationIntl = (0, _react.useContext)(_applicationIntl.ApplicationIntlContext);
  var disclosureManager = (0, _react.useContext)(_disclosureManager.DisclosureManagerContext);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    hasError = _useState2[0],
    setHasError = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isInitialized = _useState4[0],
    setIsInitialized = _useState4[1];
  var timeoutRef = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    if (isInitialized) {
      return undefined;
    }
    var timeout = setTimeout(function () {
      setIsInitialized(true);
    }, 2000);
    clearTimeout(timeoutRef.current);
    return function () {
      clearTimeout(timeout);
    };
  }, [isInitialized]);
  if (!isInitialized) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_disclosureManager.DisclosureManagerHeaderAdapter, {
      title: name
    }), /*#__PURE__*/_react.default.createElement(_applicationLoadingOverlay.default, {
      isOpen: true,
      backgroundStyle: "clear"
    }));
  }
  if (hasError) {
    throw new Error('Modal Page failed to render');
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_disclosureManager.DisclosureManagerHeaderAdapter, {
    title: name
  }), /*#__PURE__*/_react.default.createElement(_terraScroll.default, null, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('modal-content')
  }, /*#__PURE__*/_react.default.createElement("h2", null, name), /*#__PURE__*/_react.default.createElement("h3", null, "Modal Dismissal"), /*#__PURE__*/_react.default.createElement("p", null, "This modal will close when the Esc key is pressed, the Close button is pressed, or if the disclosee dismisses it when the Done button is pressed."), /*#__PURE__*/_react.default.createElement("button", {
    type: "button",
    onClick: function onClick() {
      /**
       * The registered dismiss check is overridden prior to calling onSubmit to allow the modal to be closed cleanly
       * without prompting the user.
       */
      disclosureManager.registerDismissCheck(function () {
        return Promise.resolve();
      });
      onSubmit();
    }
  }, "Done"), /*#__PURE__*/_react.default.createElement("h3", null, "Configuration Properties"), /*#__PURE__*/_react.default.createElement("p", null, "Active Breakpoint:", ' ', /*#__PURE__*/_react.default.createElement("span", null, activeBreakpoint)), /*#__PURE__*/_react.default.createElement("p", null, "Intl Locale:", ' ', /*#__PURE__*/_react.default.createElement("span", null, applicationIntl.locale)), /*#__PURE__*/_react.default.createElement("h3", null, "Error Handling"), /*#__PURE__*/_react.default.createElement("p", null, "Press the button below to throw an exception that will be caught and handled by the framework."), /*#__PURE__*/_react.default.createElement("button", {
    type: "button",
    onClick: function onClick() {
      setHasError(true);
    }
  }, "Throw Error"), /*#__PURE__*/_react.default.createElement(_PendingActionToggle.default, null))));
};
exports.ModalContent = ModalContent;
ModalContent.propTypes = {
  name: _propTypes.default.string,
  onSubmit: _propTypes.default.func
};
var ModalPresenter = function ModalPresenter() {
  var disclosureManager = (0, _react.useContext)(_disclosureManager.DisclosureManagerContext);
  var disclosureRef = (0, _react.useRef)();
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h3", null, "Modal Presenter"), /*#__PURE__*/_react.default.createElement("p", null, "This component uses the DisclosureManagerContext to present a modal."), /*#__PURE__*/_react.default.createElement("button", {
    type: "button",
    onClick: function onClick() {
      disclosureManager.disclose({
        preferredType: 'modal',
        size: 'large',
        content: {
          key: 'modal_component_demo',
          component: /*#__PURE__*/_react.default.createElement(ModalContent, {
            name: "Modal Component Demo",
            onSubmit: function onSubmit() {
              if (disclosureRef.current) {
                disclosureRef.current();
                disclosureRef.current = undefined;
              }
            }
          })
        }
      }).then(function (_ref2) {
        var dismissDisclosure = _ref2.dismissDisclosure;
        disclosureRef.current = dismissDisclosure;
      });
    }
  }, "Show Modal"));
};
var _default = ModalPresenter;
exports.default = _default;