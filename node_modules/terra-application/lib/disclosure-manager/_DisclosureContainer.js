"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactIntl = require("react-intl");
var _terraContentContainer = _interopRequireDefault(require("terra-content-container"));
var _DisclosureManagerContext = _interopRequireDefault(require("terra-disclosure-manager/lib/DisclosureManagerContext"));
var _DisclosureManagerDelegate = _interopRequireDefault(require("terra-disclosure-manager/lib/DisclosureManagerDelegate"));
var _applicationLoadingOverlay = require("../application-loading-overlay");
var _navigationPrompt = require("../navigation-prompt");
var _applicationErrorBoundary = _interopRequireDefault(require("../application-error-boundary"));
var _useNotificationBanners = _interopRequireDefault(require("../notification-banner/private/useNotificationBanners"));
var _disclosureCallbacks = require("./_disclosureCallbacks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var propTypes = {
  /**
   * The components to render within the context of the DisclosureContainer.
   */
  children: _propTypes.default.node,
  /**
   * The Object (or function that returns an Object) that specifies the messages
   * used to prompt the user when disclosure dismissal occurs when pending state
   * is present.
   */
  navigationPromptResolutionOptions: _navigationPrompt.navigationPromptResolutionOptionsShape
};

/**
 * injectIntl (rather that the ApplicationIntlContext) is used here to keep the DisclosureContainer's context dependencies
 * passive with previous v1.x versions. ApplicationIntlContext cannot be used here without a version bump.
 */

var DisclosureContainer = (0, _reactIntl.injectIntl)(function (_ref) {
  var intl = _ref.intl,
    children = _ref.children,
    navigationPromptResolutionOptions = _ref.navigationPromptResolutionOptions;
  var disclosureManager = (0, _react.useContext)(_DisclosureManagerContext.default);
  var _useNotificationBanne = (0, _useNotificationBanners.default)(),
    NotificationBannerProvider = _useNotificationBanne.NotificationBannerProvider,
    NotificationBanners = _useNotificationBanne.NotificationBanners;
  var promptCheckpointRef = (0, _react.useRef)();
  var customRegisterDismissCheckRef = (0, _react.useRef)();
  var overrideDisclosureManagerContext = (0, _react.useMemo)(function () {
    return _DisclosureManagerDelegate.default.clone(disclosureManager, {
      registerDismissCheck: function registerDismissCheck(check) {
        customRegisterDismissCheckRef.current = check;

        /**
         * Return Promise to align with DisclosureManager's default implementation.
         */
        return Promise.resolve();
      }
    });
  }, [disclosureManager]);
  var defaultPromptOptions = (0, _react.useMemo)(function () {
    return (0, _navigationPrompt.getUnsavedChangesPromptOptions)(intl);
  }, [intl]);
  (0, _react.useEffect)(function () {
    var callback = disclosureManager.goBack || disclosureManager.closeDisclosure;
    (0, _disclosureCallbacks.addCallback)(callback);
    return function () {
      (0, _disclosureCallbacks.removeCallback)(callback);
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useEffect)(function () {
    disclosureManager.registerDismissCheck(function () {
      if (customRegisterDismissCheckRef.current) {
        return customRegisterDismissCheckRef.current();
      }
      return new Promise(function (resolve, reject) {
        if (!promptCheckpointRef.current) {
          resolve();
          return;
        }
        promptCheckpointRef.current.resolvePrompts(navigationPromptResolutionOptions || defaultPromptOptions).then(resolve, reject);
      });
    });
  }, [defaultPromptOptions, disclosureManager, navigationPromptResolutionOptions]);
  return /*#__PURE__*/_react.default.createElement(_DisclosureManagerContext.default.Provider, {
    value: overrideDisclosureManagerContext
  }, /*#__PURE__*/_react.default.createElement(_applicationErrorBoundary.default, null, /*#__PURE__*/_react.default.createElement(_applicationLoadingOverlay.ApplicationLoadingOverlayProvider, null, /*#__PURE__*/_react.default.createElement(_navigationPrompt.NavigationPromptCheckpoint, {
    ref: promptCheckpointRef
  }, /*#__PURE__*/_react.default.createElement(_terraContentContainer.default, {
    header: /*#__PURE__*/_react.default.createElement(NotificationBanners, null),
    fill: true
  }, /*#__PURE__*/_react.default.createElement(NotificationBannerProvider, null, children))))));
});
DisclosureContainer.propTypes = propTypes;
var _default = DisclosureContainer;
exports.default = _default;