"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeCallback = exports.getActiveDisclosureCount = exports.closeMostRecentDisclosure = exports.addCallback = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var disclosureCallbacks = [];
var addCallback = function addCallback(callback) {
  disclosureCallbacks = [].concat((0, _toConsumableArray2.default)(disclosureCallbacks), [callback]);
};
exports.addCallback = addCallback;
var removeCallback = function removeCallback(callback) {
  disclosureCallbacks = disclosureCallbacks.filter(function (disclosureCallback) {
    return disclosureCallback !== callback;
  });
};

/**
 * Closes the most recent disclosure for any instance of a terra-application
 * disclosure manager.  This should be used only as a last resort to hook up external events to the disclosure manager
 * functionality.
 * @returns {Promise} A promise that will be resolved once the disclosure is successfully dismissed.
 * If the disclosure is not dismissed the promise will be rejected.  If there is no disclosure available to close,
 * the promise will be resolved.
 */
exports.removeCallback = removeCallback;
var closeMostRecentDisclosure = function closeMostRecentDisclosure() {
  if (!disclosureCallbacks.length) {
    return Promise.resolve();
  }
  return disclosureCallbacks[disclosureCallbacks.length - 1]();
};

/**
 * Returns the number of disclosures that are currently being disclosed through any instance of a terra-application
 * disclosure manager.
 * @returns {number} The active disclosure count.
 */
exports.closeMostRecentDisclosure = closeMostRecentDisclosure;
var getActiveDisclosureCount = function getActiveDisclosureCount() {
  return disclosureCallbacks.length;
};
exports.getActiveDisclosureCount = getActiveDisclosureCount;