"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _v = _interopRequireDefault(require("uuid/v4"));
var _ApplicationNavigation = _interopRequireDefault(require("./private/ApplicationNavigation"));
var _propTypes2 = require("./private/utils/propTypes");
var _applicationErrorBoundary = _interopRequireDefault(require("../application-error-boundary"));
var _applicationLoadingOverlay = _interopRequireWildcard(require("../application-loading-overlay"));
var _applicationStatusOverlay = require("../application-status-overlay");
var _navigationPrompt = require("../navigation-prompt");
var _applicationIntl = require("../application-intl");
var _ApplicationNavigationWorkspace = _interopRequireDefault(require("./private/workspace-layout/ApplicationNavigationWorkspace"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var propTypes = {
  /**
   * A string key representing the currently active navigation item. This value should match one of the item keys provided in the
   * `navigationItems` array.
   */
  activeNavigationItemKey: _propTypes.default.string,
  /**
   * A collection of child elements to render within the ApplicationNavigation body.
   */
  children: _propTypes.default.node,
  /**
   * By default, the ApplicationNavigation component will resolve any registered NavigationPrompts prior to
   * communicating logout selection with `onSelectLogout`. If `disablePromptsForLogout` is provided,
   * no NavigationPrompts are resolved when logout is selected.
   */
  disablePromptsForLogout: _propTypes.default.bool,
  /**
   * By default, the ApplicationNavigation component will resolve any rendered NavigationPrompts prior to
   * communicating navigation item selections with `onSelectNavigationItem`. If `disablePromptsForNavigationItems`
   * is provided, no NavigationPrompts are resolved when navigation items are selected.
   */
  disablePromptsForNavigationItems: _propTypes.default.bool,
  /**
   * A configuration object with information specifying the creation of the Extension buttons rendered within the
   * ApplicationNavigation header.
   */
  extensionItems: _propTypes2.extensionItemsPropType,
  /**
   * An element to render within the ApplicationNavigation utility menu, shifted to the drawer at the `medium` breakpoint and below.
   */
  hero: _propTypes.default.element,
  /**
   * The base id used to generate ids of workspace, navigation, utility, and extension items
   */
  id: _propTypes.default.string,
  /**
   * An array of configuration objects with information specifying the creation of navigation items. These items
   * are rendered within the ApplicationNavigation header at larger breakpoints and within the drawer menu at smaller breakpoints.
   */
  navigationItems: _propTypes2.navigationItemsPropType,
  /**
   * The Object (or function that returns an Object) that specifies the messages
   * used to prompt the user when navigation items are selected while NavigationPrompts
   * are rendered by the ApplicationNavigation content.
   */
  navigationPromptResolutionOptions: _navigationPrompt.navigationPromptResolutionOptionsShape,
  /**
   * Key/Value pairs associating a string key entry to a Number notification count. The keys must correspond to a
   * navigationItem or extensionItem key provided through their associated props.
   */
  notifications: _propTypes.default.object,
  /**
   * Callback function triggered on Drawer Menu state change.
   */
  onDrawerMenuStateChange: _propTypes.default.func,
  /**
   * A function to be executed upon the selection of an extensions item.
   *
   * Ex: `onSelectExtensionsItem(String selectedUtilityItemKey, Object metaData)`
   */
  onSelectExtensionItem: _propTypes.default.func,
  /**
   * A function to be executed upon the selection of the Help utility item.
   * If `onSelectHelp` is not provided, the Help utility item will not be rendered.
   *
   * Ex: `onSelectHelp()`
   */
  onSelectHelp: _propTypes.default.func,
  /**
   * A function to be executed upon the selection of the Logout action button.
   * If `onSelectLogout` is not provided, the Logout action button will not be rendered.
   *
   * Ex: `onSelectLogout()`
   */
  onSelectLogout: _propTypes.default.func,
  /**
   * A function to be executed upon the selection of a navigation item.
   *
   * Ex: `onSelectNavigationItem(String selectedNavigationItemKey, Object metaData)`
   */
  onSelectNavigationItem: _propTypes.default.func,
  /**
   * A function to be executed upon the selection of the Settings utility item.
   * If `onSelectSettings` is not provided, the Settings utility item will not be rendered.
   *
   * Ex: `onSelectSettings()`
   */
  onSelectSettings: _propTypes.default.func,
  /**
   * A function to be executed upon the selection of a custom utility item.
   *
   * Ex: `onSelectUtilityItem(String selectedUtilityItemKey, Object metaData)`
   */
  onSelectUtilityItem: _propTypes.default.func,
  /**
   * A configuration object that defines the strings rendered within the ApplicationNavigation header.
   */
  titleConfig: _propTypes2.titleConfigPropType,
  /**
   * A configuration object to render an action button for user Config.
   */
  userActionConfig: _propTypes2.userActionConfigPropType,
  /**
   * A configuration object with information pertaining to the application's user.
   */
  userConfig: _propTypes2.userConfigPropType,
  /**
   * An array of configuration objects with information specifying the creation of additional utility menu items.
   * These items are rendered within the popup utility menu at larger breakpoints and within the drawer menu at smaller breakpoints.
   */
  utilityItems: _propTypes2.utilityItemsPropType,
  /**
   * An ApplicationNavigationWorkspace element and it's associated ApplicationNavigationWorkspaceItems.
   */
  workspace: _propTypes.default.element
};
var ApplicationNavigation = function ApplicationNavigation(_ref) {
  var activeNavigationItemKey = _ref.activeNavigationItemKey,
    children = _ref.children,
    disablePromptsForLogout = _ref.disablePromptsForLogout,
    disablePromptsForNavigationItems = _ref.disablePromptsForNavigationItems,
    extensionItems = _ref.extensionItems,
    hero = _ref.hero,
    id = _ref.id,
    navigationItems = _ref.navigationItems,
    navigationPromptResolutionOptions = _ref.navigationPromptResolutionOptions,
    notifications = _ref.notifications,
    onDrawerMenuStateChange = _ref.onDrawerMenuStateChange,
    onSelectExtensionItem = _ref.onSelectExtensionItem,
    onSelectHelp = _ref.onSelectHelp,
    propOnSelectLogout = _ref.onSelectLogout,
    propOnSelectNavigationItem = _ref.onSelectNavigationItem,
    onSelectSettings = _ref.onSelectSettings,
    onSelectUtilityItem = _ref.onSelectUtilityItem,
    titleConfig = _ref.titleConfig,
    userConfig = _ref.userConfig,
    utilityItems = _ref.utilityItems,
    workspace = _ref.workspace,
    userActionConfig = _ref.userActionConfig;
  var applicationIntl = _react.default.useContext(_applicationIntl.ApplicationIntlContext);
  var navigationPromptCheckpointRef = (0, _react.useRef)();
  var idRef = _react.default.useRef("navigation-".concat((0, _v.default)()));
  var onSelectNavigationItem = (0, _react.useCallback)(function (selectedItemKey) {
    if (disablePromptsForNavigationItems) {
      propOnSelectNavigationItem(selectedItemKey);
      return;
    }
    navigationPromptCheckpointRef.current.resolvePrompts(navigationPromptResolutionOptions || (0, _navigationPrompt.getUnsavedChangesPromptOptions)(applicationIntl)).then(function () {
      propOnSelectNavigationItem(selectedItemKey);
    }).catch(function (e) {
      if (e) throw e;
    });
  }, [applicationIntl, disablePromptsForNavigationItems, navigationPromptResolutionOptions, propOnSelectNavigationItem]);
  var onSelectLogout = (0, _react.useCallback)(function () {
    if (disablePromptsForLogout) {
      propOnSelectLogout();
      return;
    }
    navigationPromptCheckpointRef.current.resolvePrompts(navigationPromptResolutionOptions || (0, _navigationPrompt.getUnsavedChangesPromptOptions)(applicationIntl)).then(function () {
      propOnSelectLogout();
    }).catch(function (e) {
      if (e) throw e;
    });
  }, [applicationIntl, disablePromptsForLogout, navigationPromptResolutionOptions, propOnSelectLogout]);
  return /*#__PURE__*/_react.default.createElement(_ApplicationNavigation.default, {
    id: id || idRef.current,
    hero: hero,
    notifications: notifications,
    titleConfig: titleConfig,
    navigationItems: navigationItems,
    onSelectNavigationItem: propOnSelectNavigationItem && onSelectNavigationItem,
    activeNavigationItemKey: activeNavigationItemKey,
    userConfig: userConfig,
    userActionConfig: userActionConfig,
    extensionItems: extensionItems,
    onSelectExtensionItem: onSelectExtensionItem,
    utilityItems: utilityItems,
    onSelectUtilityItem: onSelectUtilityItem,
    onSelectSettings: onSelectSettings,
    onSelectHelp: onSelectHelp,
    onSelectLogout: propOnSelectLogout && onSelectLogout,
    onDrawerMenuStateChange: onDrawerMenuStateChange,
    workspace: workspace
  }, /*#__PURE__*/_react.default.createElement(_applicationLoadingOverlay.ApplicationLoadingOverlayProvider, null, /*#__PURE__*/_react.default.createElement(_applicationStatusOverlay.ApplicationStatusOverlayProvider, null, /*#__PURE__*/_react.default.createElement(_navigationPrompt.NavigationPromptCheckpoint, {
    ref: navigationPromptCheckpointRef
  }, /*#__PURE__*/_react.default.createElement(_applicationErrorBoundary.default, null, /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement(_applicationLoadingOverlay.default, {
      isOpen: true
    })
  }, children))))));
};
ApplicationNavigation.propTypes = propTypes;
ApplicationNavigation.Workspace = _ApplicationNavigationWorkspace.default;
var _default = ApplicationNavigation;
exports.default = _default;