"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _reactDraggable = require("react-draggable");
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _ResizeHandleModule = _interopRequireDefault(require("./ResizeHandle.module.scss"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var cx = _bind.default.bind(_ResizeHandleModule.default);
var propTypes = {
  /**
   * Function called upon release of the ResizeHandle. The id, as well as the new ResizeHandle position, will be provided
   * as arguments. Parameters: `onResizeStop(resizeHandleId, positionDelta)`
   */
  onResizeStop: _propTypes.default.func,
  /**
   * Function called upon move of the ResizeHandle.
   * Parameters: `onResizeMove(node)`
   */
  onResizeMove: _propTypes.default.func,
  /**
   * Function called upon start of the ResizeHandle.
   * Parameters: `onResizeStart(resizeHandleId, positionDelta)`
   */
  onResizeStart: _propTypes.default.func
};
var MINIMUM_WORKSPACE_WIDTH = 320;
var ResizeHandle = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(ResizeHandle, _React$Component);
  var _super = _createSuper(ResizeHandle);
  function ResizeHandle(props) {
    var _this;
    (0, _classCallCheck2.default)(this, ResizeHandle);
    _this = _super.call(this, props);
    _this.handleDragMove = _this.handleDragMove.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleDragStart = _this.handleDragStart.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleDragStop = _this.handleDragStop.bind((0, _assertThisInitialized2.default)(_this));
    _this.resizeBoundsRef = /*#__PURE__*/_react.default.createRef();
    return _this;
  }
  (0, _createClass2.default)(ResizeHandle, [{
    key: "handleDragMove",
    value: function handleDragMove(event, data) {
      var onResizeMove = this.props.onResizeMove;
      var handleNode = data.node;
      this.resizeHandleDragPosition += data.deltaX;
      var newWidth = data.x * -1 + this.resizeBoundsRef.current.currentWidth;
      var scale = (newWidth - MINIMUM_WORKSPACE_WIDTH) / this.resizeBoundsRef.current.range;
      if (scale >= 0 && scale <= 1) {
        handleNode.style.transform = "translate3d(".concat(this.resizeHandleDragPosition, "px, 0, 0)");
      }
      if (onResizeMove) {
        onResizeMove(handleNode);
      }
    }
  }, {
    key: "handleDragStart",
    value: function handleDragStart(event, data) {
      var _this2 = this;
      var onResizeStart = this.props.onResizeStart;
      var handleNode = data.node;
      this.resizeHandleDragPosition = 0;
      handleNode.classList.add(cx('dragging'));
      if (onResizeStart) {
        onResizeStart(function (bounds) {
          _this2.resizeBoundsRef.current = bounds;
        });
      }
    }
  }, {
    key: "handleDragStop",
    value: function handleDragStop(event, data) {
      var onResizeStop = this.props.onResizeStop;
      var handleNode = data.node;
      handleNode.classList.remove(cx('dragging'));
      handleNode.style.transform = '';
      if (onResizeStop) {
        onResizeStop(this.resizeHandleDragPosition);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var theme = this.context;
      return (
        /*#__PURE__*/
        /* eslint-disable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */
        _react.default.createElement(_reactDraggable.DraggableCore, {
          onStart: this.handleDragStart,
          onStop: this.handleDragStop,
          onDrag: this.handleDragMove
        }, /*#__PURE__*/_react.default.createElement("div", {
          "data-testid": "resize-handle",
          className: cx('resize-handle', theme.className),
          onClick: ResizeHandle.preventClickEvent
        }))
        /* eslint-enable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */
      );
    }
  }], [{
    key: "preventClickEvent",
    value:
    /**
     * Click events that occur on the ResizeHandle are not propagated. This prevents clicks on the ResizeHandle from registering
     * as clicks on the elements over which the ResizeHandle is rendered.
     */
    function preventClickEvent(event) {
      event.stopPropagation();
    }
  }]);
  return ResizeHandle;
}(_react.default.Component);
ResizeHandle.propTypes = propTypes;
ResizeHandle.contextType = _terraThemeContext.default;
var _default = ResizeHandle;
exports.default = _default;