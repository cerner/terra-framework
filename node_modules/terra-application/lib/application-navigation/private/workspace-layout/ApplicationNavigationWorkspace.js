"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _workspace = _interopRequireWildcard(require("../../../workspace"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var propTypes = {
  /**
   * Callback function triggering when the workspace size changes.
   */
  onSizeChange: _propTypes.default.func,
  /**
   * Callback function triggering when the open state of workspace changes between true and false.
   */
  onPresentationStateChange: _propTypes.default.func,
  /**
   * Callback function triggering when the active workspace item changes.
   */
  onActiveItemChange: _propTypes.default.func,
  /**
   * The string key linked to the active workspace item.
   */
  initialActiveItemKey: _propTypes.default.string.isRequired,
  /**
   * WorkspaceItems to be rendered within the workspace.
   */
  children: _propTypes.default.node.isRequired,
  /**
   * Whether or not the workspace should initially display as open.
   */
  initialIsOpen: _propTypes.default.bool,
  /**
   * The size string value matching the active size option.
   */
  initialSize: _propTypes.default.object,
  /**
   * @private
   * Id string to apply to the workspace
   */
  id: _propTypes.default.string.isRequired,
  /**
   * @private
   * Whether or not the workspace is open
   */
  isOpen: _propTypes.default.bool,
  /**
   * @private
   * Function callback i.e. `onRequest(event)`
   */
  onRequestClose: _propTypes.default.func,
  /**
   * @private
   * Whether or not the workspace is present as an overlay
   */
  isPresentedAsOverlay: _propTypes.default.bool,
  /**
   * @private
   * Numeric scale value ranging from `0.0 - 1.0` as the minimum to maximum size for the workspace
   */
  sizeScalar: _propTypes.default.number,
  /**
   * @private
   * The string representation of the workspace size
   */
  activeSize: _propTypes.default.string,
  /**
   * @private
   * Array of objects containing key/text pairs for the available size options
   */
  sizeOptions: _propTypes.default.arrayOf(_propTypes.default.shape({
    key: _propTypes.default.string.isRequired,
    text: _propTypes.default.string.isRequired
  })),
  /**
   * @private
   * Function callback i.e. `onRequestSizeChange(size)`
   */
  onRequestSizeChange: _propTypes.default.func
};
var ApplicationNavigationWorkspace = function ApplicationNavigationWorkspace(_ref) {
  var onSizeChange = _ref.onSizeChange,
    onPresentationStateChange = _ref.onPresentationStateChange,
    onActiveItemChange = _ref.onActiveItemChange,
    initialActiveItemKey = _ref.initialActiveItemKey,
    children = _ref.children,
    initialIsOpen = _ref.initialIsOpen,
    initialSize = _ref.initialSize,
    id = _ref.id,
    isOpen = _ref.isOpen,
    onRequestClose = _ref.onRequestClose,
    isPresentedAsOverlay = _ref.isPresentedAsOverlay,
    sizeScalar = _ref.sizeScalar,
    activeSize = _ref.activeSize,
    sizeOptions = _ref.sizeOptions,
    onRequestSizeChange = _ref.onRequestSizeChange;
  var _React$useState = _react.default.useState(initialActiveItemKey),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    activeItemKey = _React$useState2[0],
    setActiveItemKey = _React$useState2[1];
  _react.default.useEffect(function () {
    if (onSizeChange && sizeScalar !== undefined) {
      onSizeChange(sizeScalar);
    }
  }, [sizeScalar, onSizeChange]);
  _react.default.useEffect(function () {
    if (onPresentationStateChange) {
      onPresentationStateChange(isOpen);
    }
  }, [isOpen, onPresentationStateChange]);
  _react.default.useEffect(function () {
    if (onActiveItemChange) {
      onActiveItemChange(activeItemKey);
    }
  }, [activeItemKey, onActiveItemChange]);
  return /*#__PURE__*/_react.default.createElement(_workspace.default, {
    id: id,
    activeItemKey: activeItemKey,
    onRequestActivate: function onRequestActivate(itemKey) {
      setActiveItemKey(itemKey);
    },
    activeSize: activeSize,
    sizeOptions: sizeOptions,
    onRequestSizeChange: onRequestSizeChange,
    onRequestDismiss: onRequestClose,
    dismissButtonIsVisible: isPresentedAsOverlay,
    isPresentedAsOverlay: isPresentedAsOverlay
  }, children);
};
ApplicationNavigationWorkspace.propTypes = propTypes;
ApplicationNavigationWorkspace.Item = _workspace.WorkspaceItem;
var _default = ApplicationNavigationWorkspace;
exports.default = _default;