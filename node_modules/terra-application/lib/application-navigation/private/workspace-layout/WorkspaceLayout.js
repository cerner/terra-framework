"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _keycodeJs = require("keycode-js");
var _IconPanelRight = _interopRequireDefault(require("terra-icon/lib/icon/IconPanelRight"));
var _IconPanelLeft = _interopRequireDefault(require("terra-icon/lib/icon/IconPanelLeft"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _breakpoints = require("../../../breakpoints");
var _ResizeHandle = _interopRequireDefault(require("./ResizeHandle"));
var _applicationIntl = require("../../../application-intl");
var _ApplicationNavigationActionsContext = _interopRequireDefault(require("../../ApplicationNavigationActionsContext"));
var _WorkspaceLayoutModule = _interopRequireDefault(require("./WorkspaceLayout.module.scss"));
var cx = _bind.default.bind(_WorkspaceLayoutModule.default);
var propTypes = {
  /**
   * Child content to be rendered in the main content region of the workspace layout.
   */
  children: _propTypes.default.node,
  /**
   * React ref mapping to back to portaling of the child content.
   */
  contentElementRef: _propTypes.default.object,
  /**
   * Unique id for the layout.
   */
  id: _propTypes.default.string.isRequired,
  /**
   * Element adhering to the Workspace API.
   */
  workspace: _propTypes.default.element,
  /**
   * Returns the composed skipTo action function if workspace is present.
   */
  skipToCallback: _propTypes.default.func
};
var MINIMUM_WORKSPACE_WIDTH = 320;
var MINIMUM_CONTENT_WIDTH = 320;
var initialSizeForBreakpoint = function initialSizeForBreakpoint(breakpoint) {
  if (breakpoint === 'tiny' || breakpoint === 'small') {
    return {
      scale: undefined,
      type: undefined
    };
  }
  if (breakpoint === 'medium') {
    return {
      scale: undefined,
      type: 'split'
    };
  }
  return {
    scale: 0,
    type: undefined
  };
};
var getSizeOptionsForBreakpoint = function getSizeOptionsForBreakpoint(breakpoint) {
  var menuOptions;
  if (breakpoint === 'large' || breakpoint === 'huge' || breakpoint === 'enormous') {
    menuOptions = [{
      key: 'small',
      text: 'Small'
    }, {
      key: 'medium',
      text: 'Medium'
    }, {
      key: 'large',
      text: 'Large'
    }];
  } else if (breakpoint === 'medium') {
    menuOptions = [{
      key: 'split',
      text: 'Split'
    }, {
      key: 'overlay',
      text: 'Overlay'
    }];
  }
  return menuOptions;
};
var getActiveSizeForWorkspaceSize = function getActiveSizeForWorkspaceSize(workspaceSize) {
  if (workspaceSize.scale === 0) {
    return 'small';
  }
  if (workspaceSize.scale === 0.5) {
    return 'medium';
  }
  if (workspaceSize.scale === 1) {
    return 'large';
  }
  if (workspaceSize.type === 'split') {
    return 'split';
  }
  if (workspaceSize.type === 'overlay') {
    return 'overlay';
  }
  return undefined;
};
var validateInitialWorkspaceSizeForBreakpoint = function validateInitialWorkspaceSizeForBreakpoint(breakpoint) {
  if (breakpoint === 'large' || breakpoint === 'huge' || breakpoint === 'enormous') {
    return true;
  }
  return false;
};
var WorkspaceLayout = function WorkspaceLayout(_ref) {
  var children = _ref.children,
    id = _ref.id,
    workspace = _ref.workspace,
    contentElementRef = _ref.contentElementRef,
    skipToCallback = _ref.skipToCallback;
  var activeBreakpoint = _react.default.useContext(_breakpoints.ActiveBreakpointContext);
  var applicationIntl = _react.default.useContext(_applicationIntl.ApplicationIntlContext);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var layoutContainerRef = _react.default.useRef();
  var layoutBodyRef = _react.default.useRef();
  var workspacePanelRef = _react.default.useRef();
  var workspaceHeadingRef = _react.default.useRef();
  var workspaceResizeBoundsRef = _react.default.useRef();
  var resizeOverlayRef = _react.default.useRef();
  var workspaceOverlayRef = _react.default.useRef();
  var lastActiveSizeRef = _react.default.useRef();
  var userSelectedTypeRef = _react.default.useRef();
  var userSelectedScaleRef = _react.default.useRef(0);
  var initialWorkspaceSize;
  if (validateInitialWorkspaceSizeForBreakpoint(activeBreakpoint)) {
    initialWorkspaceSize = workspace && workspace.props.initialSize || initialSizeForBreakpoint(activeBreakpoint);
  } else {
    initialWorkspaceSize = initialSizeForBreakpoint(activeBreakpoint);
  }
  var _React$useState = _react.default.useState(initialWorkspaceSize),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    workspaceSize = _React$useState2[0],
    setWorkspaceSize = _React$useState2[1];
  var hasOverlayWorkspace = activeBreakpoint === 'tiny' || activeBreakpoint === 'small' || workspaceSize.type === 'overlay';
  var isLargeFormFactor = activeBreakpoint === 'large' || activeBreakpoint === 'huge' || activeBreakpoint === 'enormous';
  var _React$useState3 = _react.default.useState(!hasOverlayWorkspace && workspace && workspace.props.initialIsOpen),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    workspaceIsVisible = _React$useState4[0],
    setWorkspaceIsVisible = _React$useState4[1];
  var hasWorkspace = !!workspace;
  var actionsContextValue = _react.default.useMemo(function () {
    var actions = [];
    var actionLabel;
    if (workspaceIsVisible) {
      actionLabel = applicationIntl.formatMessage({
        id: 'terraApplication.workspace.showWorkspaceLabel'
      });
    } else {
      actionLabel = applicationIntl.formatMessage({
        id: 'terraApplication.workspace.hideWorkspaceLabel'
      });
    }
    if (hasWorkspace) {
      actions = [].concat((0, _toConsumableArray2.default)(actions), [{
        key: 'workspace-layout-toggle-workspace-panel',
        label: actionLabel,
        icon: workspaceIsVisible ? /*#__PURE__*/_react.default.createElement(_IconPanelRight.default, null) : /*#__PURE__*/_react.default.createElement(_IconPanelLeft.default, null),
        onSelect: function onSelect() {
          setWorkspaceIsVisible(function (state) {
            return !state;
          });
        }
      }]);
    }
    return {
      actions: actions
    };
  }, [hasWorkspace, workspaceIsVisible, applicationIntl]);
  _react.default.useEffect(function () {
    if (!lastActiveSizeRef.current) {
      lastActiveSizeRef.current = activeBreakpoint;
      return;
    }
    if (lastActiveSizeRef.current === activeBreakpoint) {
      return;
    }
    lastActiveSizeRef.current = activeBreakpoint;
    if (activeBreakpoint === 'tiny' || activeBreakpoint === 'small') {
      setWorkspaceSize({
        scale: undefined,
        type: undefined
      });
    } else if (activeBreakpoint === 'medium') {
      var scale = userSelectedScaleRef.current || workspaceSize.scale;
      if (scale === undefined || scale <= 0.5) {
        setWorkspaceSize({
          scale: undefined,
          type: 'split'
        });
      } else if (scale > 0.5) {
        setWorkspaceSize({
          scale: undefined,
          type: 'overlay'
        });
      }
    } else if (activeBreakpoint === 'large' || activeBreakpoint === 'huge' || activeBreakpoint === 'enormous') {
      setWorkspaceSize({
        scale: userSelectedScaleRef.current || 0,
        type: undefined
      });
    }
  }, [workspaceSize, activeBreakpoint]);
  var lastWorkspaceOpenState = _react.default.useRef(workspaceIsVisible);
  _react.default.useEffect(function () {
    if (workspaceIsVisible && !lastWorkspaceOpenState.current && workspaceHeadingRef.current) {
      setTimeout(function () {
        workspaceHeadingRef.current.focus();
      }, 0);
    } else if (!workspaceIsVisible && lastWorkspaceOpenState.current) {
      setTimeout(function () {
        var mainElement = document.querySelector('main');
        if (mainElement) {
          mainElement.focus();
        }
      }, 0);
    }
    lastWorkspaceOpenState.current = workspaceIsVisible;
  }, [workspaceIsVisible]);
  _react.default.useEffect(function () {
    if (!workspaceIsVisible || !hasOverlayWorkspace) {
      return undefined;
    }
    function handleKeydown(e) {
      if (e.keyCode === _keycodeJs.KEY_ESCAPE) {
        if (e.target === layoutContainerRef.current || layoutContainerRef.current.contains(e.target)) {
          setWorkspaceIsVisible(false);
        }
      }
    }
    document.addEventListener('keydown', handleKeydown);
    return function () {
      document.removeEventListener('keydown', handleKeydown);
    };
  }, [workspaceIsVisible, hasOverlayWorkspace]);
  var handleOnRequestSizeChange = function handleOnRequestSizeChange(size) {
    userSelectedTypeRef.current = undefined;
    if (size === 'small') {
      userSelectedScaleRef.current = 0;
      setWorkspaceSize({
        scale: 0,
        type: undefined
      });
    } else if (size === 'medium') {
      userSelectedScaleRef.current = 0.5;
      setWorkspaceSize({
        scale: 0.5,
        type: undefined
      });
    } else if (size === 'large') {
      userSelectedScaleRef.current = 1.0;
      setWorkspaceSize({
        scale: 1.0,
        type: undefined
      });
    } else if (size === 'split') {
      userSelectedTypeRef.current = 'split';
      setWorkspaceSize({
        scale: undefined,
        type: 'split'
      });
    } else if (size === 'overlay') {
      userSelectedTypeRef.current = 'overlay';
      setWorkspaceSize({
        scale: undefined,
        type: 'overlay'
      });
    }
  };
  var clonePropsOntoWorkspace = function clonePropsOntoWorkspace() {
    return /*#__PURE__*/_react.default.cloneElement(workspace, {
      id: "".concat(id, "-workspace-container"),
      isOpen: workspaceIsVisible,
      onRequestClose: function onRequestClose() {
        setWorkspaceIsVisible(false);
      },
      isPresentedAsOverlay: hasOverlayWorkspace,
      sizeScalar: workspaceSize.scale,
      activeSize: getActiveSizeForWorkspaceSize(workspaceSize),
      sizeOptions: getSizeOptionsForBreakpoint(activeBreakpoint),
      onRequestSizeChange: handleOnRequestSizeChange
    });
  };
  _react.default.useEffect(function () {
    if (!skipToCallback) {
      return;
    }
    var skipToAction = function skipToAction() {
      if (!workspaceIsVisible) {
        setWorkspaceIsVisible(true);
      } else {
        setTimeout(function () {
          workspaceHeadingRef.current.focus();
        }, 0);
      }
    };
    skipToCallback(skipToAction);
  }, [skipToCallback, workspaceIsVisible]);
  var renderResizeHandle = function renderResizeHandle() {
    if (!isLargeFormFactor) {
      return undefined;
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      className: cx('resize-handle-frame')
    }, /*#__PURE__*/_react.default.createElement(_ResizeHandle.default, {
      onResizeStart: function onResizeStart(registerBounds) {
        resizeOverlayRef.current.style.display = 'block';
        workspaceResizeBoundsRef.current = {
          range: layoutBodyRef.current.getBoundingClientRect().width - MINIMUM_CONTENT_WIDTH - MINIMUM_WORKSPACE_WIDTH,
          currentWidth: workspacePanelRef.current.getBoundingClientRect().width
        };
        registerBounds({
          range: layoutBodyRef.current.getBoundingClientRect().width - MINIMUM_CONTENT_WIDTH - MINIMUM_WORKSPACE_WIDTH,
          currentWidth: workspacePanelRef.current.getBoundingClientRect().width
        });
      },
      onResizeStop: function onResizeStop(position) {
        resizeOverlayRef.current.style.display = 'none';
        var newWidth = position * -1 + workspaceResizeBoundsRef.current.currentWidth;
        var scale = (newWidth - MINIMUM_WORKSPACE_WIDTH) / workspaceResizeBoundsRef.current.range;
        userSelectedTypeRef.current = undefined;
        if (scale >= 1) {
          userSelectedScaleRef.current = 1.0;
          setWorkspaceSize({
            scale: 1.0,
            type: undefined
          });
        } else if (scale < 0) {
          userSelectedScaleRef.current = 0;
          setWorkspaceSize({
            scale: 0,
            type: undefined
          });
        } else {
          userSelectedScaleRef.current = scale;
          setWorkspaceSize({
            scale: scale,
            type: undefined
          });
        }
      }
    }));
  };
  var renderWorkspaceOverlay = function renderWorkspaceOverlay() {
    if (!workspaceIsVisible || !hasOverlayWorkspace) {
      return undefined;
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      role: "none",
      ref: workspaceOverlayRef,
      className: cx('workspace-overlay-negative-space'),
      onClick: function onClick() {
        setWorkspaceIsVisible(false);
      } // eslint-disable-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
    });
  };

  var renderContent = function renderContent() {
    return /*#__PURE__*/_react.default.createElement("div", {
      id: "".concat(id, "-content-body"),
      className: cx('content-body'),
      ref: contentElementRef,
      style: workspaceSize.scale !== undefined && workspaceIsVisible ? {
        flexGrow: "".concat(1 - workspaceSize.scale),
        msFlexPositive: "".concat(1 - workspaceSize.scale)
      } : null // eslint-disable-line react/forbid-dom-props
      ,
      inert: hasOverlayWorkspace && workspaceIsVisible ? 'true' : null
    }, /*#__PURE__*/_react.default.createElement(_ApplicationNavigationActionsContext.default.Provider, {
      value: actionsContextValue
    }, children));
  };
  var renderWorkspace = function renderWorkspace() {
    if (!workspace) {
      return undefined;
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderResizeHandle(), /*#__PURE__*/_react.default.createElement("div", {
      id: "".concat(id, "-workspace-body"),
      ref: workspacePanelRef,
      className: cx('workspace-body', {
        visible: workspaceIsVisible,
        overlay: hasOverlayWorkspace
      }),
      style: workspaceSize.scale !== undefined ? {
        flexGrow: "".concat(workspaceSize.scale)
      } : null // eslint-disable-line react/forbid-dom-props
    }, /*#__PURE__*/_react.default.createElement("h1", {
      tabIndex: "-1",
      className: cx('visually-hidden-heading'),
      ref: workspaceHeadingRef
    }, applicationIntl.formatMessage({
      id: 'terraApplication.workspace.workspaceLabel'
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: cx('workspace-inner')
    }, clonePropsOntoWorkspace())), renderWorkspaceOverlay());
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    id: id,
    className: cx('layout-container', theme.className),
    ref: layoutContainerRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: layoutBodyRef,
    className: cx('layout-body')
  }, renderContent(), renderWorkspace()), /*#__PURE__*/_react.default.createElement("div", {
    ref: resizeOverlayRef,
    className: cx('resize-overlay')
  }));
};
WorkspaceLayout.propTypes = propTypes;
var _default = WorkspaceLayout;
exports.default = _default;