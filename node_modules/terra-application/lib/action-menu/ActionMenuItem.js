"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _ActionUtils = require("./_ActionUtils");
var _ActionMenuItemModule = _interopRequireDefault(require("./ActionMenuItem.module.scss"));
var cx = _bind.default.bind(_ActionMenuItemModule.default);
var propTypes = {
  /**
   * The string used as an identifier for keyboard navigation.
   */
  actionKey: _propTypes.default.string.isRequired,
  /**
   * Optional icon to place with the item.
   */
  icon: _propTypes.default.element,
  /**
   * Whether or not the item is disabled.
   */
  isDisabled: _propTypes.default.bool,
  /**
   * The label text to display for the item.
   */
  label: _propTypes.default.string.isRequired,
  /**
   * Callback function for action element selection.
   * Returns the event e.g. onAction(event).
   */
  onAction: _propTypes.default.func,
  /**
   * @private
   * Whether or not indent children based on presence of a selectable item.
   */
  indentChildren: _propTypes.default.bool,
  /**
   * @private
   * Callback function for arrow key interaction.
   * Returns the event e.g. onArrow(key, direction).
   */
  onArrow: _propTypes.default.func,
  /**
   * @private
   * Callback function for arrow char.
   * Returns the event e.g. onChar(key, char).
   */
  onChar: _propTypes.default.func
};
var ActionMenuItem = function ActionMenuItem(_ref) {
  var actionKey = _ref.actionKey,
    icon = _ref.icon,
    isDisabled = _ref.isDisabled,
    label = _ref.label,
    onAction = _ref.onAction,
    onArrow = _ref.onArrow,
    onChar = _ref.onChar,
    indentChildren = _ref.indentChildren;
  var attrs = {};
  if (isDisabled) {
    attrs['aria-disabled'] = true;
  } else {
    attrs.tabIndex = '-1';
    attrs.onClick = onAction;
    attrs.onKeyDown = (0, _ActionUtils.generateOnKeyDown)(actionKey, onAction, onArrow, onChar);
    attrs.onBlur = _ActionUtils.enableFocusStyles;
    attrs.onMouseDown = _ActionUtils.disableFocusStyles;
    attrs['data-focus-styles-enabled'] = true;
  }
  var theme = _react.default.useContext(_terraThemeContext.default);
  return /*#__PURE__*/_react.default.createElement("li", (0, _extends2.default)({}, attrs, {
    className: cx('action-menu-item', {
      'is-disabled': isDisabled
    }, {
      'is-actionable': !isDisabled
    }, {
      indent: indentChildren
    }, theme.className),
    role: "menuitem",
    "data-action-menu-key": actionKey
  }), icon ? /*#__PURE__*/_react.default.createElement("div", {
    className: cx('icon')
  }, icon) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('content')
  }, label));
};
ActionMenuItem.propTypes = propTypes;
var _default = ActionMenuItem;
exports.default = _default;