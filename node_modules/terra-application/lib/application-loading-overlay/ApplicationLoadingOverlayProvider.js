"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraScroll = _interopRequireDefault(require("terra-scroll"));
var _LoadingOverlay = _interopRequireDefault(require("terra-overlay/lib/LoadingOverlay"));
var _OverlayContainer = _interopRequireDefault(require("terra-overlay/lib/OverlayContainer"));
var _ApplicationLoadingOverlayContext = _interopRequireDefault(require("./ApplicationLoadingOverlayContext"));
var _ApplicationLoadingOverlayProviderModule = _interopRequireDefault(require("./ApplicationLoadingOverlayProvider.module.scss"));
var _excluded = ["children", "scrollRefCallback"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var cx = _bind.default.bind(_ApplicationLoadingOverlayProviderModule.default);
var propTypes = {
  /**
   * The components to be rendered within the context of the ApplicationLoadingOverlayProvider.
   * Components rendered here are able to interact with ApplicationLoadingOverlayProvider through
   * the ApplicationLoadingOverlayContext.
   */
  children: _propTypes.default.node,
  /**
   * A function to be called with the current ref of the scrollable element rendered within the
   * ApplicationLoadingOverlayProvider.
   */
  scrollRefCallback: _propTypes.default.func
};
var ApplicationLoadingOverlayProvider = function ApplicationLoadingOverlayProvider(_ref) {
  var children = _ref.children,
    scrollRefCallback = _ref.scrollRefCallback,
    customProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _React$useState = _react.default.useState({}),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    registeredLoadingOverlays = _React$useState2[0],
    setRegisteredLoadingOverlays = _React$useState2[1];
  var contextValue = (0, _react.useMemo)(function () {
    return {
      show: function show(key, data) {
        setRegisteredLoadingOverlays(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, (0, _defineProperty2.default)({}, "".concat(key), data));
        });
      },
      hide: function hide(key) {
        setRegisteredLoadingOverlays(function (state) {
          var newRegisteredLoadingOverlays = _objectSpread({}, state);
          delete newRegisteredLoadingOverlays[key];
          return newRegisteredLoadingOverlays;
        });
      }
    };
  }, []);
  var registeredOverlayKeys = Object.keys(registeredLoadingOverlays);
  var registeredBackgroundStyles = registeredOverlayKeys.map(function (key) {
    return registeredLoadingOverlays[key] && registeredLoadingOverlays[key].backgroundStyle;
  });

  /**
   * If multiple styles of overlay are requested, the strongest requested style is used.
   */
  var overlayBackgroundStyle = 'clear';
  if (registeredBackgroundStyles.includes('dark')) {
    overlayBackgroundStyle = 'dark';
  } else if (registeredBackgroundStyles.includes('light')) {
    overlayBackgroundStyle = 'light';
  }
  var overlay = /*#__PURE__*/_react.default.createElement(_LoadingOverlay.default, {
    isRelativeToContainer: true,
    isAnimated: true,
    isOpen: !!registeredOverlayKeys.length,
    backgroundStyle: overlayBackgroundStyle
  });
  var className = cx('container');
  if (customProps.className) {
    className = [className, customProps.className].join(' ');
  }
  return /*#__PURE__*/_react.default.createElement(_OverlayContainer.default, (0, _extends2.default)({}, customProps, {
    className: className,
    overlay: overlay
  }), /*#__PURE__*/_react.default.createElement(_terraScroll.default, {
    refCallback: scrollRefCallback
  }, /*#__PURE__*/_react.default.createElement(_ApplicationLoadingOverlayContext.default.Provider, {
    value: contextValue
  }, children)));
};
ApplicationLoadingOverlayProvider.propTypes = propTypes;
var _default = ApplicationLoadingOverlayProvider;
exports.default = _default;