"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _v = _interopRequireDefault(require("uuid/v4"));
var _BannerRegistrationContext = _interopRequireDefault(require("./private/BannerRegistrationContext"));
var propTypes = {
  /**
   * The text and corresponding callback to populate the action button of the banner.
   */
  bannerAction: _propTypes.default.shape({
    /**
     * The text to display in the banner button.
     */
    text: _propTypes.default.string,
    /**
     * The Callback function triggered when the action button is clicked. No parameters are passed.
     */
    onClick: _propTypes.default.func
  }),
  /**
   * The message content to display in the banner.
   */
  description: _propTypes.default.node,
  /**
   * Callback function triggered when the dismiss button is clicked. The presence of this prop will cause
   * the dismiss button to be included on the banner. No parameters are passed.
   */
  onRequestClose: _propTypes.default.func,
  /**
   * The variant of notification banner to be rendered. This renders the banner with the corresponding header and icon to the
   * variant concept.
   */
  variant: _propTypes.default.oneOf(['hazard-high', 'hazard-medium', 'hazard-low', 'error', 'unsatisfied', 'unverified', 'custom']).isRequired,
  /**
   * The pieces to populate a banner when `variant="custom"`.
   */
  custom: _propTypes.default.shape({
    /**
     * The keyword used to represent & emphasis the intention of banner description that is being shown to the user.
     */
    signalWord: _propTypes.default.string,
    /**
     * The class name used to set the icon as the background image to be used as the icon in the banner.
     */
    iconClassName: _propTypes.default.string
  })
};
var NotificationBanner = function NotificationBanner(_ref) {
  var bannerAction = _ref.bannerAction,
    custom = _ref.custom,
    description = _ref.description,
    onRequestClose = _ref.onRequestClose,
    variant = _ref.variant;
  /**
   * A unique identifier is generated for each Banner during construction. This will be used to
   * uniquely register/unregister the banner with ancestor Banner Managers without requiring consumers to
   * define unique identifiers themselves.
   */
  var bannerRegistration = _react.default.useContext(_BannerRegistrationContext.default);
  var uuid = _react.default.useRef((0, _v.default)());

  /**
   * Register banner props to the Banner Registration Context.
   */
  _react.default.useEffect(function () {
    /**
     * If the bannerRegistration value is the ProviderRegistrationContext's default value,
     * then there is not a matching BannerProvider above it in the hierarchy.
     * This is possible but likely not intentional, so the component warns.
     */
    if (!bannerRegistration) {
      throw new Error('A NotificationBanner was not rendered within the context of a NotificationBannerProvider. If this is unexpected, validate that the expected version of the terra-application package is installed.');
    }
    bannerRegistration.registerNotificationBanner(uuid.current, {
      bannerAction: bannerAction,
      custom: custom,
      description: description,
      key: uuid.current,
      onRequestClose: onRequestClose,
      variant: variant
    });
  }, [bannerRegistration, description, custom, bannerAction, onRequestClose, variant]);

  /**
   * Unregister banner from the Banner Registration Context.
   */
  _react.default.useEffect(function () {
    return function () {
      bannerRegistration.unregisterNotificationBanner(uuid.current, variant);
    };
  }, [bannerRegistration, variant]);
  return null;
};
NotificationBanner.propTypes = propTypes;
var _default = NotificationBanner;
exports.default = _default;