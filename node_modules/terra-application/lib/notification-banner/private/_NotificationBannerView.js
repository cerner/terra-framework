"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTitleStringIdForType = exports.default = exports.NotificationTypes = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _reactIntl = require("react-intl");
var _terraButton = _interopRequireDefault(require("terra-button"));
var _IconAlert = _interopRequireDefault(require("terra-icon/lib/icon/IconAlert"));
var _IconError = _interopRequireDefault(require("terra-icon/lib/icon/IconError"));
var _IconWarning = _interopRequireDefault(require("terra-icon/lib/icon/IconWarning"));
var _IconGapChecking = _interopRequireDefault(require("terra-icon/lib/icon/IconGapChecking"));
var _IconDiamondSymbol = _interopRequireDefault(require("terra-icon/lib/icon/IconDiamondSymbol"));
var _IconInformation = _interopRequireDefault(require("terra-icon/lib/icon/IconInformation"));
var _IconSuccess = _interopRequireDefault(require("terra-icon/lib/icon/IconSuccess"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _useElementSize2 = _interopRequireWildcard(require("./useElementSize"));
var _NotificationBannerViewModule = _interopRequireDefault(require("./NotificationBannerView.module.scss"));
var _excluded = ["action", "children", "customIcon", "customColorClass", "onDismiss", "title", "type", "intl"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var cx = _bind.default.bind(_NotificationBannerViewModule.default);
var NotificationTypes = {
  ALERT: 'alert',
  ERROR: 'error',
  WARNING: 'warning',
  UNSATISFIED: 'unsatisfied',
  UNVERIFIED: 'unverified',
  ADVISORY: 'advisory',
  INFO: 'info',
  SUCCESS: 'success',
  CUSTOM: 'custom'
};
exports.NotificationTypes = NotificationTypes;
var propTypes = {
  /**
   * An action element to be added to the action section of the alert to give the user an easy way
   * to accomplish a task to resolve the notification.
   */
  action: _propTypes.default.element,
  /**
   * Child Nodes providing the message content for the alert. Can contain text and HTML.
   */
  children: _propTypes.default.node,
  /**
   * The icon to be used for an alert of type custom. This will not be used for any other alert types.
   */
  customIcon: _propTypes.default.element,
  /**
   * Sets an author-defined class, to control the status bar color to be used for an alert of type custom.
   *
   * ![IMPORTANT](https://badgen.net/badge//IMPORTANT/CSS?icon=github)
   * Adding `var(--my-app...` CSS variables is required for proper re-themeability when creating custom color styles _(see included examples)_.
   */
  customColorClass: _propTypes.default.string,
  /**
   * Callback function triggered when Dismiss button is clicked. The presence of this prop will cause the Dismiss button to be included on the alert.
   */
  onDismiss: _propTypes.default.func,
  /**
   * The title for the alert which will be bolded.
   */
  title: _propTypes.default.string,
  /**
   * The type of alert to be rendered. One of `alert`, `error`, `warning`, `unsatisfied`, `unverified`, `advisory`,
   * `info`, `success`, or `custom`.
   */
  type: _propTypes.default.oneOf([NotificationTypes.ALERT, NotificationTypes.ERROR, NotificationTypes.WARNING, NotificationTypes.UNSATISFIED, NotificationTypes.UNVERIFIED, NotificationTypes.ADVISORY, NotificationTypes.INFO, NotificationTypes.SUCCESS, NotificationTypes.CUSTOM]),
  /**
   * @private
   */
  intl: _propTypes.default.shape({
    formatMessage: _propTypes.default.func
  })
};
var defaultProps = {
  customColorClass: 'custom-default-color',
  type: NotificationTypes.ALERT
};
var getNotificationIcon = function getNotificationIcon(type, customIcon) {
  switch (type) {
    case NotificationTypes.ERROR:
      return /*#__PURE__*/_react.default.createElement("span", {
        "data-testid": "banner-icon-error",
        className: cx('icon')
      }, /*#__PURE__*/_react.default.createElement(_IconError.default, null));
    case NotificationTypes.WARNING:
      return /*#__PURE__*/_react.default.createElement("span", {
        "data-testid": "banner-icon-warning",
        className: cx('icon')
      }, /*#__PURE__*/_react.default.createElement(_IconWarning.default, null));
    case NotificationTypes.UNSATISFIED:
      return /*#__PURE__*/_react.default.createElement("span", {
        "data-testid": "banner-icon-unsatisfied",
        className: cx('icon', 'unsatisfied-icon')
      }, /*#__PURE__*/_react.default.createElement(_IconGapChecking.default, null));
    case NotificationTypes.UNVERIFIED:
      return /*#__PURE__*/_react.default.createElement("span", {
        "data-testid": "banner-icon-unverified",
        className: cx('icon', 'unverified-icon')
      }, /*#__PURE__*/_react.default.createElement(_IconDiamondSymbol.default, null));
    case NotificationTypes.ADVISORY:
      return null;
    case NotificationTypes.INFO:
      return /*#__PURE__*/_react.default.createElement("span", {
        "data-testid": "banner-icon-info",
        className: cx('icon')
      }, /*#__PURE__*/_react.default.createElement(_IconInformation.default, null));
    case NotificationTypes.SUCCESS:
      return /*#__PURE__*/_react.default.createElement("span", {
        "data-testid": "banner-icon-success",
        className: cx('icon')
      }, /*#__PURE__*/_react.default.createElement(_IconSuccess.default, null));
    case NotificationTypes.CUSTOM:
      return /*#__PURE__*/_react.default.createElement("span", {
        "data-testid": "banner-icon-custom",
        className: cx('icon')
      }, customIcon);
    case NotificationTypes.ALERT:
    default:
      return /*#__PURE__*/_react.default.createElement("span", {
        "data-testid": "banner-icon-alert",
        className: cx('icon')
      }, /*#__PURE__*/_react.default.createElement(_IconAlert.default, null));
  }
};
var getTitleStringIdForType = function getTitleStringIdForType(type) {
  return type === NotificationTypes.CUSTOM ? undefined : "terraApplication.notificationBanner.".concat(type);
};
exports.getTitleStringIdForType = getTitleStringIdForType;
var NotificationBannerView = function NotificationBannerView(_ref) {
  var action = _ref.action,
    children = _ref.children,
    customIcon = _ref.customIcon,
    customColorClass = _ref.customColorClass,
    onDismiss = _ref.onDismiss,
    title = _ref.title,
    type = _ref.type,
    intl = _ref.intl,
    customProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var containerRef = _react.default.useRef();
  var _useElementSize = (0, _useElementSize2.default)(containerRef, _useElementSize2.breakpointFilter),
    activeBreakpoint = _useElementSize.activeBreakpoint;
  var isNarrow = activeBreakpoint === 'tiny';
  var defaultTitle = type === NotificationTypes.CUSTOM ? '' : intl.formatMessage({
    id: getTitleStringIdForType(type)
  });
  var alertClassNames = (0, _classnames.default)(cx('notification-banner', type, {
    narrow: isNarrow
  }, {
    wide: !isNarrow
  }, theme.className), customProps.className, (0, _defineProperty2.default)({}, "".concat(customColorClass), customColorClass && type === NotificationTypes.CUSTOM));
  var bodyClassNameForParent = cx('body', {
    'body-std': !isNarrow || isNarrow && !onDismiss && !action
  }, {
    'body-narrow': isNarrow && (onDismiss || action)
  });
  var dismissButton;
  if (onDismiss) {
    dismissButton = /*#__PURE__*/_react.default.createElement(_terraButton.default, {
      text: intl.formatMessage({
        id: 'terraApplication.notificationBanner.dismiss'
      }),
      onClick: onDismiss
    });
  }
  var actionsSection;
  if (onDismiss || action) {
    var actionsClassName = cx('actions', {
      'actions-custom': type === NotificationTypes.CUSTOM
    });
    actionsSection = /*#__PURE__*/_react.default.createElement("div", {
      className: actionsClassName
    }, action, dismissButton);
  }
  var alertSectionClassName = cx('section', {
    'section-custom': type === NotificationTypes.CUSTOM
  });
  var alertMessageContent = /*#__PURE__*/_react.default.createElement("div", {
    className: alertSectionClassName
  }, (title || defaultTitle) && /*#__PURE__*/_react.default.createElement("strong", {
    className: cx('title')
  }, title || defaultTitle), children);
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, customProps, {
    className: alertClassNames,
    ref: containerRef
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: bodyClassNameForParent
  }, getNotificationIcon(type, customIcon), alertMessageContent), actionsSection);
};
NotificationBannerView.propTypes = propTypes;
NotificationBannerView.defaultProps = defaultProps;
var _default = (0, _reactIntl.injectIntl)(NotificationBannerView);
exports.default = _default;