"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _terraModalManager = _interopRequireDefault(require("terra-modal-manager"));
var _navigationPrompt = require("../navigation-prompt");
var _DisclosureContainer = _interopRequireDefault(require("../disclosure-manager/_DisclosureContainer"));
var _excluded = ["navigationPromptResolutionOptions"];
var propTypes = {
  /**
   * The components to be rendered in the body of the ModalManager. These components will receive the
   * disclosure capabilities through the DisclosureManger's context API.
   */
  children: _propTypes.default.node,
  /**
   * The component to render within the Modal above the disclosed content.
   */
  disclosureAccessory: _propTypes.default.element,
  /**
   * The Object (or function that returns an Object) that specifies the messages
   * used to prompt the user when disclosure dismissal occurs when pending state
   * is present. If not provided, the default messaging will be used.
   */
  navigationPromptResolutionOptions: _navigationPrompt.navigationPromptResolutionOptionsShape
};
var ModalManager = function ModalManager(_ref) {
  var navigationPromptResolutionOptions = _ref.navigationPromptResolutionOptions,
    terraModalManagerProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement(_terraModalManager.default, (0, _extends2.default)({}, terraModalManagerProps, {
    withDisclosureContainer: function withDisclosureContainer(disclosureContent) {
      return /*#__PURE__*/_react.default.createElement(_DisclosureContainer.default, {
        navigationPromptResolutionOptions: navigationPromptResolutionOptions
      }, disclosureContent);
    }
  }));
};
ModalManager.propTypes = propTypes;
var _default = ModalManager;
exports.default = _default;