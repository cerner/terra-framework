"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _WorkspaceContext = _interopRequireDefault(require("./WorkspaceContext"));
var _TabContext = _interopRequireDefault(require("./subcomponents/_TabContext"));
var propTypes = {
  /**
   * Key to match with the activeItemKey to handle the display of selection.
   */
  itemKey: _propTypes.default.string.isRequired,
  /**
   * Text to be displayed on the tab or as it's aria-label.
   */
  label: _propTypes.default.string.isRequired,
  /**
   * Object to be returned in the onRequestActive.
   */
  metaData: _propTypes.default.object,
  /**
   * Function executed during rendering to generate child content.
   */
  render: _propTypes.default.func,
  /**
   * @private
   * The id of the tab.
   */
  id: _propTypes.default.string,
  /**
   * @private
   * The id of the panel associated to the tab.
   */
  associatedPanelId: _propTypes.default.string,
  /**
   * @private
   * The indicator whether or not the tab content is active.
   */
  isActive: _propTypes.default.bool,
  /**
   * @private
   * The html element to be hold the portaled item content.
   */
  portalElement: _propTypes.default.instanceOf(HTMLElement)
};

/**
 * The WorkspaceItem component represents a tab within the Workspace, defining
 * its labels and content. The WorkspaceItem component must only be used as an
 * immediate child of the Workspace component.
 */
var WorkspaceItem = function WorkspaceItem(_ref) {
  var id = _ref.id,
    associatedPanelId = _ref.associatedPanelId,
    isActive = _ref.isActive,
    label = _ref.label,
    render = _ref.render,
    portalElement = _ref.portalElement,
    itemKey = _ref.itemKey,
    metaData = _ref.metaData;
  var tabContextValue = _react.default.useMemo(function () {
    return {
      tabId: id,
      panelId: associatedPanelId,
      label: label
    };
  }, [associatedPanelId, id, label]);
  var workspaceContextValue = _react.default.useMemo(function () {
    return {
      isActive: isActive
    };
  }, [isActive]);
  return /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_react.default.createElement(_TabContext.default.Provider, {
    value: tabContextValue
  }, /*#__PURE__*/_react.default.createElement(_WorkspaceContext.default.Provider, {
    value: workspaceContextValue
  }, render())), portalElement);
};
WorkspaceItem.propTypes = propTypes;
var _default = WorkspaceItem;
exports.default = _default;