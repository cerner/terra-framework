"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _useNotificationBanners = _interopRequireDefault(require("../notification-banner/private/useNotificationBanners"));
var _WorkspaceContentActivityOverlay = _interopRequireDefault(require("./overlays/WorkspaceContentActivityOverlay"));
var _WorkspaceContentStatusOverlay = _interopRequireDefault(require("./overlays/WorkspaceContentStatusOverlay"));
var _DynamicOverlayContainer = _interopRequireDefault(require("./shared/DynamicOverlayContainer"));
var _TabContext = _interopRequireDefault(require("./subcomponents/_TabContext"));
var _TabHeader = _interopRequireDefault(require("./subcomponents/_TabHeader"));
var _WorkspaceContentModule = _interopRequireDefault(require("./WorkspaceContent.module.scss"));
var cx = _bind.default.bind(_WorkspaceContentModule.default);
var propTypes = {
  /**
   * Child node content to be displayed within the content region.
   */
  children: _propTypes.default.node,
  /**
   * Text to be displayed as the title of the workspace content.
   * Special Note: this prop is optional and should be used with caution. If this prop is not provided, the workspace content title is injected by default using the label specified in `WorkspaceItem` _(recommended without additional guidance)_. Providing this prop will override the default text and will need to follow proper accessibility guidelines.
   */
  label: _propTypes.default.string,
  /**
   * Optional toolbar to be displayed outside of the content region.
   */
  toolbar: _propTypes.default.element,
  /**
   * A WorkspaceContent.StatusOverlay component instance to be rendered on top of the provided children.
   */
  statusOverlay: _propTypes.default.element,
  /**
   * A WorkspaceContent.ActivityOverlay component instance to be rendered on top of the provided children.
   */
  activityOverlay: _propTypes.default.element
};
var WorkspaceContent = function WorkspaceContent(_ref) {
  var children = _ref.children,
    label = _ref.label,
    toolbar = _ref.toolbar,
    statusOverlay = _ref.statusOverlay,
    activityOverlay = _ref.activityOverlay;
  var theme = _react.default.useContext(_terraThemeContext.default);
  var _React$useContext = _react.default.useContext(_TabContext.default),
    panelId = _React$useContext.panelId,
    tabId = _React$useContext.tabId,
    tabLabel = _React$useContext.label;
  var _useNotificationBanne = (0, _useNotificationBanners.default)(),
    NotificationBannerProvider = _useNotificationBanne.NotificationBannerProvider,
    NotificationBanners = _useNotificationBanne.NotificationBanners;
  var overlays = _react.default.useMemo(function () {
    var overlaysToRender = [];
    if (statusOverlay) {
      overlaysToRender.push({
        key: 'status-overlay',
        component: statusOverlay
      });
    }
    if (activityOverlay) {
      overlaysToRender.push({
        key: 'activity-overlay',
        component: activityOverlay
      });
    }
    return overlaysToRender;
  }, [statusOverlay, activityOverlay]);
  var labelDisplay = label || tabLabel;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: cx('panel', theme.className),
    role: "none"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('panel-header'),
    role: "none",
    "data-testid": "workspace-content-heading"
  }, /*#__PURE__*/_react.default.createElement(_TabHeader.default, {
    title: labelDisplay
  }), toolbar ? /*#__PURE__*/_react.default.createElement("div", {
    className: cx('toolbar', 'rounded')
  }, toolbar) : undefined, /*#__PURE__*/_react.default.createElement(NotificationBanners, {
    id: "".concat(panelId, "-notifications"),
    label: "Workspace ".concat(labelDisplay),
    activeClassName: cx('notification-banners-container'),
    bannerClassName: cx('notification-banner', 'rounded')
  })), /*#__PURE__*/_react.default.createElement("div", {
    role: "none",
    className: cx('panel-content')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('panel-overflow', {
      'disable-overflow': overlays.length
    }),
    role: "tabpanel",
    tabIndex: "0",
    id: panelId,
    "aria-labelledby": tabId,
    "data-application-overflow-container": true
  }, /*#__PURE__*/_react.default.createElement(_DynamicOverlayContainer.default, {
    overlays: overlays
  }, /*#__PURE__*/_react.default.createElement(NotificationBannerProvider, null, children)))));
};
WorkspaceContent.propTypes = propTypes;
WorkspaceContent.StatusOverlay = _WorkspaceContentStatusOverlay.default;
WorkspaceContent.ActivityOverlay = _WorkspaceContentActivityOverlay.default;
var _default = WorkspaceContent;
exports.default = _default;