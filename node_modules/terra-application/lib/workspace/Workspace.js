"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _IconSettings = _interopRequireDefault(require("terra-icon/lib/icon/IconSettings"));
var _IconPanelRight = _interopRequireDefault(require("terra-icon/lib/icon/IconPanelRight"));
var _terraPopup = _interopRequireDefault(require("terra-popup"));
var _actionMenu = _interopRequireWildcard(require("../action-menu"));
var _applicationIntl = require("../application-intl");
var _usePortalManager3 = _interopRequireWildcard(require("./shared/usePortalManager"));
var _WorkspaceButton = _interopRequireDefault(require("./subcomponents/_WorkspaceButton"));
var _Tabs = _interopRequireDefault(require("./subcomponents/_Tabs"));
var _WorkspaceModule = _interopRequireDefault(require("./Workspace.module.scss"));
var _excluded = ["id", "activeItemKey", "activeSize", "children", "dismissButtonIsVisible", "isPresentedAsOverlay", "onRequestActivate", "onRequestSizeChange", "onRequestDismiss", "sizeOptions"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var cx = _bind.default.bind(_WorkspaceModule.default);
var sizeOptionShape = _propTypes.default.shape({
  /**
   * The key associated to the given size.
   */
  key: _propTypes.default.string.isRequired,
  /**
   * The text display associated to the given size.
   */
  text: _propTypes.default.string.isRequired,
  /**
   * Whether or not the size option should be disabled.
   */
  isDisabled: _propTypes.default.bool
});
var propTypes = {
  /**
   * The itemKey associated to the active WorkspaceItem.
   */
  activeItemKey: _propTypes.default.string.isRequired,
  /**
   * The size string value matching the active size option.
   */
  activeSize: _propTypes.default.string,
  /**
   * The child WorkspaceItems.
   */
  children: _propTypes.default.node.isRequired,
  /**
   * The unique identifier used for accessibility mappings.
   */
  id: _propTypes.default.string.isRequired,
  /**
   * Whether or not the face up dismiss button should be displayed.
   * Also requires the onRequestDismiss prop.
   */
  dismissButtonIsVisible: _propTypes.default.bool,
  /**
   * Whether or not the Workspace is being presented as an overlay and thus
   * should render with its overlay-specific styling.
   */
  isPresentedAsOverlay: _propTypes.default.bool,
  /**
   * The function callback triggering when a item is selected.
   * Returns the associated itemKey and metaData. e.g. onRequestActivate(itemKey, metaData)
   */
  onRequestActivate: _propTypes.default.func.isRequired,
  /**
   * The function callback triggering when the close toggle button is selected..
   * The presence of this callback indicates the visibility of the close toggle button.
   * Returns the event e.g. onRequestDismiss(event)
   */
  onRequestDismiss: _propTypes.default.func,
  /**
   * The function callback triggering when a size is selected from the size menu.
   * Returns the size key e.g. onRequestSizeChange(option.key)
   */
  onRequestSizeChange: _propTypes.default.func,
  /**
   * The array containing size objects to map in the size menu.
   */
  sizeOptions: _propTypes.default.arrayOf(sizeOptionShape)
};
var getTabId = function getTabId(id, itemKey) {
  return "".concat(id, "-").concat(itemKey);
};
var getAssociatedPanelId = function getAssociatedPanelId(id, itemKey) {
  return "".concat(getTabId(id, itemKey), "-panel");
};
var createOptions = function createOptions(options, size, onRequestSizeChange, onDismissMenu) {
  return options.map(function (option) {
    return /*#__PURE__*/_react.default.createElement(_actionMenu.ActionMenuRadio, {
      key: option.key,
      actionKey: option.key,
      label: option.text,
      icon: option.icon,
      isChecked: option.key === size,
      isDisabled: option.isDisabled,
      onAction: function onAction() {
        onDismissMenu();
        onRequestSizeChange(option.key);
      }
    });
  });
};
var Workspace = function Workspace(_ref) {
  var id = _ref.id,
    activeItemKey = _ref.activeItemKey,
    activeSize = _ref.activeSize,
    children = _ref.children,
    dismissButtonIsVisible = _ref.dismissButtonIsVisible,
    isPresentedAsOverlay = _ref.isPresentedAsOverlay,
    onRequestActivate = _ref.onRequestActivate,
    onRequestSizeChange = _ref.onRequestSizeChange,
    onRequestDismiss = _ref.onRequestDismiss,
    sizeOptions = _ref.sizeOptions,
    customProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isMenuOpen = _useState2[0],
    setIsMenuOpen = _useState2[1];
  var theme = _react.default.useContext(_terraThemeContext.default);
  var intl = _react.default.useContext(_applicationIntl.ApplicationIntlContext);
  var sizeMenuRef = (0, _react.useRef)();
  var _usePortalManager = (0, _usePortalManager3.default)(activeItemKey),
    _usePortalManager2 = (0, _slicedToArray2.default)(_usePortalManager, 2),
    workspaceContainerRef = _usePortalManager2[0],
    workspacePortalsRef = _usePortalManager2[1];
  var ariaLabel = intl.formatMessage({
    id: 'terraApplication.workspace.workspaceLabel'
  });
  var tabData = _react.default.Children.map(children, function (child) {
    return {
      id: getTabId(id, child.props.itemKey),
      itemKey: child.props.itemKey,
      associatedPanelId: getAssociatedPanelId(id, child.props.itemKey),
      label: child.props.label,
      isSelected: child.props.itemKey === activeItemKey,
      onSelect: onRequestActivate,
      metaData: child.props.metaData
    };
  });
  var dismissButton;
  if (dismissButtonIsVisible && onRequestDismiss) {
    dismissButton = /*#__PURE__*/_react.default.createElement(_WorkspaceButton.default, {
      ariaLabel: intl.formatMessage({
        id: 'terraApplication.workspace.hideWorkspaceLabel'
      }),
      icon: /*#__PURE__*/_react.default.createElement(_IconPanelRight.default, null),
      onActivate: onRequestDismiss
    });
  }
  var sizeButton;
  if (sizeOptions || onRequestDismiss) {
    var dismissItem;
    var sizeItems;
    var dividerItem;
    if (sizeOptions && sizeOptions.length) {
      sizeItems = createOptions(sizeOptions, activeSize, onRequestSizeChange, function () {
        setIsMenuOpen(false);
      });
    }
    if (onRequestDismiss) {
      dismissItem = /*#__PURE__*/_react.default.createElement(_actionMenu.ActionMenuItem, {
        actionKey: "workspace-dismiss-action",
        label: intl.formatMessage({
          id: 'terraApplication.workspace.hideWorkspaceLabel'
        }),
        onAction: function onAction() {
          setIsMenuOpen(false);
          onRequestDismiss();
        }
      });
    }
    if (sizeOptions && dismissItem) {
      sizeItems = /*#__PURE__*/_react.default.createElement(_actionMenu.ActionMenuGroup, null, sizeItems);
      dividerItem = /*#__PURE__*/_react.default.createElement(_actionMenu.ActionMenuDivider, null);
    }
    sizeButton = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_WorkspaceButton.default, {
      ariaLabel: intl.formatMessage({
        id: 'terraApplication.workspace.workspaceSettingsLabel'
      }),
      icon: /*#__PURE__*/_react.default.createElement(_IconSettings.default, null),
      onActivate: function onActivate() {
        return setIsMenuOpen(true);
      },
      refCallback: function refCallback(node) {
        sizeMenuRef.current = node;
      },
      testId: "workspace-".concat(id, "-settings-button")
    }), /*#__PURE__*/_react.default.createElement(_terraPopup.default, {
      isOpen: isMenuOpen,
      targetRef: function targetRef() {
        return sizeMenuRef.current;
      },
      onRequestClose: function onRequestClose() {
        setIsMenuOpen(false);
      },
      contentHeight: "auto",
      contentWidth: "auto",
      contentAttachment: "top right",
      isContentFocusDisabled: true,
      isHeaderDisabled: true,
      popupContentRole: "none"
    }, /*#__PURE__*/_react.default.createElement(_actionMenu.default, {
      isHeaderDisplayed: true,
      label: intl.formatMessage({
        id: 'terraApplication.workspace.workspaceSettingsLabel'
      }),
      onRequestClose: function onRequestClose() {
        setIsMenuOpen(false);
      }
    }, sizeItems, dividerItem, dismissItem)));
  }
  var containerClassNames = (0, _classnames.default)(cx('workspace-container', {
    'is-overlay': isPresentedAsOverlay
  }, theme.className), customProps.className);
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, customProps, {
    id: id,
    className: containerClassNames,
    role: "none"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: cx('workspace'),
    role: "none"
  }, /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    className: cx('body-shadow-container')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('body-shadow')
  })), /*#__PURE__*/_react.default.createElement("div", {
    role: "none",
    className: cx('button-header')
  }, dismissButton, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('fill-element')
  }), sizeButton), /*#__PURE__*/_react.default.createElement("div", {
    role: "none",
    className: cx('tab-header', {
      'has-dismiss-button': onRequestDismiss && dismissButtonIsVisible
    })
  }, /*#__PURE__*/_react.default.createElement(_Tabs.default, {
    ariaLabel: ariaLabel,
    tabData: tabData
  })), /*#__PURE__*/_react.default.createElement("div", {
    role: "none",
    className: cx('body'),
    ref: workspaceContainerRef
  }, _react.default.Children.map(children, function (child) {
    var _workspacePortalsRef$;
    var portalElement = (_workspacePortalsRef$ = workspacePortalsRef.current[child.props.itemKey]) === null || _workspacePortalsRef$ === void 0 ? void 0 : _workspacePortalsRef$.element;
    if (!portalElement) {
      portalElement = (0, _usePortalManager3.getPortalElement)();
      portalElement.setAttribute('role', 'none');
      workspacePortalsRef.current[child.props.itemKey] = {
        element: portalElement
      };
    }
    return /*#__PURE__*/_react.default.cloneElement(child, {
      key: child.props.itemKey,
      id: getTabId(id, child.props.itemKey),
      associatedPanelId: getAssociatedPanelId(id, child.props.itemKey),
      isActive: child.props.itemKey === activeItemKey,
      portalElement: portalElement
    });
  }))));
};
Workspace.propTypes = propTypes;
var _default = Workspace;
exports.default = _default;