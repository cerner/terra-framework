"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.previousFocus = exports.nextFocus = exports.lastFocus = exports.handleMoreButtonArrows = exports.handleArrows = exports.generateKeyDownSelection = exports.firstFocus = exports.enableFocusStyles = exports.disableFocusStyles = void 0;
var _keycodeJs = require("keycode-js");
/**
 * Returns a function that will execute the provided function upon detection of a KEY_RETURN or KEY_SPACE keydown event.
 * @param {Function} onSelect The function to be executed after event detection.
 */
var generateKeyDownSelection = function generateKeyDownSelection(onSelect) {
  return onSelect ? function (event) {
    if (event.nativeEvent.keyCode === _keycodeJs.KEY_RETURN || event.nativeEvent.keyCode === _keycodeJs.KEY_SPACE) {
      event.preventDefault();
      onSelect();
    }
  } : undefined;
};

/**
 * Enables focus styles for the target of the given event. Typically used as an onBlur callback on selectable elements.
 */
exports.generateKeyDownSelection = generateKeyDownSelection;
var enableFocusStyles = function enableFocusStyles(event) {
  event.currentTarget.setAttribute('data-focus-styles-enabled', 'true');
};

/**
 * Disables focus styles for the target of the given event. Typically used as an onMouseDown callback on selectable elements.
 */
exports.enableFocusStyles = enableFocusStyles;
var disableFocusStyles = function disableFocusStyles(event) {
  event.currentTarget.setAttribute('data-focus-styles-enabled', 'false');
};

/**
 * Sets focus to the 'next' tab element.
 * @param {object} event The triggering event.
 * @param {number} index The index of the current element.
 * @param {array} ids The array of id strings.
 */
exports.disableFocusStyles = disableFocusStyles;
var nextFocus = function nextFocus(event, index, ids) {
  event.preventDefault();
  event.stopPropagation();
  if (index < 0) {
    var _element = document.getElementById(ids[0]);
    if (_element) {
      _element.focus();
    }
    return;
  }
  var newIndex = index + 1 >= ids.length ? 0 : index + 1;
  var element = document.getElementById(ids[newIndex]);
  if (element) {
    element.focus();
  }
};

/**
 * Sets focus to the 'previous' tab element.
 * @param {object} event The triggering event.
 * @param {number} index The index of the current element.
 * @param {array} ids The array of id strings.
 */
exports.nextFocus = nextFocus;
var previousFocus = function previousFocus(event, index, ids) {
  event.preventDefault();
  event.stopPropagation();
  if (index < 0) {
    var _element2 = document.getElementById(ids[ids.length - 1]);
    if (_element2) {
      _element2.focus();
    }
    return;
  }
  var newIndex = index - 1 < 0 ? ids.length - 1 : index - 1;
  var element = document.getElementById(ids[newIndex]);
  if (element) {
    element.focus();
  }
};

/**
 * Sets focus to the 'first' tab element.
 * @param {object} event The triggering event.
 * @param {number} index The index of the current element.
 * @param {array} ids The array of id strings.
 */
exports.previousFocus = previousFocus;
var firstFocus = function firstFocus(event, index, ids) {
  event.preventDefault();
  event.stopPropagation();
  if (index !== 0) {
    var element = document.getElementById(ids[0]);
    if (element) {
      element.focus();
    }
  }
};

/**
 * Sets focus to the 'end' tab element.
 * @param {object} event The triggering event.
 * @param {number} index The index of the current element.
 * @param {array} ids The array of id strings.
 */
exports.firstFocus = firstFocus;
var lastFocus = function lastFocus(event, index, ids) {
  event.preventDefault();
  event.stopPropagation();
  if (index !== ids.length - 1) {
    var element = document.getElementById(ids[ids.length - 1]);
    if (element) {
      element.focus();
    }
  }
};

/**
 * The default event handler for navigational arrow keys.
 * @param {object} event The triggering event.
 * @param {number} index The index of the current element.
 * @param {array} ids The array of id strings.
 */
exports.lastFocus = lastFocus;
var handleArrows = function handleArrows(event, index, ids) {
  var isRTL = document.getElementsByTagName('html')[0].getAttribute('dir') === 'rtl';
  var nextKey = !isRTL ? _keycodeJs.KEY_RIGHT : _keycodeJs.KEY_LEFT;
  var previousKey = !isRTL ? _keycodeJs.KEY_LEFT : _keycodeJs.KEY_RIGHT;
  if (event.nativeEvent.keyCode === nextKey || event.nativeEvent.keyCode === _keycodeJs.KEY_DOWN) {
    nextFocus(event, index, ids);
  } else if (event.nativeEvent.keyCode === previousKey || event.nativeEvent.keyCode === _keycodeJs.KEY_UP) {
    previousFocus(event, index, ids);
  } else if (event.nativeEvent.keyCode === _keycodeJs.KEY_HOME) {
    firstFocus(event, index, ids);
  } else if (event.nativeEvent.keyCode === _keycodeJs.KEY_END) {
    lastFocus(event, index, ids);
  }
};

/**
 * The more button's event handler for navigational arrow keys.
 * @param {object} event The triggering event.
 * @param {number} hiddenIndex The index of the first hidden index.
 * @param {array} ids The array of id strings.
 */
exports.handleArrows = handleArrows;
var handleMoreButtonArrows = function handleMoreButtonArrows(event, hiddenIndex, ids) {
  var isRTL = document.getElementsByTagName('html')[0].getAttribute('dir') === 'rtl';
  var nextKey = !isRTL ? _keycodeJs.KEY_RIGHT : _keycodeJs.KEY_LEFT;
  var previousKey = !isRTL ? _keycodeJs.KEY_LEFT : _keycodeJs.KEY_RIGHT;
  if (event.nativeEvent.keyCode === nextKey || event.nativeEvent.keyCode === _keycodeJs.KEY_DOWN) {
    event.preventDefault();
    event.stopPropagation();
    var element = document.getElementById(ids[hiddenIndex]);
    if (element) {
      element.focus();
    }
  } else if (event.nativeEvent.keyCode === _keycodeJs.KEY_HOME) {
    firstFocus(event, -1, ids);
  } else if (event.nativeEvent.keyCode === previousKey || event.nativeEvent.keyCode === _keycodeJs.KEY_UP || event.nativeEvent.keyCode === _keycodeJs.KEY_END) {
    lastFocus(event, -1, ids);
  }
};
exports.handleMoreButtonArrows = handleMoreButtonArrows;