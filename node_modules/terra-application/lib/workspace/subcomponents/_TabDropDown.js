"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _reactOnclickoutside = _interopRequireDefault(require("react-onclickoutside"));
var _keycodeJs = require("keycode-js");
var _TabDropDownModule = _interopRequireDefault(require("./TabDropDown.module.scss"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var cx = _bind.default.bind(_TabDropDownModule.default);
var propTypes = {
  /**
   * Currently active HiddenTabs be displayed.
   */
  children: _propTypes.default.node,
  /**
   * The id of the tab to be used in mapping.
   */
  isOpen: _propTypes.default.bool,
  /**
   * The function returning the html node.
   */
  refCallback: _propTypes.default.func.isRequired,
  /**
   * @private
   * The function callback when a click outside event occurs.
   */
  onRequestClose: _propTypes.default.func,
  /**
   * @private
   * The function callback for disable.
   */
  disableOnClickOutside: _propTypes.default.func,
  /**
   * @private
   * The function callback for enable.
   */
  enableOnClickOutside: _propTypes.default.func
};
var TabDropDown = function TabDropDown(_ref) {
  var isOpen = _ref.isOpen,
    children = _ref.children,
    onRequestClose = _ref.onRequestClose,
    refCallback = _ref.refCallback,
    disableOnClickOutside = _ref.disableOnClickOutside,
    enableOnClickOutside = _ref.enableOnClickOutside;
  var dropDownRef = (0, _react.useRef)();
  var handleKeyDown = (0, _react.useCallback)(function (event) {
    if (event.keyCode === _keycodeJs.KEY_ESCAPE && onRequestClose) {
      onRequestClose(event);
    }
  }, [onRequestClose]);
  (0, _react.useEffect)(function () {
    if (isOpen) {
      enableOnClickOutside();
      document.addEventListener('keydown', handleKeyDown);
    } else {
      disableOnClickOutside();
      document.removeEventListener('keydown', handleKeyDown);
      dropDownRef.current.scrollTop = 0;
    }
    return function () {
      disableOnClickOutside();
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [isOpen, enableOnClickOutside, disableOnClickOutside, handleKeyDown]);
  TabDropDown.handleClickOutside = function (event) {
    return onRequestClose(event);
  };
  var theme = _react.default.useContext(_terraThemeContext.default);
  var dropDownClassNames = cx('drop-down', {
    'is-open': isOpen
  }, theme.className);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: function ref(node) {
      dropDownRef.current = node;
      refCallback(node);
    },
    role: "none",
    className: dropDownClassNames,
    onMouseDown: function onMouseDown(e) {
      e.preventDefault();
    }
  }, children);
};
TabDropDown.propTypes = propTypes;
var clickOutsideConfig = {
  handleClickOutside: function handleClickOutside() {
    return TabDropDown.handleClickOutside;
  }
};
var _default = (0, _reactOnclickoutside.default)(TabDropDown, clickOutsideConfig);
exports.default = _default;