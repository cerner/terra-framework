"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _IconCheckmark = _interopRequireDefault(require("terra-icon/lib/icon/IconCheckmark"));
var _keycodeJs = require("keycode-js");
var _TabUtils = require("./_TabUtils");
var _HiddenTabModule = _interopRequireDefault(require("./HiddenTab.module.scss"));
var cx = _bind.default.bind(_HiddenTabModule.default);
var propTypes = {
  /**
   * The id of the tab to be used in mapping.
   */
  id: _propTypes.default.string.isRequired,
  /**
   * The id of the tab pane element associated to this tab.
   */
  associatedPanelId: _propTypes.default.string.isRequired,
  /**
   * Index value to use for navigation.
   */
  index: _propTypes.default.number.isRequired,
  /**
   * Indicates if the tab is currently selected.
   */
  isSelected: _propTypes.default.bool,
  /**
   * Text to be displayed on the tab.
   */
  label: _propTypes.default.string.isRequired,
  /**
   * Identifer for the Tab to be returned with onSelect.
   */
  itemKey: _propTypes.default.string.isRequired,
  /**
   * Object to be returned in the onSelect.
   */
  metaData: _propTypes.default.object,
  /**
   * Callback function triggering on selection. onSelect(itemKey, metaData)
   */
  onSelect: _propTypes.default.func.isRequired,
  /**
   * Array of id strings,
   */
  tabIds: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,
  /**
   * @private
   * The function callback when an event occurs.
   */
  onBlur: _propTypes.default.func.isRequired,
  /**
   * @private
   * The function callback when an event occurs.
   */
  onFocus: _propTypes.default.func.isRequired
};
var defaultProps = {
  isSelected: false
};
var HiddenTab = function HiddenTab(_ref) {
  var id = _ref.id,
    associatedPanelId = _ref.associatedPanelId,
    index = _ref.index,
    isSelected = _ref.isSelected,
    label = _ref.label,
    itemKey = _ref.itemKey,
    metaData = _ref.metaData,
    onBlur = _ref.onBlur,
    onFocus = _ref.onFocus,
    onSelect = _ref.onSelect,
    tabIds = _ref.tabIds;
  var attributes = {};
  var theme = _react.default.useContext(_terraThemeContext.default);
  var hiddenClassNames = cx('hidden', {
    'is-active': isSelected
  }, theme.className);
  var handleOnSelect = function handleOnSelect(event) {
    event.preventDefault();
    event.stopPropagation();
    (0, _TabUtils.enableFocusStyles)(event);
    onSelect(itemKey, metaData);
  };
  var onKeyDown = function onKeyDown(event) {
    if (event.nativeEvent.keyCode === _keycodeJs.KEY_RETURN || event.nativeEvent.keyCode === _keycodeJs.KEY_SPACE) {
      handleOnSelect(event);
    } else {
      (0, _TabUtils.handleArrows)(event, index, tabIds);
    }
  };
  attributes.tabIndex = isSelected ? 0 : -1;
  attributes.onClick = function (e) {
    e.preventDefault();
    e.stopPropagation();
    handleOnSelect(e);
  };
  attributes.onKeyDown = onKeyDown;
  attributes.onBlur = function (e) {
    (0, _TabUtils.enableFocusStyles)(e);
    onBlur(e);
  };
  attributes.onFocus = onFocus;
  attributes.onMouseDown = _TabUtils.disableFocusStyles;
  attributes['data-focus-styles-enabled'] = true;
  attributes['aria-selected'] = isSelected;
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, attributes, {
    id: id,
    "aria-controls": associatedPanelId,
    role: "tab",
    className: hiddenClassNames
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: cx('checkbox')
  }, isSelected ? /*#__PURE__*/_react.default.createElement(_IconCheckmark.default, null) : null), /*#__PURE__*/_react.default.createElement("div", {
    className: cx('label')
  }, label));
};
HiddenTab.propTypes = propTypes;
HiddenTab.defaultProps = defaultProps;
var _default = HiddenTab;
exports.default = _default;