"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));
var _MoreButton = _interopRequireDefault(require("./_MoreButton"));
var _TabDropDown = _interopRequireDefault(require("./_TabDropDown"));
var _Tab = _interopRequireDefault(require("./_Tab"));
var _HiddenTab = _interopRequireDefault(require("./_HiddenTab"));
var _TabsModule = _interopRequireDefault(require("./Tabs.module.scss"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var cx = _bind.default.bind(_TabsModule.default);
var propTypes = {
  /**
   * The label to set on the tablist element.
   */
  ariaLabel: _propTypes.default.string.isRequired,
  /**
   * Currently active Tabs.Pane content to be displayed.
   */
  tabData: _propTypes.default.arrayOf(_propTypes.default.shape({
    /**
     * The id string to associate to the 'tab'.
     */
    id: _propTypes.default.string.isRequired,
    /**
     * The id string to associate to the 'tabpanel'.
     */
    associatedPanelId: _propTypes.default.string.isRequired,
    /**
     * The label to display for the tab.
     */
    label: _propTypes.default.string.isRequired,
    /**
     * Whether or not the tab is selected.
     */
    isSelected: _propTypes.default.bool,
    /**
     * The function callback for selection of a tab.
     * Returns the event and metaData e.g. onSelect(event, metaData).
     */
    onSelect: _propTypes.default.func,
    /**
     * The metaData to return with the onSelect callback.
     */
    metaData: _propTypes.default.object
  })).isRequired
};
var Tabs = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(Tabs, _React$Component);
  var _super = _createSuper(Tabs);
  function Tabs(props) {
    var _this;
    (0, _classCallCheck2.default)(this, Tabs);
    _this = _super.call(this, props);
    _this.containerRef = /*#__PURE__*/_react.default.createRef();
    _this.dropdownRef = /*#__PURE__*/_react.default.createRef();
    _this.moreButtonRef = /*#__PURE__*/_react.default.createRef();
    _this.setIsOpen = _this.setIsOpen.bind((0, _assertThisInitialized2.default)(_this));
    _this.resetCache = _this.resetCache.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleResize = _this.handleResize.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleHiddenBlur = _this.handleHiddenBlur.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleHiddenFocus = _this.handleHiddenFocus.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleMoreButtonBlur = _this.handleMoreButtonBlur.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleMoreButtonSelect = _this.handleMoreButtonSelect.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleOutsideClick = _this.handleOutsideClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.wrapOnSelect = _this.wrapOnSelect.bind((0, _assertThisInitialized2.default)(_this));
    _this.wrapOnSelectHidden = _this.wrapOnSelectHidden.bind((0, _assertThisInitialized2.default)(_this));
    _this.positionDropDown = _this.positionDropDown.bind((0, _assertThisInitialized2.default)(_this));
    _this.resetCache();
    return _this;
  }
  (0, _createClass2.default)(Tabs, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      this.resizeObserver = new _resizeObserverPolyfill.default(function () {
        if (!_this2.isCalculating) {
          _this2.animationFrameID = window.requestAnimationFrame(function () {
            // Resetting the cache so that all elements will be rendered face-up for width calculations
            _this2.resetCache();
            _this2.forceUpdate();
          });
        }
      });
      this.resizeObserver.observe(this.containerRef.current);
      this.handleResize();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.isCalculating) {
        this.isCalculating = false;
        this.handleResize(this.contentWidth);
      } else if (this.props.tabData.length !== prevProps.tabData.length) {
        this.resetCache();
        this.forceUpdate();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.cancelAnimationFrame(this.animationFrameID);
      this.resizeObserver.disconnect(this.containerRef.current);
    }
  }, {
    key: "handleResize",
    value: function handleResize() {
      if (!this.moreButtonRef.current || !this.containerRef.current) {
        return;
      }

      // NOTE: get width from bounding client rect instead of resize observer, zoom throws off safari.
      var _this$containerRef$cu = this.containerRef.current.parentNode.getBoundingClientRect(),
        width = _this$containerRef$cu.width;
      var moreStyle = window.getComputedStyle(this.moreButtonRef.current, null);
      var moreMarginLeft = parseInt(moreStyle.getPropertyValue('margin-left'), 10);
      var moreMarginRight = parseInt(moreStyle.getPropertyValue('margin-right'), 10);
      var moreButtonWidth = this.moreButtonRef.current.getBoundingClientRect().width + moreMarginLeft + moreMarginRight;
      var availableWidth = width - moreButtonWidth;

      // Calculate hidden index
      var tabCount = this.props.tabData.length;
      var newHideIndex = tabCount;
      var calcMinWidth = 0;
      var showMoreButton = false;
      for (var i = 0; i < tabCount; i += 1) {
        var tab = this.containerRef.current.children[i];
        var tabStyle = window.getComputedStyle(tab, null);
        var tabMarginLeft = parseFloat(tabStyle.getPropertyValue('margin-left'));
        var tabMarginRight = parseFloat(tabStyle.getPropertyValue('margin-right'));
        var tabMinWidth = parseFloat(tabStyle.getPropertyValue('min-width'));
        calcMinWidth += tabMinWidth + tabMarginLeft + tabMarginRight;
        if (calcMinWidth > availableWidth && !(i === tabCount - 1 && calcMinWidth <= width)) {
          newHideIndex = i;
          showMoreButton = true;
          break;
        }
      }
      if (this.showMoreButton !== showMoreButton || this.hiddenStartIndex !== newHideIndex) {
        this.showMoreButton = showMoreButton;
        this.hiddenStartIndex = newHideIndex;
        this.forceUpdate();
      }
    }
  }, {
    key: "handleHiddenFocus",
    value: function handleHiddenFocus() {
      this.setIsOpen(true);
    }
  }, {
    key: "handleHiddenBlur",
    value: function handleHiddenBlur(event) {
      // The check for dropdown.contains(activeElement) is necessary to prevent IE11 from closing dropdown on click of scroll bar in certain contexts.
      if (this.dropdownRef.current && this.dropdownRef.current.contains(document.activeElement)) {
        if (this.dropdownRef.current === document.activeElement) {
          event.currentTarget.focus();
        }
        return;
      }
      this.setIsOpen(false);
    }
  }, {
    key: "handleMoreButtonBlur",
    value: function handleMoreButtonBlur(event) {
      if (event.currentTarget === document.activeElement) {
        return;
      }
      this.handleHiddenBlur(event);
    }
  }, {
    key: "handleMoreButtonSelect",
    value: function handleMoreButtonSelect() {
      this.setIsOpen(true);
    }
  }, {
    key: "handleOutsideClick",
    value: function handleOutsideClick(event) {
      if (event.type === 'mousedown' && (this.moreButtonRef.current === event.currentTarget || this.moreButtonRef.current.contains(event.currentTarget))) {
        return;
      }
      this.setIsOpen(false);
    }
  }, {
    key: "setIsOpen",
    value: function setIsOpen(value) {
      this.isOpen = value;
      this.forceUpdate();
    }
  }, {
    key: "resetCache",
    value: function resetCache() {
      this.animationFrameID = null;
      this.hiddenStartIndex = -1;
      this.isCalculating = true;
      this.showMoreButton = true;
      this.isOpen = false;
    }
  }, {
    key: "positionDropDown",
    value: function positionDropDown() {
      if (!this.dropdownRef.current || !this.moreButtonRef.current) {
        return;
      }
      var workspaceStyle = window.getComputedStyle(this.containerRef.current.parentNode.parentNode, null);
      var workspaceLeftBorderWidth = parseInt(workspaceStyle.getPropertyValue('border-left-width'), 10);
      var moreRect = this.moreButtonRef.current.getBoundingClientRect();
      var dropdownRect = this.dropdownRef.current.getBoundingClientRect();
      var containerRect = this.containerRef.current.getBoundingClientRect();
      var workspaceRect = this.containerRef.current.parentNode.parentNode.getBoundingClientRect();

      // calculate Offset
      var parentOffset = containerRect.left - workspaceRect.left;
      var leftEdge = moreRect.left - containerRect.left - workspaceLeftBorderWidth;
      var offset;
      var isRTL = document.getElementsByTagName('html')[0].getAttribute('dir') === 'rtl';
      if (isRTL) {
        offset = parentOffset + leftEdge;
      } else {
        var widthDelta = moreRect.width - dropdownRect.width;
        offset = parentOffset + leftEdge + widthDelta;
      }
      this.dropdownRef.current.style.left = "".concat(offset, "px");
    }
  }, {
    key: "wrapOnSelect",
    value: function wrapOnSelect(onSelect) {
      var _this3 = this;
      return function (itemKey, metaData) {
        _this3.setIsOpen(false);
        onSelect(itemKey, metaData);
      };
    }
  }, {
    key: "wrapOnSelectHidden",
    value: function wrapOnSelectHidden(onSelect) {
      var _this4 = this;
      return function (itemKey, metaData) {
        if (_this4.isOpen) {
          onSelect(itemKey, metaData);
        }
        _this4.setIsOpen(!_this4.isOpen);
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;
      var _this$props = this.props,
        tabData = _this$props.tabData,
        ariaLabel = _this$props.ariaLabel;
      var theme = this.context;
      var ids = tabData.map(function (tab) {
        return tab.id;
      });
      var hiddenIds = [];
      var visibleTabs = [];
      var hiddenTabs = [];
      var isHiddenSelected = false;
      tabData.forEach(function (tab, index) {
        if (index < _this5.hiddenStartIndex || _this5.hiddenStartIndex < 0) {
          visibleTabs.push( /*#__PURE__*/_react.default.createElement(_Tab.default, (0, _extends2.default)({}, tab, {
            key: tab.id,
            index: index,
            tabIds: ids,
            onSelect: _this5.wrapOnSelect(tab.onSelect),
            zIndex: tab.isSelected ? tabData.length : tabData.length - index
          })));
        } else {
          hiddenTabs.push( /*#__PURE__*/_react.default.createElement(_HiddenTab.default, (0, _extends2.default)({}, tab, {
            key: tab.id,
            index: index,
            tabIds: ids,
            onSelect: _this5.wrapOnSelectHidden(tab.onSelect),
            onFocus: _this5.handleHiddenFocus,
            onBlur: _this5.handleHiddenBlur
          })));
          hiddenIds.push(tab.id);
          if (tab.isSelected) {
            isHiddenSelected = true;
          }
        }
      });
      if (this.showMoreButton && this.dropdownRef.current) {
        this.positionDropDown();
      }
      var attrs;
      if (this.isCalculating) {
        attrs = {
          'data-tab-is-calculating': 'true'
        };
      }
      return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, attrs, {
        className: cx('tab-container', theme.className),
        ref: this.containerRef,
        role: "tablist",
        "aria-label": ariaLabel,
        "aria-orientation": "horizontal",
        "aria-owns": hiddenIds.join(' ')
      }), visibleTabs, this.showMoreButton ? /*#__PURE__*/_react.default.createElement(_MoreButton.default, {
        isOpen: this.isOpen,
        hiddenIndex: this.hiddenStartIndex,
        isActive: isHiddenSelected,
        zIndex: tabData.length - this.hiddenStartIndex,
        onBlur: this.handleMoreButtonBlur,
        onSelect: this.handleMoreButtonSelect,
        refCallback: function refCallback(node) {
          _this5.moreButtonRef.current = node;
        },
        tabIds: ids
      }) : undefined, /*#__PURE__*/_react.default.createElement(_TabDropDown.default, {
        onFocus: this.handleHiddenFocus,
        onBlur: this.handleHiddenBlur,
        isOpen: this.isOpen,
        onRequestClose: this.handleOutsideClick,
        refCallback: function refCallback(node) {
          _this5.dropdownRef.current = node;
        }
      }, hiddenTabs));
    }
  }]);
  return Tabs;
}(_react.default.Component);
Tabs.propTypes = propTypes;
Tabs.contextType = _terraThemeContext.default;
var _default = Tabs;
exports.default = _default;