"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _TabUtils = require("./_TabUtils");
var _WorkspaceButtonModule = _interopRequireDefault(require("./WorkspaceButton.module.scss"));
var cx = _bind.default.bind(_WorkspaceButtonModule.default);
var propTypes = {
  /**
   * The text for the button's aria-label and title attributes.
   */
  ariaLabel: _propTypes.default.string.isRequired,
  /**
   * The icon to display for the associated extension action.
   */
  icon: _propTypes.default.element.isRequired,
  /**
   * Whether or not the button should display as currently active.
   */
  isActive: _propTypes.default.bool,
  /**
   * Function callback for selection of the extension. Return (metaData).
   */
  onActivate: _propTypes.default.func,
  /**
   * Ref callback for button.
   */
  refCallback: _propTypes.default.func,
  /**
   * Identifier for use during tests
   */
  testId: _propTypes.default.string
};
var WorkspaceButton = function WorkspaceButton(_ref) {
  var ariaLabel = _ref.ariaLabel,
    icon = _ref.icon,
    isActive = _ref.isActive,
    onActivate = _ref.onActivate,
    refCallback = _ref.refCallback,
    testId = _ref.testId;
  var theme = _react.default.useContext(_terraThemeContext.default);
  var buttonClassNames = cx('workspace-button', {
    'is-active': isActive
  }, theme.className);
  return /*#__PURE__*/_react.default.createElement("div", {
    role: "button",
    tabIndex: "0",
    className: buttonClassNames,
    onClick: onActivate,
    onKeyDown: (0, _TabUtils.generateKeyDownSelection)(onActivate),
    onBlur: _TabUtils.enableFocusStyles,
    onMouseDown: _TabUtils.disableFocusStyles,
    "data-focus-styles-enabled": true,
    "aria-label": ariaLabel,
    ref: refCallback,
    "data-testid": testId,
    "aria-pressed": isActive
  }, /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    className: cx('button-inner')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('button-image'),
    title: ariaLabel
  }, icon)));
};
WorkspaceButton.propTypes = propTypes;
var _default = WorkspaceButton;
exports.default = _default;