"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _IconCaretDown = _interopRequireDefault(require("terra-icon/lib/icon/IconCaretDown"));
var _TabUtils = require("./_TabUtils");
var _TabModule = _interopRequireDefault(require("./Tab.module.scss"));
var cx = _bind.default.bind(_TabModule.default);
var propTypes = {
  /**
   * The index of the first hidden item in the dropdown.
   */
  hiddenIndex: _propTypes.default.number.isRequired,
  /**
   * Whether or not the an active item is present.
   */
  isActive: _propTypes.default.bool,
  /**
   * Whether or not the associated dropdown is open.
   */
  isOpen: _propTypes.default.bool,
  /**
   * Blur callback function.
   */
  onBlur: _propTypes.default.func,
  /**
   * Selection callback function.
   */
  onSelect: _propTypes.default.func,
  /**
   * Ref callback for button.
   */
  refCallback: _propTypes.default.func,
  /**
   * Array of id strings,
   */
  tabIds: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,
  /**
   * The z-index style to apply to the button based upon order and state.
   */
  zIndex: _propTypes.default.number
};
var setFocus = function setFocus(event) {
  event.currentTarget.setAttribute('tabindex', '-1');
  event.currentTarget.focus();
};
var removeFocus = function removeFocus(event) {
  event.currentTarget.removeAttribute('tabindex');
};
var MoreButton = function MoreButton(_ref) {
  var hiddenIndex = _ref.hiddenIndex,
    isActive = _ref.isActive,
    isOpen = _ref.isOpen,
    onBlur = _ref.onBlur,
    onSelect = _ref.onSelect,
    refCallback = _ref.refCallback,
    tabIds = _ref.tabIds,
    zIndex = _ref.zIndex;
  var theme = _react.default.useContext(_terraThemeContext.default);
  var handleOnKeyDown = function handleOnKeyDown(event) {
    return (0, _TabUtils.handleMoreButtonArrows)(event, hiddenIndex, tabIds);
  };
  var handleOnMouseDown = function handleOnMouseDown(event) {
    return setFocus(event);
  };
  var handleOnSelect = function handleOnSelect(event) {
    setFocus(event);
    if (onSelect) {
      onSelect(event);
    }
  };
  var handleOnBlur = function handleOnBlur(event) {
    removeFocus(event);
    if (onBlur) {
      onBlur(event);
    }
  };

  /* eslint-disable react/forbid-dom-props */
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    role: "button",
    ref: refCallback,
    onClick: handleOnSelect,
    onKeyDown: handleOnKeyDown,
    onBlur: handleOnBlur,
    onMouseDown: handleOnMouseDown,
    className: cx('tab-menu', {
      'is-active': isOpen || isActive
    }, {
      'is-open': isOpen
    }, theme.className),
    style: {
      zIndex: isOpen ? '100' : zIndex
    },
    "data-testid": "workspace-tabs-more-button"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('inner')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('icon')
  }, /*#__PURE__*/_react.default.createElement(_IconCaretDown.default, null))));
  /* eslint-disable react/forbid-dom-props */
};

MoreButton.propTypes = propTypes;
var _default = MoreButton;
exports.default = _default;