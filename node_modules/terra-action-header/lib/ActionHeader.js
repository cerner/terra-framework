"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraButton = _interopRequireWildcard(require("terra-button"));
var _reactIntl = require("react-intl");
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _lodash = _interopRequireDefault(require("lodash.uniqueid"));
var _ActionHeaderContainer = _interopRequireDefault(require("./_ActionHeaderContainer"));
var _ActionHeaderModule = _interopRequireDefault(require("./ActionHeader.module.scss"));
var _excluded = ["text", "title", "intl", "level", "onClose", "onBack", "onMaximize", "onMinimize", "onPrevious", "onNext", "children", "backButtonA11yLabel", "prevButtonA11yLabel", "nextButtonA11yLabel"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var cx = _bind.default.bind(_ActionHeaderModule.default);
var propTypes = {
  /**
   * Displays a single terra `Collapsible Menu View` (_Not provided by `Action Header`_) child element on the right end of the header.
   */
  children: _propTypes.default.element,
  /**
   * @private
   * The intl object to be injected for translations.
   */
  intl: _propTypes.default.shape({
    formatMessage: _propTypes.default.func
  }),
  /**
   * ![IMPORTANT](https://badgen.net/badge/UX/Accessibility/blue)
   * Optionally sets the heading level. One of `1`, `2`, `3`, `4`, `5`, `6`. Default `level=1`. This helps screen readers to announce appropriate heading levels.
   * Changing 'level' will not visually change the style of the content.
   * `level` should be specified explicitly to allow screen readers to identify headers consistently.
   */
  level: _propTypes.default.oneOf([1, 2, 3, 4, 5, 6]),
  /**
   * Callback function for when the close button is clicked.
   * On small viewports, this will be triggered by a back button if onBack is not set.
   */
  onClose: _propTypes.default.func,
  /**
   * Callback function for when the back button is clicked. The back button will not display if this is not set.
   */
  onBack: _propTypes.default.func,
  /**
   * Accessibility label for Back button. To be used with onBack prop.
   */
  backButtonA11yLabel: _propTypes.default.string,
  /**
   * Callback function for when the expand button is clicked.
   * The expand button will not display if this is not set or on small viewports.
   * Only the expand button will be rendered if onMaximize and onMinimize are set.
   *
   * *Note: If `onBack` is set, the maximize button will not appear and a custom maximize button must be provided
   * as a child inside a `Collapsible Menu View`.*
   */
  onMaximize: _propTypes.default.func,
  /**
   * Callback function for when the minimize button is clicked.
   * The minimize button will not display if this is not set or on small viewports.
   * Only the expand button will be rendered if both onMaximize and onMinimize are set.
   *
   * *Note: If `onBack` is set, the minimize button will not appear and a custom minimize button must be provided
   * as a child inside a `Collapsible Menu View`.*
   */
  onMinimize: _propTypes.default.func,
  /**
   * Callback function for when the next button is clicked. The previous-next button group will display if either this or onPrevious is set but the button for the one not set will be disabled.
   */
  onNext: _propTypes.default.func,
  /**
   * Accessibility label for Next button. To be used with onNext prop
   */
  nextButtonA11yLabel: _propTypes.default.string,
  /**
   * Callback function for when the previous button is clicked. The previous-next button group will display if either this or onNext is set but the button for the one not set will be disabled.
   */
  onPrevious: _propTypes.default.func,
  /**
   * Accessibility label for Previous button. To be used with onPrevious prop.
   */
  prevButtonA11yLabel: _propTypes.default.string,
  /**
   * ![IMPORTANT](https://badgen.net/badge/UX/Accessibility/blue)
   * Text to be displayed as the title in the header bar.
   */
  text: _propTypes.default.string,
  /**
   * ![IMPORTANT](https://badgen.net/badge/prop/deprecated/red)
   * title prop has been deperecated and will be removed on next major version relase. Replace the `title` prop with `text` prop.
   */
  title: _propTypes.default.string
};
var defaultProps = {
  text: undefined,
  onClose: undefined,
  onBack: undefined,
  onMaximize: undefined,
  onMinimize: undefined,
  onNext: undefined,
  onPrevious: undefined,
  children: undefined,
  backButtonA11yLabel: undefined,
  prevButtonA11yLabel: undefined,
  nextButtonA11yLabel: undefined
};
var ActionHeader = function ActionHeader(_ref) {
  var text = _ref.text,
    title = _ref.title,
    intl = _ref.intl,
    level = _ref.level,
    onClose = _ref.onClose,
    onBack = _ref.onBack,
    onMaximize = _ref.onMaximize,
    onMinimize = _ref.onMinimize,
    onPrevious = _ref.onPrevious,
    onNext = _ref.onNext,
    children = _ref.children,
    backButtonA11yLabel = _ref.backButtonA11yLabel,
    prevButtonA11yLabel = _ref.prevButtonA11yLabel,
    nextButtonA11yLabel = _ref.nextButtonA11yLabel,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var buttonId = (0, _lodash.default)();
  var closeButtonId = "terra-action-header-close-button-".concat(buttonId);
  var maximizeButtonId = "terra-action-header-maximize-button-".concat(buttonId);
  var minimizeButtonId = "terra-action-header-minimize-button-".concat(buttonId);
  var closeButton = onClose ? /*#__PURE__*/_react.default.createElement(_terraButton.default, {
    className: cx(['header-button', 'close-button']),
    "data-terra-action-header": "close-button",
    isIconOnly: true,
    icon: /*#__PURE__*/_react.default.createElement("span", {
      className: cx(['header-icon', 'close'])
    }),
    text: intl.formatMessage({
      id: 'Terra.actionHeader.close'
    }),
    onClick: onClose,
    variant: _terraButton.ButtonVariants.UTILITY,
    "aria-describedby": closeButtonId
  }) : null;
  var backButton = onBack ? /*#__PURE__*/_react.default.createElement(_terraButton.default, {
    className: cx(['header-button', 'back-button']),
    "data-terra-action-header": "back-button",
    isIconOnly: true,
    icon: /*#__PURE__*/_react.default.createElement("span", {
      className: cx(['header-icon', 'back'])
    }),
    text: backButtonA11yLabel || intl.formatMessage({
      id: 'Terra.actionHeader.back'
    }),
    onClick: onBack,
    variant: _terraButton.ButtonVariants.UTILITY
  }) : null;
  var expandButton;
  if (!backButton) {
    if (onMaximize) {
      expandButton = /*#__PURE__*/_react.default.createElement(_terraButton.default, {
        className: cx(['header-button', 'maximize-button']),
        "data-terra-action-header": "maximize-button",
        isIconOnly: true,
        icon: /*#__PURE__*/_react.default.createElement("span", {
          className: cx(['header-icon', 'maximize'])
        }),
        text: intl.formatMessage({
          id: 'Terra.actionHeader.maximize'
        }),
        onClick: onMaximize,
        variant: _terraButton.ButtonVariants.UTILITY,
        "aria-describedby": maximizeButtonId
      });
    } else if (onMinimize) {
      expandButton = /*#__PURE__*/_react.default.createElement(_terraButton.default, {
        className: cx(['header-button', 'minimize-button']),
        "data-terra-action-header": "minimize-button",
        isIconOnly: true,
        icon: /*#__PURE__*/_react.default.createElement("span", {
          className: cx(['header-icon', 'minimize'])
        }),
        text: intl.formatMessage({
          id: 'Terra.actionHeader.minimize'
        }),
        onClick: onMinimize,
        variant: _terraButton.ButtonVariants.UTILITY,
        "aria-describedby": minimizeButtonId
      });
    }
  }
  var previousNextButtonGroup = onPrevious || onNext ? /*#__PURE__*/_react.default.createElement("div", {
    className: cx('previous-next-button-group')
  }, /*#__PURE__*/_react.default.createElement(_terraButton.default, {
    className: cx(['header-button', 'previous-button']),
    "data-terra-action-header": "previous-button",
    isIconOnly: true,
    icon: /*#__PURE__*/_react.default.createElement("span", {
      className: cx(['header-icon', 'previous'])
    }),
    text: prevButtonA11yLabel || intl.formatMessage({
      id: 'Terra.actionHeader.previous'
    }),
    onClick: onPrevious,
    isDisabled: onPrevious === undefined,
    variant: _terraButton.ButtonVariants.UTILITY
  }), /*#__PURE__*/_react.default.createElement(_terraButton.default, {
    className: cx(['header-button', 'next-button']),
    "data-terra-action-header": "next-button",
    isIconOnly: true,
    icon: /*#__PURE__*/_react.default.createElement("span", {
      className: cx(['header-icon', 'next'])
    }),
    text: nextButtonA11yLabel || intl.formatMessage({
      id: 'Terra.actionHeader.next'
    }),
    onClick: onNext,
    isDisabled: onNext === undefined,
    variant: _terraButton.ButtonVariants.UTILITY
  })) : null;
  var leftButtons = backButton || expandButton || previousNextButtonGroup ? /*#__PURE__*/_react.default.createElement("div", {
    className: cx('left-buttons', theme.className)
  }, backButton, expandButton, previousNextButtonGroup) : null;
  var rightButtons = closeButton ? /*#__PURE__*/_react.default.createElement("div", {
    className: cx('right-buttons', theme.className)
  }, closeButton) : null;
  if (title) {
    // eslint-disable-next-line no-console
    console.warn('`title` prop has been renamed to `text`. please update all the refernces of `title` prop to use prop `text`.'); // to be removed on next major version release.
  }

  if (!level) {
    // eslint-disable-next-line no-console
    console.warn('Default heading level may not appropriate has it would fail to convey context of heading in a site / application where it is used. Heading level should be set explicitly depending on the position of header in site / application to allow screen readers to identify headers consistently.'); // to be removed on next major version release.
  }

  return /*#__PURE__*/_react.default.createElement(_ActionHeaderContainer.default, _extends({}, customProps, {
    startContent: leftButtons,
    text: text || title,
    endContent: rightButtons,
    level: level || 1,
    id: buttonId
  }), children);
};
ActionHeader.propTypes = propTypes;
ActionHeader.defaultProps = defaultProps;
var _default = (0, _reactIntl.injectIntl)(ActionHeader);
exports.default = _default;