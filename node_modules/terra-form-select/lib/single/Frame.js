"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _reactIntl = require("react-intl");
var _lodash = _interopRequireDefault(require("lodash.uniqueid"));
var KeyCode = _interopRequireWildcard(require("keycode-js"));
var _Dropdown = _interopRequireDefault(require("../shared/_Dropdown"));
var _Menu = _interopRequireDefault(require("./Menu"));
var _FrameUtil = _interopRequireDefault(require("../shared/_FrameUtil"));
var _SharedUtil = _interopRequireDefault(require("../shared/_SharedUtil"));
var _FrameModule = _interopRequireDefault(require("../shared/_Frame.module.scss"));
require("mutationobserver-shim");
require("../shared/_contains-polyfill");
require("../shared/_matches-polyfill");
var _excluded = ["ariaLabel", "clearOptionDisplay", "children", "disabled", "display", "dropdownAttrs", "intl", "isIncomplete", "isInvalid", "maxHeight", "noResultContent", "onDeselect", "onSelect", "placeholder", "required", "totalOptions", "value"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var cx = _bind.default.bind(_FrameModule.default);
var propTypes = {
  /**
   * Used to define a string that labels the select component to screen readers.
   */
  ariaLabel: _propTypes.default.string,
  /**
   * The select options.
   */
  children: _propTypes.default.node,
  /**
   * Text for the clear option.
   */
  clearOptionDisplay: _propTypes.default.string,
  /**
   * Whether the select is disabled.
   */
  disabled: _propTypes.default.bool,
  /**
   * The select display.
   */
  display: _propTypes.default.node,
  /**
   * Additional attributes to spread onto the dropdown. ( Style, ClassNames, etc.. )
   */
  // eslint-disable-next-line react/forbid-prop-types
  dropdownAttrs: _propTypes.default.object,
  /**
   * @private
   * The intl object to be injected for translations.
   */
  intl: _propTypes.default.shape({
    formatMessage: _propTypes.default.func
  }).isRequired,
  /**
   * Whether the select displays as Incomplete. Use when no value has been provided. _(usage note: `required` must also be set)_.
   */
  isIncomplete: _propTypes.default.bool,
  /**
   * Whether the select displays as Invalid. Use when value does not meet validation pattern.
   */
  isInvalid: _propTypes.default.bool,
  /**
   * The max height of the dropdown.
   */
  maxHeight: _propTypes.default.number,
  /**
   * Content to display when no search results are found.
   */
  noResultContent: _propTypes.default.node,
  /**
   * Callback function triggered when an option is deselected.
   */
  onDeselect: _propTypes.default.func,
  /**
   * Callback function triggered when the frame loses focus.
   */
  onBlur: _propTypes.default.func,
  /**
   * Callback function triggered when the frame gains focus.
   */
  onFocus: _propTypes.default.func,
  /**
   * Callback function triggered when an option is selected.
   */
  onSelect: _propTypes.default.func,
  /**
   * Placeholder text.
   */
  placeholder: _propTypes.default.string,
  /**
   * Whether the field is required.
   */
  required: _propTypes.default.bool,
  /**
   * Total number of options.
   */
  totalOptions: _propTypes.default.number,
  /**
   * The select value.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array])
};
var defaultProps = {
  clearOptionDisplay: undefined,
  disabled: false,
  dropdownAttrs: undefined,
  isIncomplete: false,
  isInvalid: false,
  noResultContent: undefined,
  onDeselect: undefined,
  onSelect: undefined,
  placeholder: undefined,
  required: false,
  totalOptions: undefined,
  value: undefined
};

/**
   * Determines compatible aria-labelledby IDs based on active variant
   * Used with default, multiple, and tag variants to provide information about the label, displayed
   * value and or the placeholder value.
   */
function ariaLabelledByIds(labelId, displayId, placeholderId) {
  // Safari is able to read the display/placeholder text, other browsers need help to provide that info to
  // the accessibility tree used by screen readers
  if (_SharedUtil.default.isSafari()) {
    return "".concat(labelId);
  }
  return "".concat(labelId, " ").concat(displayId, " ").concat(placeholderId);
}

/* This rule can be removed when eslint-plugin-jsx-a11y is updated to ~> 6.0.0 */
/* eslint-disable jsx-a11y/no-static-element-interactions */
var Frame = /*#__PURE__*/function (_React$Component) {
  _inherits(Frame, _React$Component);
  var _super = _createSuper(Frame);
  function Frame(props) {
    var _this;
    _classCallCheck(this, Frame);
    _this = _super.call(this, props);
    _this.state = {
      isOpen: false,
      isFocused: false,
      isInputFocused: false,
      isPositioned: false,
      hasSearchChanged: false
    };
    _this.ariaLabel = _this.ariaLabel.bind(_assertThisInitialized(_this));
    _this.getDisplay = _this.getDisplay.bind(_assertThisInitialized(_this));
    _this.renderToggleButton = _this.renderToggleButton.bind(_assertThisInitialized(_this));
    _this.renderDescriptionText = _this.renderDescriptionText.bind(_assertThisInitialized(_this));
    _this.openDropdown = _this.openDropdown.bind(_assertThisInitialized(_this));
    _this.closeDropdown = _this.closeDropdown.bind(_assertThisInitialized(_this));
    _this.toggleDropdown = _this.toggleDropdown.bind(_assertThisInitialized(_this));
    _this.positionDropdown = _this.positionDropdown.bind(_assertThisInitialized(_this));
    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_this));
    _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_this));
    _this.handleSelect = _this.handleSelect.bind(_assertThisInitialized(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));
    _this.handleMouseDown = _this.handleMouseDown.bind(_assertThisInitialized(_this));
    _this.handleToggleMouseDown = _this.handleToggleMouseDown.bind(_assertThisInitialized(_this));
    _this.handleToggleButtonMouseDown = _this.handleToggleButtonMouseDown.bind(_assertThisInitialized(_this));
    _this.role = _this.role.bind(_assertThisInitialized(_this));
    _this.visuallyHiddenComponent = /*#__PURE__*/_react.default.createRef();
    _this.setSelectMenuRef = _this.setSelectMenuRef.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Frame, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // eslint-disable-next-line no-prototype-builtins
      if (!Element.prototype.hasOwnProperty('inert')) {
        // IE10 throws an error if wicg-inert is imported too early, as wicg-inert tries to set an observer on document.body which may not exist on import
        // eslint-disable-next-line global-require
        require('wicg-inert/dist/inert');
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(previousProps, previousState) {
      if (_FrameUtil.default.shouldPositionDropdown(previousState, this.state, this.dropdown)) {
        clearTimeout(this.debounceTimer);
        this.dropdown.setAttribute('inert', '');
        this.debounceTimer = setTimeout(this.positionDropdown, !previousState.isOpen ? 0 : 100);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.debounceTimer);
    }

    /**
     * Handles the blur event.
     */
  }, {
    key: "handleBlur",
    value: function handleBlur(event) {
      var _this2 = this;
      // The check for dropdown.contains(activeElement) is necessary to prevent IE11 from closing dropdown on click of scrollbar in certain contexts.
      if (this.dropdown && this.dropdown === document.activeElement && this.dropdown.contains(document.activeElement)) {
        return;
      }

      // Don't blur while focus is on select.
      if (event.relatedTarget === this.select) {
        this.closeDropdown();
        return;
      }

      // eslint-disable-next-line no-underscore-dangle
      var _onBlur = function _onBlur() {
        _this2.setState({
          isFocused: false
        });
        _this2.closeDropdown();
        if (_this2.props.onBlur) {
          _this2.props.onBlur(event);
        }
      };

      /**
       * When the select blur event is triggered with the default variant, this code checks if the focus
       * is shifted to the select menu and if so, suppresses the rest of the blur handler to prevent
       * the select menu from being closed.
       */
      // event.relatedTarget returns null in IE 10 / IE 11
      if (event.relatedTarget === null) {
        // Allow 10ms timeout hack for the browser to set document.activeElement so that the currently
        // focused page element is available when the blur event is fired.
        // See discussion on https://github.com/facebook/react/issues/3751
        // https://github.com/mui-org/material-ui/blob/v3.9.3/packages/material-ui/src/MenuList/MenuList.js#L27
        setTimeout(function () {
          if (_this2.selectMenu !== document.activeElement) {
            _onBlur();
          }
        }, 10);
        // Modern browsers support event.relatedTarget
      } else if (this.selectMenu !== event.relatedTarget) {
        _onBlur();
      }
    }

    /**
     * Handles the focus event.
     */
  }, {
    key: "handleFocus",
    value: function handleFocus(event) {
      if (this.props.disabled) {
        return;
      }
      if (this.props.onFocus && !this.state.isFocused) {
        this.props.onFocus(event);
      }
      this.setState({
        isFocused: true
      });
    }

    /**
     * Manages keyboard interactions and accessibility.
     * @param {event} event - The onKeyDown event.
     */
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var keyCode = event.keyCode;
      if (keyCode === KeyCode.KEY_SPACE) {
        event.preventDefault();
        this.openDropdown();
      } else if (keyCode === KeyCode.KEY_UP || keyCode === KeyCode.KEY_DOWN) {
        event.preventDefault();
        this.openDropdown();
      } else if (keyCode === KeyCode.KEY_ESCAPE) {
        this.select.focus();
        this.closeDropdown();
      }
    }

    /**
     * Handles the mouse down events.
     */
  }, {
    key: "handleMouseDown",
    value: function handleMouseDown() {
      this.openDropdown();
    }

    /**
     * Handles the toggle mouse down events.
     */
  }, {
    key: "handleToggleMouseDown",
    value: function handleToggleMouseDown() {
      if (this.state.isOpen) {
        this.closeDropdown();
      }
    }

    /**
     * Handles the toggle button mouse down events.
     */
  }, {
    key: "handleToggleButtonMouseDown",
    value: function handleToggleButtonMouseDown() {
      if (this.state.isOpen) {
        this.closeDropdown();
      }
    }

    /**
     * Handles the request to select an option.
     * @param {string|number} value - The value of the selected option.
     * @param {ReactNode} option - The option that was selected.
     */
  }, {
    key: "handleSelect",
    value: function handleSelect(value, option) {
      this.setState({
        isOpen: false,
        isAbove: false
      });
      if (this.props.onSelect) {
        this.props.onSelect(value, option);
      }
    }
  }, {
    key: "setSelectMenuRef",
    value: function setSelectMenuRef(element) {
      this.selectMenu = element;
    }
  }, {
    key: "getDisplay",
    value: function getDisplay(displayId, placeholderId) {
      var _this$props = this.props,
        display = _this$props.display,
        placeholder = _this$props.placeholder;
      return display ? /*#__PURE__*/_react.default.createElement("span", {
        id: displayId
      }, display) : /*#__PURE__*/_react.default.createElement("div", {
        id: placeholderId,
        className: cx('placeholder')
      }, placeholder || '\xa0');
    }

    /**
     * Closes the dropdown.
     */
  }, {
    key: "closeDropdown",
    value: function closeDropdown() {
      this.setState({
        isAbove: false,
        isFocused: document.activeElement === this.select,
        isOpen: false,
        isPositioned: false
      });
    }

    /**
     * Opens the dropdown.
     */
  }, {
    key: "openDropdown",
    value: function openDropdown() {
      if (this.state.isOpen || this.props.disabled) {
        return;
      }
      this.setState({
        isOpen: true,
        isPositioned: false
      });
    }

    /**
     * Positions the dropdown to utilize the most available space.
     */
  }, {
    key: "positionDropdown",
    value: function positionDropdown() {
      var _this3 = this;
      if (!this.state.isOpen) {
        return;
      }
      var _this$props2 = this.props,
        dropdownAttrs = _this$props2.dropdownAttrs,
        maxHeight = _this$props2.maxHeight;

      // Sets Focus to dropdown menu after dropdown menu is postioned.
      var moveFocusToDropdown = function moveFocusToDropdown() {
        if (_this3.state.isPositioned) {
          _this3.dropdown.removeAttribute('inert');
          _this3.dropdown.removeAttribute('aria-hidden');
          _this3.selectMenu.setAttribute('tabIndex', '0');
        }
        if (_this3.selectMenu) {
          _this3.selectMenu.focus();
        }
      };
      this.setState(_FrameUtil.default.dropdownPosition(dropdownAttrs, this.select, this.dropdown, maxHeight), moveFocusToDropdown);
    }

    /**
     * Toggles the dropdown open or closed.
     */
  }, {
    key: "toggleDropdown",
    value: function toggleDropdown() {
      if (this.state.isOpen) {
        this.closeDropdown();
      } else {
        this.openDropdown();
      }
    }

    /**
     * Determines compatible aria-label string based on if one is provided via props
     * Falls back to the string 'Search' if no label is provided
     */
  }, {
    key: "ariaLabel",
    value: function ariaLabel() {
      var _this$props3 = this.props,
        ariaLabel = _this$props3.ariaLabel,
        disabled = _this$props3.disabled,
        intl = _this$props3.intl;
      var defaultAriaLabel = intl.formatMessage({
        id: 'Terra.form.select.ariaLabel'
      });
      var dimmed = intl.formatMessage({
        id: 'Terra.form.select.dimmed'
      });

      // VO on iOS doesn't do a good job of announcing disabled stated. Here we append the phrase that
      // VO associates with disabled form controls.
      if ('ontouchstart' in window && disabled) {
        return ariaLabel === undefined ? "".concat(defaultAriaLabel, " ").concat(dimmed) : "".concat(ariaLabel, " ").concat(dimmed);
      }
      return ariaLabel === undefined ? defaultAriaLabel : ariaLabel;
    }

    /**
     * Determines compatible role attribute to apply to select based on active variant and disabled prop
     */
  }, {
    key: "role",
    value: function role() {
      var disabled = this.props.disabled;
      return disabled ? undefined : 'combobox';
    }

    /**
     * Renders descriptive text related to the select component to be available for screen readers
     */
  }, {
    key: "renderDescriptionText",
    value: function renderDescriptionText() {
      var intl = this.props.intl;
      var listOfOptionsTxt = intl.formatMessage({
        id: 'Terra.form.select.listOfTotalOptions'
      });
      var defaultUsageGuidanceTxt = intl.formatMessage({
        id: 'Terra.form.select.defaultUsageGuidance'
      });
      if ('ontouchstart' in window) {
        return listOfOptionsTxt;
      }
      return "".concat(listOfOptionsTxt, " ").concat(defaultUsageGuidanceTxt);
    }
  }, {
    key: "renderToggleButton",
    value: function renderToggleButton() {
      /**
       * Devices that support ontouchstart trigger an onScreen keyboard when inputs are focused and
       * need customized rendering to avoid issues when used with a screen reader.
       */
      /**
       * If the variant is default, we don't need to set up any event handlers on the toggle
       * The event handlers on data-terra-select-combobox will handle tap/click events on this element
       */
      var onMouseDown = 'ontouchstart' in window ? undefined : this.toggleDropdown;
      return /*#__PURE__*/_react.default.createElement("div", {
        "data-terra-form-select-toggle": true,
        className: cx('toggle'),
        onMouseDown: onMouseDown
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: cx('arrow-icon')
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;
      var _this$props4 = this.props,
        ariaLabel = _this$props4.ariaLabel,
        clearOptionDisplay = _this$props4.clearOptionDisplay,
        children = _this$props4.children,
        disabled = _this$props4.disabled,
        display = _this$props4.display,
        dropdownAttrs = _this$props4.dropdownAttrs,
        intl = _this$props4.intl,
        isIncomplete = _this$props4.isIncomplete,
        isInvalid = _this$props4.isInvalid,
        maxHeight = _this$props4.maxHeight,
        noResultContent = _this$props4.noResultContent,
        onDeselect = _this$props4.onDeselect,
        onSelect = _this$props4.onSelect,
        placeholder = _this$props4.placeholder,
        required = _this$props4.required,
        totalOptions = _this$props4.totalOptions,
        value = _this$props4.value,
        customProps = _objectWithoutProperties(_this$props4, _excluded);
      var theme = this.context;
      var selectClasses = (0, _classnames.default)(cx('select', 'default', {
        'is-above': this.state.isAbove
      }, {
        'is-disabled': disabled
      }, {
        'is-focused': this.state.isFocused
      }, {
        'is-invalid': isInvalid
      }, {
        'is-incomplete': isIncomplete && required && !isInvalid
      }, {
        'is-open': this.state.isOpen
      }, theme.className), customProps.className);
      var labelId = "terra-select-screen-reader-label-".concat((0, _lodash.default)());
      var displayId = "terra-select-screen-reader-display-".concat((0, _lodash.default)());
      var placeholderId = "terra-select-screen-reader-placeholder-".concat((0, _lodash.default)());
      var descriptionId = "terra-select-screen-reader-description-".concat((0, _lodash.default)());
      var customAriaDescribedbyIds = customProps['aria-describedby'];
      var ariaDescribedBy = customAriaDescribedbyIds ? "".concat(descriptionId, " ").concat(customAriaDescribedbyIds) : descriptionId;
      var selectMenuId = "terra-select-menu-".concat((0, _lodash.default)());
      var menuProps = {
        id: selectMenuId,
        value: value,
        onDeselect: onDeselect,
        noResultContent: noResultContent,
        visuallyHiddenComponent: this.visuallyHiddenComponent,
        onSelect: this.handleSelect,
        onRequestClose: this.closeDropdown,
        input: this.input,
        select: this.select,
        clearOptionDisplay: clearOptionDisplay,
        refCallback: this.setSelectMenuRef
      };
      return /*#__PURE__*/_react.default.createElement("div", _extends({}, customProps, {
        role: this.role(),
        "aria-required": required,
        "data-terra-select-combobox": true,
        "aria-controls": !disabled && this.state.isOpen ? selectMenuId : undefined,
        "aria-disabled": !!disabled,
        "aria-expanded": !!disabled && !!this.state.isOpen,
        "aria-haspopup": !disabled ? 'true' : undefined,
        "aria-labelledby": ariaLabelledByIds(labelId, displayId, placeholderId),
        "aria-describedby": ariaDescribedBy,
        "aria-owns": this.state.isOpen ? selectMenuId : undefined,
        className: selectClasses,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onKeyDown: this.handleKeyDown,
        onMouseDown: this.handleMouseDown,
        tabIndex: disabled ? '-1' : '0' // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
        ,
        ref: function ref(select) {
          _this4.select = select;
        }
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: cx('visually-hidden-component'),
        hidden: true
      }, /*#__PURE__*/_react.default.createElement("span", {
        id: labelId
      }, this.ariaLabel()), /*#__PURE__*/_react.default.createElement("span", {
        id: descriptionId
      }, this.renderDescriptionText())), /*#__PURE__*/_react.default.createElement("div", {
        className: cx('display'),
        "aria-label": this.ariaLabel(),
        role: "textbox"
      }, this.getDisplay(displayId, placeholderId)), this.renderToggleButton(), /*#__PURE__*/_react.default.createElement("span", {
        "aria-atomic": "true",
        "aria-live": "assertive",
        "aria-relevant": "additions text",
        className: cx('visually-hidden-component'),
        ref: this.visuallyHiddenComponent
      }), this.state.isOpen && /*#__PURE__*/_react.default.createElement(_Dropdown.default, _extends({}, dropdownAttrs, {
        id: this.state.isOpen ? 'terra-select-dropdown' : undefined,
        target: this.select,
        isAbove: this.state.isAbove,
        isEnabled: this.state.isPositioned,
        onResize: this.positionDropdown,
        refCallback: function refCallback(ref) {
          _this4.dropdown = ref;
        },
        style: _FrameUtil.default.dropdownStyle(dropdownAttrs, this.state) // eslint-disable-line react/forbid-component-props
      }), /*#__PURE__*/_react.default.createElement(_Menu.default, menuProps, children)));
    }
  }]);
  return Frame;
}(_react.default.Component);
Frame.propTypes = propTypes;
Frame.defaultProps = defaultProps;
Frame.contextType = _terraThemeContext.default;
var _default = (0, _reactIntl.injectIntl)(Frame);
exports.default = _default;