"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _variants = _interopRequireDefault(require("./_variants"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var FrameUtil = /*#__PURE__*/function () {
  function FrameUtil() {
    _classCallCheck(this, FrameUtil);
  }
  _createClass(FrameUtil, null, [{
    key: "dropdownStyle",
    value:
    /**
     * Returns the dropdown style.
     * @param {Object} props - The component props.
     * @param {Object} state - The component state.
     * @return {Object} - The dropdown style.
     */
    function dropdownStyle() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var style = props.style;
      var maxHeight = state.maxHeight,
        width = state.width,
        bottom = state.bottom,
        top = state.top;
      return _objectSpread(_objectSpread({}, style), {}, {
        maxHeight: maxHeight,
        width: width,
        bottom: bottom,
        top: top
      });
    }

    /**
     * Determines the dropdown position.
     * @param {Object} props - The component props.
     * @param {ReactNode} target - The select wrapper.
     * @param {ReactNode} dropdown - The dropdown.
     * @param {number} maxHeight - The maxHeight of the dropdown dropdown.
     * @param {boolean} useSemanticDropdown - If the dropdown should be rendered semantically instead of in a portal
     * @return {Object} - The calculated dropdown attributes.
     */
  }, {
    key: "dropdownPosition",
    value: function dropdownPosition(props, target, dropdown, maxHeight) {
      var useSemanticDropdown = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var style = _objectSpread({}, props).style || {};
      var _dropdown$getBounding = dropdown.getBoundingClientRect(),
        height = _dropdown$getBounding.height;
      var _target$getBoundingCl = target.getBoundingClientRect(),
        bottom = _target$getBoundingCl.bottom,
        width = _target$getBoundingCl.width,
        top = _target$getBoundingCl.top;
      var _target$getBoundingCl2 = target.getBoundingClientRect(),
        targetHeight = _target$getBoundingCl2.height;
      var spaceBelow = window.innerHeight - bottom;
      var maximumHeight = parseInt(style.maxHeight || maxHeight, 10) || Infinity;
      var canFitBelow = maximumHeight < spaceBelow || height < spaceBelow || spaceBelow > top;
      var availableSpace = canFitBelow ? spaceBelow : top;
      var availableMaxHeight = Math.min(maximumHeight, availableSpace - 10);
      var isAbove = !canFitBelow;
      var semanticBottomWhenAbove = useSemanticDropdown && isAbove ? targetHeight : undefined;
      var semanticTopWhenAbove = useSemanticDropdown && !isAbove ? '100%' : undefined;
      return {
        width: width,
        maxHeight: availableMaxHeight,
        isAbove: isAbove,
        isPositioned: true,
        bottom: semanticBottomWhenAbove,
        top: semanticTopWhenAbove
      };
    }

    /**
     * Determines whether the variant allows multiple selections.
     * @param {Object} variant - The component props.
     * @return {boolean} - True if the variant allows multiple selections.
     */
  }, {
    key: "allowsMultiSelections",
    value: function allowsMultiSelections(props) {
      return props.variant === _variants.default.MULTIPLE || props.variant === _variants.default.TAG;
    }

    /**
     * Determines if the query is included in the component value.
     * @param {Object} props - The component props.
     * @param {string} query - The query value.
     * @return {boolean} - True if the query is contained within the component value.
     */
  }, {
    key: "includes",
    value: function includes(props, query) {
      if (query.trim().length === 0) {
        return false;
      }
      return (props.value || []).indexOf(query) > -1;
    }

    /**
     * Determines whether the search input should be hidden.
     * @param {Object} props - The component props;
     * @param {Object} state - The component state;
     * @return {Boolean} - True if the search input should be hidden.
     */
  }, {
    key: "shouldHideSearch",
    value: function shouldHideSearch(props, state) {
      if (FrameUtil.allowsMultiSelections(props)) {
        return !state.isFocused && props.value && props.value.length > 0;
      }
      return false;
    }

    /**
     * Determines whether the dropdown should be positioned.
     * @param {Object} previousState - The previous component state.
     * @param {Object} currentState - The current component state.
     * @param {ReactNode} dropdown - The component dropdown.
     * @return {boolean} - True if the dropdown should be positioned.
     */
  }, {
    key: "shouldPositionDropdown",
    value: function shouldPositionDropdown(previousState, currentState, dropdown) {
      if (!currentState.isOpen) {
        return false;
      }
      var _dropdown$getBounding2 = dropdown.getBoundingClientRect(),
        bottom = _dropdown$getBounding2.bottom;
      return previousState.isOpen === false || bottom > window.innerHeight;
    }

    /**
     * Determines whether the option should be added on blur.
     * @param {Object} props - The component props.
     * @param {Object} state - The component state;
     * @return {boolean} - True if the option should be added.
     */
  }, {
    key: "shouldAddOptionOnBlur",
    value: function shouldAddOptionOnBlur(props, state) {
      var onSelect = props.onSelect,
        value = props.value,
        variant = props.variant;
      var hasSearchChanged = state.hasSearchChanged,
        searchValue = state.searchValue;
      if ((variant === _variants.default.TAG || variant === _variants.default.COMBOBOX) && (variant !== _variants.default.TAG || searchValue.trim().length > 0) && hasSearchChanged && onSelect && (variant !== _variants.default.TAG || !FrameUtil.includes(props, searchValue)) && (variant !== _variants.default.COMBOBOX || value !== searchValue)) {
        return true;
      }
      return false;
    }

    /**
     * Determines the variant appropriate container tab index.
     * @param {Object} props - The component props.
     * @return {string} - A tab index.
     */
  }, {
    key: "tabIndex",
    value: function tabIndex(props) {
      if (props.variant === _variants.default.DEFAULT && !props.disabled) {
        return '0';
      }
      return '-1';
    }

    /**
     * Allows time for state update to render select menu DOM before shifting focus to it
     * @param {Object} frame - The frame object.
     */
  }, {
    key: "shiftFocusToMenu",
    value: function shiftFocusToMenu(frame) {
      setTimeout(function () {
        if (frame.selectMenu) {
          frame.selectMenu.focus();
        }
      }, 100);
    }
  }]);
  return FrameUtil;
}();
var _default = FrameUtil;
exports.default = _default;