"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _terraHookshot = _interopRequireDefault(require("terra-hookshot"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _DropdownModule = _interopRequireDefault(require("./_Dropdown.module.scss"));
var _excluded = ["children", "isAbove", "isEnabled", "isTouchAccessible", "onResize", "refCallback", "target"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var cx = _bind.default.bind(_DropdownModule.default);
var propTypes = {
  /**
   * The content of the dropdown.
   */
  children: _propTypes.default.node.isRequired,
  /**
   * Whether the dropdown is presented above the target.
   */
  isAbove: _propTypes.default.bool,
  /**
   * Whether the dropdown is visible.
   */
  isEnabled: _propTypes.default.bool,
  /**
   * Ensures touch accessibility by rendering the dropdown inline without a portal.
   *
   * Note: When enabled the dropdown will clip if rendered within a container that has an overflow: hidden ancestor.
   * The dropdown may also appear beneath content if rendered within a container that has an overflow: auto ancestor.
   */
  isTouchAccessible: _propTypes.default.bool,
  /**
   * Callback function triggered when the dropdown resizes.
   */
  onResize: _propTypes.default.func.isRequired,
  /**
   * Callback function triggered for setting a ref to the dropdown.
   */
  refCallback: _propTypes.default.func.isRequired,
  /**
   * The attachment target.
   */
  // eslint-disable-next-line react/forbid-prop-types
  target: _propTypes.default.object.isRequired
};
var defaultProps = {
  isAbove: false,
  isTouchAccessible: false
};
var AboveAttachment = {
  vertical: 'bottom',
  horizontal: 'start'
};
var BelowAttachment = {
  vertical: 'top',
  horizontal: 'start'
};
var Dropdown = function Dropdown(_ref) {
  var children = _ref.children,
    isAbove = _ref.isAbove,
    isEnabled = _ref.isEnabled,
    isTouchAccessible = _ref.isTouchAccessible,
    onResize = _ref.onResize,
    refCallback = _ref.refCallback,
    target = _ref.target,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  /**
   * Prevents default events from removing the focus from the target.
   * @param {event} event - The event invoking the callback.
   */
  var preventDefault = _react.default.useCallback(function (event) {
    event.preventDefault();
  }, []);
  var dropdownClasses = (0, _classnames.default)(cx(['dropdown', {
    'is-above': isAbove
  }, {
    'is-touch-accessible': isTouchAccessible
  }, theme.className]), customProps.className);
  if (isTouchAccessible) {
    return /*#__PURE__*/_react.default.createElement("div", _extends({}, customProps, {
      className: dropdownClasses,
      onMouseDown: preventDefault,
      ref: refCallback
    }), children);
  }
  return /*#__PURE__*/_react.default.createElement(_terraHookshot.default, {
    isOpen: true,
    isEnabled: isEnabled,
    targetRef: function targetRef() {
      return target;
    },
    attachmentBehavior: "none",
    contentAttachment: isAbove ? AboveAttachment : BelowAttachment,
    targetAttachment: isAbove ? BelowAttachment : AboveAttachment
  }, /*#__PURE__*/_react.default.createElement(_terraHookshot.default.Content, _extends({}, customProps, {
    disableOnClickOutside: true,
    className: dropdownClasses,
    onResize: onResize,
    onMouseDown: preventDefault,
    refCallback: refCallback
  }), children));
};
Dropdown.propTypes = propTypes;
Dropdown.defaultProps = defaultProps;
var _default = Dropdown;
exports.default = _default;