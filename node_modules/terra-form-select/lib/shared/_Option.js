"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _SharedUtil = _interopRequireDefault(require("./_SharedUtil"));
var _OptionModule = _interopRequireDefault(require("./_Option.module.scss"));
var _excluded = ["disabled", "display", "value", "variant", "isActive", "isSelected", "isCheckable", "isAddOption"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var cx = _bind.default.bind(_OptionModule.default);
var propTypes = {
  /**
   * Whether the option is disabled.
   */
  disabled: _propTypes.default.bool,
  /**
   * The display text of the option.
   */
  display: _propTypes.default.string,
  /**
   * @private
   * Whether the option is active.
   */
  isActive: _propTypes.default.bool,
  /**
   * @private
   * Whether the option is a custom text entry.
   */
  isAddOption: _propTypes.default.bool,
  /**
   * @private
   * Whether the option is checkable.
   */
  isCheckable: _propTypes.default.bool,
  /**
   * @private
   * Whether the option is selected.
   */
  isSelected: _propTypes.default.bool,
  /**
   * The value of the option. The value must be unique.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
  /**
   * @private
   * Variant of select component
   */
  variant: _propTypes.default.string
};
var defaultProps = {
  disabled: false,
  display: undefined
};
var Option = function Option(_ref) {
  var disabled = _ref.disabled,
    display = _ref.display,
    value = _ref.value,
    variant = _ref.variant,
    isActive = _ref.isActive,
    isSelected = _ref.isSelected,
    isCheckable = _ref.isCheckable,
    isAddOption = _ref.isAddOption,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var optionClassNames = (0, _classnames.default)(cx('option', {
    'is-active': isActive
  }, {
    'is-checkable': isCheckable && !isAddOption
  }, {
    'is-default': !isCheckable && !isAddOption
  }, {
    'is-disabled': disabled
  }, {
    'is-selected': isSelected
  }, {
    'is-add-option': isAddOption
  }, theme.className), customProps.className);
  var role = 'option'; // Used for JAWs and VoiceOver on iOS

  /**
   * VoiceOver in Safari on desktop has issues with role="option" with the combination of the
   * aria-live section we have and will stutter when reading options.
   * Switching to role="radio" and role="checkbox" mitigates this behavior.
   */
  if (_SharedUtil.default.isSafari() && !('ontouchstart' in window)) {
    role = 'radio';
    if (variant === 'tag' || variant === 'multiple') {
      role = 'checkbox';
    }
  }
  return /*#__PURE__*/_react.default.createElement("li", _extends({
    role: role
  }, customProps, {
    disabled: disabled,
    className: optionClassNames,
    "aria-selected": isSelected // Needed to allow VoiceOver on iOS to announce selected state
    ,
    "aria-checked": isSelected // Needed to allow JAWS to announce "selected" state
    ,
    "aria-disabled": disabled,
    tabIndex: "0" // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
    ,
    "data-terra-select-option": true
  }), (isCheckable || isAddOption) && /*#__PURE__*/_react.default.createElement("span", {
    className: cx('icon')
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: cx('display')
  }, display));
};
Option.propTypes = propTypes;
Option.defaultProps = defaultProps;
Option.isOption = true;
var _default = Option;
exports.default = _default;