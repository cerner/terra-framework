"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _variants = _interopRequireDefault(require("./_variants"));
var _MenuUtil = _interopRequireDefault(require("./_MenuUtil"));
var _flatten = _interopRequireDefault(require("./flatten"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var SelectUtil = /*#__PURE__*/function () {
  function SelectUtil() {
    _classCallCheck(this, SelectUtil);
  }
  _createClass(SelectUtil, null, [{
    key: "defaultValue",
    value:
    /**
     * Determines the default value of the select.
     * @param {Object} props - The component props.
     * @return {array|number|string|null} - The default value. Returns null for controlled components.
     */
    function defaultValue() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _defaultValue = _ref.defaultValue,
        value = _ref.value,
        multiple = _ref.multiple;
      if (value !== undefined) {
        return null;
      }
      if (multiple) {
        // Flatten allows converting a string default into an array.
        return _defaultValue ? (0, _flatten.default)([_defaultValue]) : [];
      }
      return _defaultValue !== undefined && _defaultValue !== null ? _defaultValue : '';
    }

    /**
     * Determines the value resulting from the removal of an option.
     * @param {Object} props - The component props.
     * @param {Object} state - The component state.
     * @param {number|string} value - The value to be removed.
     * @return {array} - The value resulting from the removal of an option.
     */
  }, {
    key: "deselect",
    value: function deselect(props, state, value) {
      return SelectUtil.value(props, state).filter(function (option) {
        return option !== value;
      });
    }

    /**
     * Finds the option matching the requested value.
     * @param {Object} props - The component props.
     * @param {Object} state - The component state.
     * @param {string} value - The option value.
     * @return {ReactNode|undefined} - The option. Returns undefined if not found.
     */
  }, {
    key: "findByValue",
    value: function findByValue(props, state, value) {
      return _MenuUtil.default.findByValue(props.children, value) || _MenuUtil.default.findByValue(state.tags, value);
    }

    /**
     * Determines whether the variant allows multiple selections.
     * @param {Object} props - The component props.
     * @return {boolean} - True if the variant allows multiple selections.
     */
  }, {
    key: "allowsMultiSelections",
    value: function allowsMultiSelections(props) {
      return props.variant === _variants.default.MULTIPLE || props.variant === _variants.default.TAG;
    }

    /**
     * Determines the value resulting from the selection of an option.
     * @param {Object} props - The component props.
     * @param {Object} state - The component state.
     * @param {number|string} value - The selected option value.
     * @return {array|number|string} - The value resulting from the selection of an option
     */
  }, {
    key: "select",
    value: function select(props, state, value) {
      if (SelectUtil.allowsMultiSelections(props)) {
        return [].concat(_toConsumableArray(SelectUtil.value(props, state)), [value]);
      }
      return value;
    }

    /**
     * Determines the controlled or uncontrolled value of the select.
     * @param {Object} props - The component props.
     * @param {Object} state - The component state.
     * @return {array|number|string|null} - The select value.
     */
  }, {
    key: "value",
    value: function value(props, state) {
      return props.value === undefined ? state.value : props.value;
    }

    /**
     * Determines the display of the value.
     * @param {Object} props - The component props.
     * @param {string|number} value - The option value.
     * @return {string} - The display of the option.
     */
  }, {
    key: "valueDisplay",
    value: function valueDisplay(props, value) {
      var option = _MenuUtil.default.findByValue(props.children, value);
      return option ? option.props.display : value;
    }

    /**
     * Parses options in Select and return total number of options
     * @param {React Children} children
     * @return {number} - Number of total Options
     */
  }, {
    key: "getTotalNumberOfOptions",
    value: function getTotalNumberOfOptions(children) {
      var totalNumberOfOptions = 0;
      _react.default.Children.forEach(children, function (child) {
        if (child.type.isOption) {
          totalNumberOfOptions += 1;
        }
        if (child.type.isOptGroup) {
          _react.default.Children.forEach(child.props.children, function (grandChild) {
            if (grandChild.type.isOption) {
              totalNumberOfOptions += 1;
            }
          });
        }
      });
      return totalNumberOfOptions;
    }
  }]);
  return SelectUtil;
}();
var _default = SelectUtil;
exports.default = _default;