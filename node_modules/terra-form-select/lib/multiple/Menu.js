"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _reactLifecyclesCompat = require("react-lifecycles-compat");
var _reactIntl = require("react-intl");
var KeyCode = _interopRequireWildcard(require("keycode-js"));
var _MaxSelection = _interopRequireDefault(require("../shared/_MaxSelection"));
var _NoResults = _interopRequireDefault(require("../shared/_NoResults"));
var _MenuUtil = _interopRequireDefault(require("../shared/_MenuUtil"));
var _MenuModule = _interopRequireDefault(require("../shared/_Menu.module.scss"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var cx = _bind.default.bind(_MenuModule.default);

/* Disabling this rule because props used in getDerivedStateFromProps return false positives. */
/* eslint-disable react/no-unused-prop-types */
var propTypes = {
  /**
    * The id of the menu.
    */
  id: _propTypes.default.string,
  /**
   * The content of the menu.
   */
  children: _propTypes.default.node,
  /**
   * Select element ref.
   */
  select: _propTypes.default.instanceOf(Element),
  /**
   * @private
   * The intl object to be injected for translations.
   */
  intl: _propTypes.default.shape({
    formatMessage: _propTypes.default.func
  }).isRequired,
  /**
   * Input element ref used in select component.
   */
  input: _propTypes.default.instanceOf(Element),
  /**
   * The maximum number of options that can be selected. A value less than 2 will be ignored.
   * Only applicable to variants allowing multiple selections (e.g.; `multiple`; `tag`).
   */
  maxSelectionCount: _propTypes.default.number,
  /**
   * Content to display when no results are found.
   */
  noResultContent: _propTypes.default.node,
  /**
   * Callback function triggered when an option is deselected.
   */
  onDeselect: _propTypes.default.func,
  /**
   * Callback function triggered when an option is selected.
   */
  onSelect: _propTypes.default.func.isRequired,
  /**
   * Callback function for option filtering. function(searchValue, option)
   */
  optionFilter: _propTypes.default.func,
  /**
   * The search value to filter the available options.
   */
  searchValue: _propTypes.default.string,
  /**
   * The value of the selected options.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array]),
  /**
   * @private Visually hidden component designed to feed screen reader text to read.
   */
  visuallyHiddenComponent: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(Element)
  }),
  /**
   * Ref callback for the select menu DOM element.
   */
  refCallback: _propTypes.default.func
};
var defaultProps = {
  id: undefined,
  children: undefined,
  input: undefined,
  maxSelectionCount: undefined,
  noResultContent: undefined,
  onDeselect: undefined,
  optionFilter: undefined,
  searchValue: undefined,
  select: undefined,
  visuallyHiddenComponent: undefined,
  value: undefined,
  refCallback: undefined
};
var Menu = /*#__PURE__*/function (_React$Component) {
  _inherits(Menu, _React$Component);
  var _super = _createSuper(Menu);
  function Menu(props) {
    var _this;
    _classCallCheck(this, Menu);
    _this = _super.call(this, props);
    _this.state = {};
    _this.clearScrollTimeout = _this.clearScrollTimeout.bind(_assertThisInitialized(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));
    _this.handleMouseEnter = _this.handleMouseEnter.bind(_assertThisInitialized(_this));
    _this.handleOptionClick = _this.handleOptionClick.bind(_assertThisInitialized(_this));
    _this.scrollIntoView = _this.scrollIntoView.bind(_assertThisInitialized(_this));
    return _this;
  }

  /**
   * Updates the component state when new props are received.
   * @param {Object} props - The received props.
   * @param {Object} state - The current state of the component.
   * @return {Object} - The new state object.
   */
  _createClass(Menu, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('keydown', this.handleKeyDown);
      this.scrollIntoView();
      /**
       * Without this detection for ontouchstart and the early return, VoiceOver on iOS will read the
       * first option twice when the menu is opened. First due to aria-live update in componentDidMount
       * and another time because we shift focus to the dropdown and VoiceOver on iOS will read the
       * first option in the dropdown. To mitigate this, the following conditional
       * check opts-out of the aria-live update if browser supports ontouchstart which iOS supports.
       */
      if ('ontouchstart' in window) return;
      this.updateCurrentActiveScreenReader();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.updateNoResultsScreenReader();
      this.updateCurrentActiveScreenReader();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearScrollTimeout();
      if (this.state.closedViaKeyEvent) {
        if (this.props.input) {
          this.props.input.focus();
        }
      }
      document.removeEventListener('keydown', this.handleKeyDown);
    }

    /**
     * Handles keyboard interactions within the dropdown.
     * @param {event} event - The key down event.
     */
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var keyCode = event.keyCode;
      var _this$state = this.state,
        active = _this$state.active,
        children = _this$state.children;
      var _this$props = this.props,
        intl = _this$props.intl,
        onSelect = _this$props.onSelect,
        onDeselect = _this$props.onDeselect,
        value = _this$props.value,
        visuallyHiddenComponent = _this$props.visuallyHiddenComponent;
      var options = _MenuUtil.default.flatten(this.state.children, true);
      var totalOptions = options.length;
      var index = _MenuUtil.default.getIndex(options, this.state.active);
      if (keyCode === KeyCode.KEY_UP) {
        this.clearScrollTimeout();
        this.scrollTimeout = setTimeout(this.clearScrollTimeout, 500);
        this.setState({
          active: _MenuUtil.default.findPrevious(children, active)
        }, this.scrollIntoView);
        this.updateCurrentActiveScreenReader();
      } else if (keyCode === KeyCode.KEY_DOWN) {
        this.clearScrollTimeout();
        this.scrollTimeout = setTimeout(this.clearScrollTimeout, 500);
        this.setState({
          active: _MenuUtil.default.findNext(children, active)
        }, this.scrollIntoView);
        this.updateCurrentActiveScreenReader();
      } else if (keyCode === KeyCode.KEY_RETURN && active !== null && !_MenuUtil.default.includes(value, active)) {
        event.preventDefault();
        var option = _MenuUtil.default.findByValue(children, active);
        // Handles communicating the case where a regular option is selected to screen readers.
        if (visuallyHiddenComponent && visuallyHiddenComponent.current) {
          visuallyHiddenComponent.current.innerHTML = intl.formatMessage({
            id: 'Terra.form.select.selectedText'
          }, {
            text: option.props.display,
            index: index,
            totalOptions: totalOptions
          });
        }
        if (onSelect) {
          onSelect(option.props.value, option);
        }
      } else if (keyCode === KeyCode.KEY_RETURN && active !== null && _MenuUtil.default.includes(value, active)) {
        event.preventDefault();
        var _option = _MenuUtil.default.findByValue(children, active);
        // Handles communicating the case where a regular option is Unselected to screen readers.
        if (visuallyHiddenComponent && visuallyHiddenComponent.current) {
          visuallyHiddenComponent.current.innerHTML = intl.formatMessage({
            id: 'Terra.form.select.unselectedText'
          }, {
            text: _option.props.display
          });
        }
        if (onDeselect) {
          onDeselect(_option.props.value, _option);
        }
      } else if (keyCode === KeyCode.KEY_HOME) {
        event.preventDefault();
        this.setState({
          active: _MenuUtil.default.findFirst(children)
        });
      } else if (keyCode === KeyCode.KEY_END) {
        event.preventDefault();
        this.setState({
          active: _MenuUtil.default.findLast(children)
        });
      }
    }

    /**
     * Communicates the selection or deselection of an option.
     * @param {event} event - The click event triggering the callback.
     * @param {ReactNode} option - The option that was clicked.
     */
  }, {
    key: "handleOptionClick",
    value: function handleOptionClick(event, option) {
      if (option.props.disabled || option !== this.downOption) {
        return;
      }
      var options = _MenuUtil.default.flatten(this.state.children, true);
      var totalOptions = options.length;
      var index = _MenuUtil.default.getIndex(options, this.state.active);
      var _this$props2 = this.props,
        input = _this$props2.input,
        onDeselect = _this$props2.onDeselect,
        onSelect = _this$props2.onSelect,
        value = _this$props2.value,
        intl = _this$props2.intl,
        visuallyHiddenComponent = _this$props2.visuallyHiddenComponent;
      var shouldUnselectOption = _MenuUtil.default.includes(value, option.props.value);
      var optionATClickText = shouldUnselectOption ? intl.formatMessage({
        id: 'Terra.form.select.unselectedText'
      }, {
        text: option.props.display
      }) : intl.formatMessage({
        id: 'Terra.form.select.selectedText'
      }, {
        text: option.props.display,
        index: index,
        totalOptions: totalOptions
      });
      if (visuallyHiddenComponent && visuallyHiddenComponent.current) {
        visuallyHiddenComponent.current.innerHTML = optionATClickText;
      }
      if (shouldUnselectOption) {
        if (onDeselect) {
          onDeselect(option.props.value, option);
        }
      } else {
        if (onSelect) {
          onSelect(option.props.value, option);
        }
        if (input) {
          input.focus();
        }
      }
    }

    /**
     * Sets the hovered option as the active value.
     * @param {event} event - The mouse enter event.
     * @param {ReactNode} option - The option that received the mouse enter event.
     */
  }, {
    key: "handleMouseEnter",
    value: function handleMouseEnter(event, option) {
      // Prevents setting the active option on mouse enter if the keyboard scrolled the view.
      if (this.scrollTimeout) {
        return;
      }
      if (!option.props.disabled) {
        this.setState({
          active: option.props.value
        });
      }
      if (option.props.onMouseEnter) {
        option.props.onMouseEnter(event);
      }
    }
  }, {
    key: "isActiveSelected",
    value: function isActiveSelected() {
      return this.props.value.includes(this.state.active);
    }
  }, {
    key: "updateNoResultsScreenReader",
    value: function updateNoResultsScreenReader() {
      var _this2 = this;
      if (this.liveRegionTimeOut) {
        clearTimeout(this.liveRegionTimeOut);
      }
      this.liveRegionTimeOut = setTimeout(function () {
        var _this2$state = _this2.state,
          hasMaxSelection = _this2$state.hasMaxSelection,
          hasNoResults = _this2$state.hasNoResults;
        var _this2$props = _this2.props,
          intl = _this2$props.intl,
          visuallyHiddenComponent = _this2$props.visuallyHiddenComponent,
          searchValue = _this2$props.searchValue;

        // Race condition can occur between calling timeout and unmounting this component.
        if (!visuallyHiddenComponent || !visuallyHiddenComponent.current) {
          return;
        }
        if (hasNoResults) {
          visuallyHiddenComponent.current.innerText = intl.formatMessage({
            id: 'Terra.form.select.noResults'
          }, {
            text: searchValue
          });
        } else if (hasMaxSelection) {
          visuallyHiddenComponent.current.innerText = intl.formatMessage({
            id: 'Terra.form.select.maxSelectionOption'
          }, {
            text: _this2.props.maxSelectionCount
          });
        } else {
          visuallyHiddenComponent.current.innerText = '';
        }
      }, 1000);
    }
  }, {
    key: "updateCurrentActiveScreenReader",
    value: function updateCurrentActiveScreenReader() {
      var _this$props3 = this.props,
        intl = _this$props3.intl,
        visuallyHiddenComponent = _this$props3.visuallyHiddenComponent;
      var options = _MenuUtil.default.flatten(this.state.children, true);
      var totalOptions = options.length;
      var clearSelectTxt = intl.formatMessage({
        id: 'Terra.form.select.clearSelect'
      });
      if (this.menu !== null && this.state.active !== null) {
        this.menu.setAttribute('aria-activedescendant', "terra-select-option-".concat(this.state.active));
      }

      // Announces options to screen readers as user navigates through them via keyboard
      if (!visuallyHiddenComponent || !visuallyHiddenComponent.current) {
        return;
      }
      var optGroupElement = _MenuUtil.default.getOptGroupElement(this.props.children, this.state.active);
      var element = _MenuUtil.default.findByValue(this.props.children, this.state.active);
      var displayText;
      if (optGroupElement) {
        displayText = intl.formatMessage({
          id: 'Terra.form.select.optGroup'
        }, {
          text: "".concat(optGroupElement.props.label, ", ").concat(element.props.display)
        });
      } else if (element) {
        displayText = element.props.display;
      }
      if (element) {
        var index = _MenuUtil.default.getIndex(options, this.state.active);
        if (element.props.display === '' && element.props.value === '') {
          // Used for case where users selects clear option and opens
          // dropdown again and navigates to clear option
          visuallyHiddenComponent.current.innerText = clearSelectTxt;
        } else if (this.isActiveSelected()) {
          visuallyHiddenComponent.current.innerText = intl.formatMessage({
            id: 'Terra.form.select.selectedText'
          }, {
            text: displayText,
            index: index,
            totalOptions: totalOptions
          });
        } else {
          visuallyHiddenComponent.current.innerText = intl.formatMessage({
            id: 'Terra.form.select.activeOption'
          }, {
            text: displayText,
            index: index,
            totalOptions: totalOptions
          });
        }
      }
    }

    /**
     * Clears the scroll timeout.
     */
  }, {
    key: "clearScrollTimeout",
    value: function clearScrollTimeout() {
      clearTimeout(this.scrollTimeout);
      this.scrollTimeout = null;
    }

    /**
     * Clones the menu content with the necessary events.
     * @param {ReactNode} object - The node being cloned.
     * @return {array} - A cloned copy of the object.
     */
  }, {
    key: "clone",
    value: function clone(object) {
      var _this3 = this;
      return _react.default.Children.map(object, function (option) {
        if (option.type.isOption) {
          return /*#__PURE__*/_react.default.cloneElement(option, _objectSpread({
            id: "terra-select-option-".concat(option.props.value),
            isActive: option.props.value === _this3.state.active,
            isCheckable: true,
            isSelected: _MenuUtil.default.isSelected(_this3.props.value, option.props.value),
            variant: 'multiple',
            onMouseDown: function onMouseDown() {
              _this3.downOption = option;
            },
            onMouseUp: function onMouseUp(event) {
              return _this3.handleOptionClick(event, option);
            },
            onMouseEnter: function onMouseEnter(event) {
              return _this3.handleMouseEnter(event, option);
            }
          }, option.props.value === _this3.state.active && {
            'data-select-active': true
          }));
        }
        if (option.type.isOptGroup) {
          return /*#__PURE__*/_react.default.cloneElement(option, {}, _this3.clone(option.props.children));
        }
        return option;
      });
    }

    /**
     * Scrolls the active option into view.
     * Options already in view will not scroll.
     * Options above the dropdown will be scrolled to the top of the menu.
     * Options below the dropdown will be scrolled to the bottom of the menu.
     */
  }, {
    key: "scrollIntoView",
    value: function scrollIntoView() {
      var activeOption = this.menu.querySelector('[data-select-active]');
      if (!this.state.active || activeOption === null) {
        return;
      }
      var dropdownRect = this.menu.parentNode.getBoundingClientRect();
      var optionRect = activeOption.getBoundingClientRect();
      if (optionRect.top < dropdownRect.top) {
        this.menu.parentNode.scrollTop = activeOption.offsetTop;
      } else if (optionRect.bottom > dropdownRect.bottom) {
        // To scroll to active option to top subtracting active option offsetTop with parent window's height.
        this.menu.parentNode.scrollTop = activeOption.offsetTop - dropdownRect.height + optionRect.height;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;
      var _this$props4 = this.props,
        id = _this$props4.id,
        intl = _this$props4.intl,
        refCallback = _this$props4.refCallback;
      var theme = this.context;
      return (
        /*#__PURE__*/
        /**
         * Note: role="listbox" and aria-activedescendant needed for VoiceOver on iOS to properly
         * shift the virtual indicator to this DOM element when dropdown is rendered. If you modify these
         * attributes, you'll need to manually verify that the virtual indicator on iOS is still shifted
         * to the dropdown / the selected item in the dropdown if an item is selected when the dropdown
         * is opened.
         */
        _react.default.createElement("ul", _extends({
          id: id,
          role: "listbox",
          className: cx('menu', theme.className),
          "aria-label": intl.formatMessage({
            id: 'Terra.form.select.menu'
          }),
          ref: function ref(menu) {
            if (refCallback) {
              refCallback(menu);
            }
            _this4.menu = menu;
          }
        }, this.state.active !== null ? {
          'aria-activedescendant': "terra-select-option-".concat(this.state.active)
        } : {}, {
          tabIndex: "0"
        }), this.clone(this.state.children))
      );
    }
  }], [{
    key: "isMaxSelectionReached",
    value: function isMaxSelectionReached(props) {
      var maxSelectionCount = props.maxSelectionCount,
        value = props.value;
      if (maxSelectionCount !== undefined && value && value.length >= maxSelectionCount) {
        return true;
      }
      return false;
    }
  }, {
    key: "getActiveOptionFromProps",
    value: function getActiveOptionFromProps(props, children, state) {
      var active = state.active;
      var searchValue = props.searchValue,
        value = props.value;
      var options = _MenuUtil.default.flatten(children, true);
      if (options.length === 0) {
        return null;
      }
      if (active !== null && _MenuUtil.default.findByValue(options, active)) {
        return active;
      }
      if (state.searchValue === undefined) {
        var selected = options.find(function (option) {
          return _MenuUtil.default.includes(value, option.props.value);
        });
        return selected === undefined ? options[0].props.value : selected.props.value;
      }
      if (searchValue !== state.searchValue) {
        return options[0].props.value;
      }
      return options[0].props.value;
    }
  }, {
    key: "updateSelectionState",
    value: function updateSelectionState(object, props) {
      var maxSelectionCountReached = Menu.isMaxSelectionReached(props);
      return _react.default.Children.map(object, function (child) {
        if (child.type.isOption) {
          return /*#__PURE__*/_react.default.cloneElement(child, {
            disabled: child.props.disabled || maxSelectionCountReached && !_MenuUtil.default.isSelected(props.value, child.props.value)
          });
        }
        if (child.type.isOptGroup) {
          return /*#__PURE__*/_react.default.cloneElement(child, {}, Menu.updateSelectionState(child.props.children, props));
        }
        return child;
      });
    }
  }, {
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var maxSelectionCount = props.maxSelectionCount,
        searchValue = props.searchValue,
        noResultContent = props.noResultContent;
      var children;
      var hasNoResults = false;
      var hasMaxSelection = false;
      if (searchValue && searchValue.length > 0 && Menu.isMaxSelectionReached(props)) {
        children = [/*#__PURE__*/_react.default.createElement(_MaxSelection.default, {
          value: maxSelectionCount
        })];
        hasMaxSelection = true;
      } else {
        children = _MenuUtil.default.filter(props.children, props.searchValue, props.optionFilter);
        children = Menu.updateSelectionState(children, props);
        if (!children.length) {
          children.push( /*#__PURE__*/_react.default.createElement(_NoResults.default, {
            noResultContent: noResultContent,
            value: searchValue
          }));
          hasNoResults = true;
        }
      }
      return {
        children: children,
        searchValue: searchValue,
        hasMaxSelection: hasMaxSelection,
        hasNoResults: hasNoResults,
        active: Menu.getActiveOptionFromProps(props, children, state)
      };
    }
  }]);
  return Menu;
}(_react.default.Component);
Menu.propTypes = propTypes;
Menu.defaultProps = defaultProps;
Menu.contextType = _terraThemeContext.default;

/**
 * This polyfill enables backwards compatibility of features added in React 16.3.0.
 * More information is available at: https://github.com/reactjs/react-lifecycles-compat
 */
(0, _reactLifecyclesCompat.polyfill)(Menu);
var _default = (0, _reactIntl.injectIntl)(Menu);
exports.default = _default;