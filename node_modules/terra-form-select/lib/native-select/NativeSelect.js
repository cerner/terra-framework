"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _reactIntl = require("react-intl");
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _NativeUtils = require("./_NativeUtils");
var _NativePropTypes = require("./_NativePropTypes");
var _NativeSelectModule = _interopRequireDefault(require("./NativeSelect.module.scss"));
var _excluded = ["ariaDescribedBy", "ariaLabel", "attrs", "disabled", "defaultValue", "id", "intl", "isFilterStyle", "isInvalid", "isIncomplete", "onBlur", "onChange", "onFocus", "onMouseDown", "options", "refCallback", "required", "value"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var cx = _bind.default.bind(_NativeSelectModule.default);
var propTypes = {
  /**
   * The string containing ids for elements to describe the select.
   */
  ariaDescribedBy: _propTypes.default.string,
  /**
   * The aria label string value for the select.
   */
  ariaLabel: _propTypes.default.string.isRequired,
  /**
   * Additional attributes to spread directly onto the html select node.
   * This prop is provided as standard customProps are spread onto the outer containing element which is not the html select in this case.
   */
  // eslint-disable-next-line react/forbid-prop-types
  attrs: _propTypes.default.object,
  /**
   * The default value of the select. Can be a string, or number.
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  /**
   * Whether the input is disabled.
   */
  disabled: _propTypes.default.bool,
  /**
   * The Select identifier to be applied to the html select node.
   */
  id: _propTypes.default.string,
  /**
   * @private
   * The intl object to be injected for translations.
   */
  intl: _propTypes.default.shape({
    formatMessage: _propTypes.default.func
  }).isRequired,
  /**
   * Whether the select input should use the filter style display, forcing a value to always be selected.
   * This also removes the placeholder and removes the ability for user to clear the value, returning the select to browser-native behavior.
   */
  isFilterStyle: _propTypes.default.bool,
  /**
   * Whether the input is invalid.
   */
  isInvalid: _propTypes.default.bool,
  /**
   * Whether the field displays as Incomplete. Use when no value has been provided. _(usage note: `required` must also be set)_.
   */
  isIncomplete: _propTypes.default.bool,
  /**
   * Callback function triggered when the select value changes. function(event)
   */
  onChange: _propTypes.default.func,
  /**
   * The array of select options and opt groups.
   */
  options: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_NativePropTypes.optionPropType, _NativePropTypes.optGroupPropType])),
  /**
   * Callback ref to pass into the select input component.
   */
  refCallback: _propTypes.default.func,
  /**
   * Whether the field is required.
   */
  required: _propTypes.default.bool,
  /**
   * The value of the select. Can be a string or number.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  /**
   * @private Callback function not intended for use with this API, but if set pass it through to the element regardless.
   */
  onBlur: _propTypes.default.func,
  /**
   * @private Callback function not intended for use with this API, but if set pass it through to the element regardless.
   */
  onFocus: _propTypes.default.func,
  /**
   * @private Callback function not intended for use with this API, but if set pass it through to the element regardless.
   */
  onMouseDown: _propTypes.default.func
};
var defaultProps = {
  disabled: false,
  isFilterStyle: false,
  isIncomplete: false,
  isInvalid: false,
  options: [],
  required: false
};
var createPlaceholder = function createPlaceholder(isFilterStyle, intl) {
  if (isFilterStyle) {
    return undefined;
  }
  return /*#__PURE__*/_react.default.createElement("option", {
    value: _NativeUtils.defaultPlaceholderValue
  }, intl.formatMessage({
    id: 'Terra.form.select.defaultDisplay'
  }));
};
var createOptions = function createOptions(options) {
  var currentOptGroupKeys = [];
  return options.map(function (current) {
    var attr = current.disabled ? {
      disabled: true
    } : undefined;
    if (current.options) {
      var optGroupKeyIndex = (0, _NativeUtils.getOptGroupKeyIndex)(current.display, currentOptGroupKeys);
      var optGroupKey = (0, _NativeUtils.getOptGroupKey)(current.display, optGroupKeyIndex);
      currentOptGroupKeys.push(optGroupKey);
      return /*#__PURE__*/_react.default.createElement("optgroup", _extends({}, attr, {
        key: optGroupKey,
        label: current.display
      }), createOptions(current.options));
    }
    return /*#__PURE__*/_react.default.createElement("option", _extends({}, attr, {
      key: "".concat(current.value),
      value: current.value
    }), current.display);
  });
};
var NativeSelect = function NativeSelect(_ref) {
  var ariaDescribedBy = _ref.ariaDescribedBy,
    ariaLabel = _ref.ariaLabel,
    attrs = _ref.attrs,
    disabled = _ref.disabled,
    defaultValue = _ref.defaultValue,
    id = _ref.id,
    intl = _ref.intl,
    isFilterStyle = _ref.isFilterStyle,
    isInvalid = _ref.isInvalid,
    isIncomplete = _ref.isIncomplete,
    onBlur = _ref.onBlur,
    onChange = _ref.onChange,
    onFocus = _ref.onFocus,
    onMouseDown = _ref.onMouseDown,
    options = _ref.options,
    refCallback = _ref.refCallback,
    required = _ref.required,
    value = _ref.value,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var _useState = (0, _react.useState)(!(0, _NativeUtils.isValuePresent)(value) ? defaultValue || (0, _NativeUtils.getFirstValue)(options, isFilterStyle) : undefined),
    _useState2 = _slicedToArray(_useState, 2),
    uncontrolledValue = _useState2[0],
    setUncontrolledValue = _useState2[1];
  var refIsControlled = (0, _react.useRef)((0, _NativeUtils.isValuePresent)(value));
  var refSelect = (0, _react.useRef)();
  var theme = _react.default.useContext(_terraThemeContext.default);

  // The native select's presentation is masked to allow for better customization of the inputs display.
  // In order to facilitate this, the mouseDown, blur, and focus events need to be mapped mapped to the mask.
  var handleOnMouseDown = function handleOnMouseDown(event) {
    refSelect.current.setAttribute('data-focus-interaction', 'mouse');
    if (onMouseDown) {
      onMouseDown(event);
    }
  };
  var handleOnBlur = function handleOnBlur(event) {
    refSelect.current.setAttribute('data-focus-interaction', 'none');
    if (onBlur) {
      onBlur(event);
    }
  };
  var handleOnFocus = function handleOnFocus(event) {
    if (refSelect.current.getAttribute('data-focus-interaction') !== 'mouse') {
      refSelect.current.setAttribute('data-focus-interaction', 'keyboard');
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  var handleOnChange = function handleOnChange(event) {
    if (!refIsControlled.current) {
      setUncontrolledValue(event.currentTarget.value);
    }
    if (onChange) {
      onChange(event);
    }
  };
  var currentValue = refIsControlled.current ? value : uncontrolledValue;
  var currentDisplay = (0, _NativeUtils.getDisplay)(currentValue, options, isFilterStyle, intl);
  if (!currentDisplay) {
    currentValue = (0, _NativeUtils.getFirstValue)(options, isFilterStyle);
    currentDisplay = (0, _NativeUtils.getDisplay)(currentValue, options, isFilterStyle, intl);
  }
  var selectAttrs = {
    'aria-describedby': ariaDescribedBy,
    'aria-label': ariaLabel,
    id: id,
    disabled: disabled,
    'aria-invalid': isInvalid || undefined,
    required: required,
    value: currentValue
  };
  var nativeClassNames = (0, _classnames.default)(cx('native', theme.className, {
    disabled: disabled
  }, {
    invalid: isInvalid
  }, {
    incomplete: required && isIncomplete
  }, {
    placeholder: (0, _NativeUtils.isCurrentPlaceholder)(selectAttrs.value, isFilterStyle)
  }), customProps.className);
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, customProps, {
    className: nativeClassNames,
    ref: refSelect,
    "data-focus-interaction": "none"
  }), /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    className: cx('frame')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('display'),
    "aria-disabled": disabled || undefined
  }, currentDisplay), /*#__PURE__*/_react.default.createElement("div", {
    className: cx('arrow')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('arrow-icon')
  }))), /*#__PURE__*/_react.default.createElement("select", _extends({}, attrs, selectAttrs, {
    className: cx('select'),
    onChange: handleOnChange,
    onMouseDown: handleOnMouseDown,
    onFocus: handleOnFocus,
    onBlur: handleOnBlur,
    ref: refCallback
  }), createPlaceholder(isFilterStyle, intl), createOptions(options)));
};
NativeSelect.propTypes = propTypes;
NativeSelect.defaultProps = defaultProps;
var _default = (0, _reactIntl.injectIntl)(NativeSelect);
exports.default = _default;