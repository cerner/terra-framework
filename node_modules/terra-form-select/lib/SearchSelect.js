"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactIntl = require("react-intl");
var _Frame = _interopRequireDefault(require("./search/Frame"));
var _Option = _interopRequireDefault(require("./shared/_Option"));
var _OptGroup = _interopRequireDefault(require("./shared/_OptGroup"));
var _SelectUtil = _interopRequireDefault(require("./shared/_SelectUtil"));
var _excluded = ["allowClear", "children", "defaultValue", "onChange", "placeholder", "required", "value", "intl", "inputId"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var propTypes = {
  /**
   * Whether a clear option is available to clear the selection, will use placeholder text if provided.
   */
  allowClear: _propTypes.default.bool,
  /**
   * The dropdown menu options.
   */
  children: _propTypes.default.node,
  /**
   * The default selected value. Can be a string, number, or array of strings/numbers.
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array]),
  /**
   * Whether the select is disabled.
   */
  disabled: _propTypes.default.bool,
  /**
   * Additional attributes to spread onto the dropdown. ( Style, ClassNames, etc.. )
   */
  // eslint-disable-next-line react/forbid-prop-types
  dropdownAttrs: _propTypes.default.object,
  /**
   * @private
   * The intl object containing translations. This is retrieved from the context automatically by injectIntl.
   */
  intl: _propTypes.default.shape({
    formatMessage: _propTypes.default.func
  }).isRequired,
  /**
   * Whether the select displays as Incomplete. Use when no value has been provided. _(usage note: `required` must also be set)_.
   */
  isIncomplete: _propTypes.default.bool,
  /**
   * Whether the select displays as Invalid. Use when value does not meet validation pattern.
   */
  isInvalid: _propTypes.default.bool,
  /**
   * Ensures touch accessibility by rendering the dropdown inline without a portal.
   *
   * Note: When enabled the dropdown will clip if rendered within a container that has an overflow: hidden ancestor.
   * The dropdown may also appear beneath content if rendered within a container that has an overflow: auto ancestor.
   */
  isTouchAccessible: _propTypes.default.bool,
  /**
   * The max height of the dropdown.
   */
  maxHeight: _propTypes.default.number,
  /**
   * Content to display when no results are found.
   */
  noResultContent: _propTypes.default.node,
  /**
   * Callback function triggered when the select loses focus. function(event)
   */
  onBlur: _propTypes.default.func,
  /**
   * Callback function triggered when the value changes. function(value)
   */
  onChange: _propTypes.default.func,
  /**
   * Callback function triggered when the select is clicked. function(event)
   */
  onClick: _propTypes.default.func,
  /**
   * Callback function triggered when an option is deselected. function(value)
   */
  onDeselect: _propTypes.default.func,
  /**
   * Callback function triggered when the select receives focus. function(event)
   */
  onFocus: _propTypes.default.func,
  /**
   * Callback function triggered when the search criteria changes. function(searchValue)
   */
  onSearch: _propTypes.default.func,
  /**
   * Callback function triggered when an option is selected. function(value)
   */
  onSelect: _propTypes.default.func,
  /**
   * Callback function invoked for each option on search change. function(searchValue, option)
   */
  optionFilter: _propTypes.default.func,
  /**
   * Placeholder text.
   */
  placeholder: _propTypes.default.string,
  /**
   * Whether the field is required.
   */
  required: _propTypes.default.bool,
  /**
   * The selected value. Can be a string, number, or array of strings/numbers.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array]),
  /**
   * @private
   * The id of the input field.
   */
  inputId: _propTypes.default.string
};
var defaultProps = {
  allowClear: false,
  children: undefined,
  defaultValue: undefined,
  disabled: false,
  dropdownAttrs: undefined,
  isIncomplete: false,
  isInvalid: false,
  noResultContent: undefined,
  onChange: undefined,
  onDeselect: undefined,
  onSearch: undefined,
  onSelect: undefined,
  optionFilter: undefined,
  placeholder: undefined,
  required: false,
  isTouchAccessible: false,
  value: undefined,
  inputId: undefined
};
var SearchSelect = /*#__PURE__*/function (_React$Component) {
  _inherits(SearchSelect, _React$Component);
  var _super = _createSuper(SearchSelect);
  function SearchSelect(props) {
    var _this;
    _classCallCheck(this, SearchSelect);
    _this = _super.call(this, props);
    var defaultValue = props.defaultValue,
      value = props.value;
    _this.state = {
      value: _SelectUtil.default.defaultValue({
        defaultValue: defaultValue,
        value: value
      })
    };
    _this.display = _this.display.bind(_assertThisInitialized(_this));
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.handleDeselect = _this.handleDeselect.bind(_assertThisInitialized(_this));
    _this.handleSelect = _this.handleSelect.bind(_assertThisInitialized(_this));
    return _this;
  }

  /**
   * Communicates changes to the value.
   * @param {array|number|string} value - The value resulting from a change.
   */
  _createClass(SearchSelect, [{
    key: "handleChange",
    value: function handleChange(value) {
      if (this.props.value === undefined) {
        this.setState({
          value: value
        });
      }
      if (this.props.onChange) {
        this.props.onChange(value);
      }
    }

    /**
     * Communicates the removal of a value from the selected options.
     * @param {number|string} value - The value to be removed.
     */
  }, {
    key: "handleDeselect",
    value: function handleDeselect(value) {
      this.handleChange(_SelectUtil.default.deselect(this.props, this.state, value));
      if (this.props.onDeselect) {
        this.props.onDeselect(value);
      }
    }

    /**
     * Communicates the selection of a value.
     * @param {number|string} value - The value of the selected option.
     * @param {ReactNode} option - The selected option.
     */
  }, {
    key: "handleSelect",
    value: function handleSelect(value, option) {
      this.handleChange(_SelectUtil.default.select(this.props, this.state, value));
      if (this.props.onSelect) {
        this.props.onSelect(value, option);
      }
    }

    /**
     * Returns the appropriate variant display
     */
  }, {
    key: "display",
    value: function display() {
      var selectValue = _SelectUtil.default.value(this.props, this.state);
      return _SelectUtil.default.valueDisplay(this.props, selectValue);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        allowClear = _this$props.allowClear,
        children = _this$props.children,
        defaultValue = _this$props.defaultValue,
        onChange = _this$props.onChange,
        placeholder = _this$props.placeholder,
        required = _this$props.required,
        value = _this$props.value,
        intl = _this$props.intl,
        inputId = _this$props.inputId,
        otherProps = _objectWithoutProperties(_this$props, _excluded);
      var defaultPlaceholder = intl.formatMessage({
        id: 'Terra.form.select.defaultDisplay'
      });
      var selectPlaceholder = placeholder === undefined ? defaultPlaceholder : placeholder;
      var clearOptionDisplay;
      if (allowClear) {
        if (selectPlaceholder.length === 0) {
          clearOptionDisplay = defaultPlaceholder;
        } else {
          clearOptionDisplay = selectPlaceholder;
        }
      }
      return /*#__PURE__*/_react.default.createElement(_Frame.default, _extends({}, otherProps, {
        "data-terra-select": true,
        value: _SelectUtil.default.value(this.props, this.state),
        display: this.display(),
        onDeselect: this.handleDeselect,
        onSelect: this.handleSelect,
        placeholder: selectPlaceholder,
        required: required,
        totalOptions: _SelectUtil.default.getTotalNumberOfOptions(children),
        clearOptionDisplay: clearOptionDisplay,
        inputId: inputId
      }), children);
    }
  }]);
  return SearchSelect;
}(_react.default.Component);
SearchSelect.Option = _Option.default;
SearchSelect.OptGroup = _OptGroup.default;
SearchSelect.propTypes = propTypes;
SearchSelect.defaultProps = defaultProps;
SearchSelect.isSelect = true;
var _default = (0, _reactIntl.injectIntl)(SearchSelect);
exports.default = _default;