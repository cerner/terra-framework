"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _terraFormField = _interopRequireDefault(require("terra-form-field"));
var _Combobox = _interopRequireDefault(require("./Combobox"));
var _OptGroup = _interopRequireDefault(require("./shared/_OptGroup"));
var _Option = _interopRequireDefault(require("./shared/_Option"));
var _excluded = ["allowClear", "children", "defaultValue", "disabled", "error", "help", "hideRequired", "isIncomplete", "isInline", "isInvalid", "isLabelHidden", "isTouchAccessible", "label", "labelAttrs", "maxHeight", "maxWidth", "onChange", "placeholder", "required", "selectAttrs", "selectId", "showOptional", "value"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var propTypes = {
  /**
   * Whether a clear option is available to clear the selection.
   */
  allowClear: _propTypes.default.bool,
  /**
   * The select options.
   */
  children: _propTypes.default.node,
  /**
   * The field label.
   */
  label: _propTypes.default.string.isRequired,
  /**
   * The default value of the select. Can be a string, number, or array of strings/numbers.
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array]),
  /**
   * Whether the input is disabled.
   */
  disabled: _propTypes.default.bool,
  /**
   * Error message displayed when the select is invalid.
   */
  error: _propTypes.default.node,
  /**
   * Help message to display with the select.
   */
  help: _propTypes.default.node,
  /**
   * Whether to hide the required indicator on the label.
   */
  hideRequired: _propTypes.default.bool,
  /**
   * Whether the field displays as Incomplete. Use when no value has been provided. _(usage note: `required` must also be set)_.
   */
  isIncomplete: _propTypes.default.bool,
  /**
   * Whether the field is displayed inline. Displays block by default.
   */
  isInline: _propTypes.default.bool,
  /**
   * Whether the field displays as Invalid. Use when value does not meet validation pattern.
   */
  isInvalid: _propTypes.default.bool,
  /**
   * Whether the label is hidden. Allows hiding the label while meeting accessibility guidelines.
   */
  isLabelHidden: _propTypes.default.bool,
  /**
   * Ensures touch accessibility by rendering the dropdown inline without a portal.
   *
   * Note: When enabled the dropdown will clip if rendered within a container that has an overflow: hidden ancestor.
   * The dropdown may also appear beneath content if rendered within a container that has an overflow: auto ancestor.
   */
  isTouchAccessible: _propTypes.default.bool,
  /**
   * Additional attributes to spread onto the label.
   */
  // eslint-disable-next-line react/forbid-prop-types
  labelAttrs: _propTypes.default.object,
  /**
   * The max height of the dropdown.
   */
  maxHeight: _propTypes.default.number,
  /**
   * Set the max-width of a field using `length` or `%`.  Best practice recommendation to never exceed
   * a rendered value of 1020px. _(Note: Providing custom inline styles will take precedence.)_
   */
  maxWidth: _propTypes.default.string,
  /**
   * Callback function triggered when the select value changes. function(value)
   */
  onChange: _propTypes.default.func,
  /**
   * Placeholder text.
   */
  placeholder: _propTypes.default.string,
  /**
   * Whether the field is required.
   */
  required: _propTypes.default.bool,
  /**
   * Additional attributes to spread onto the select.
   */
  // eslint-disable-next-line react/forbid-prop-types
  selectAttrs: _propTypes.default.object,
  /**
   * The Select identifier. Links the htmlFor of the field to the select identifier.
   */
  selectId: _propTypes.default.string.isRequired,
  /**
   * Whether to append the 'optional' label to a non-required field label.
   */
  showOptional: _propTypes.default.bool,
  /**
   * The value of the select. Can be a string, number, or array of strings/numbers.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array])
};
var defaultProps = {
  allowClear: false,
  children: undefined,
  defaultValue: undefined,
  disabled: false,
  error: undefined,
  help: undefined,
  hideRequired: false,
  isIncomplete: false,
  isInline: false,
  isInvalid: false,
  isTouchAccessible: false,
  isLabelHidden: false,
  labelAttrs: {},
  maxHeight: undefined,
  maxWidth: undefined,
  onChange: undefined,
  placeholder: undefined,
  required: false,
  selectAttrs: {},
  showOptional: false,
  value: undefined
};
var ComboboxField = function ComboboxField(_ref) {
  var allowClear = _ref.allowClear,
    children = _ref.children,
    defaultValue = _ref.defaultValue,
    disabled = _ref.disabled,
    error = _ref.error,
    help = _ref.help,
    hideRequired = _ref.hideRequired,
    isIncomplete = _ref.isIncomplete,
    isInline = _ref.isInline,
    isInvalid = _ref.isInvalid,
    isLabelHidden = _ref.isLabelHidden,
    isTouchAccessible = _ref.isTouchAccessible,
    label = _ref.label,
    labelAttrs = _ref.labelAttrs,
    maxHeight = _ref.maxHeight,
    maxWidth = _ref.maxWidth,
    onChange = _ref.onChange,
    placeholder = _ref.placeholder,
    required = _ref.required,
    selectAttrs = _ref.selectAttrs,
    selectId = _ref.selectId,
    showOptional = _ref.showOptional,
    value = _ref.value,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var ariaDescriptionIds;
  if (help && error && isInvalid) {
    ariaDescriptionIds = "".concat(selectId, "-error ").concat(selectId, "-help");
  } else {
    if (help) {
      ariaDescriptionIds = "".concat(selectId, "-help");
    }
    if (error && isInvalid) {
      ariaDescriptionIds = "".concat(selectId, "-error");
    }
  }
  return /*#__PURE__*/_react.default.createElement(_terraFormField.default, _extends({}, customProps, {
    label: label,
    labelAttrs: labelAttrs,
    error: error,
    help: help,
    hideRequired: hideRequired,
    required: required,
    showOptional: showOptional,
    isInvalid: isInvalid,
    isInline: isInline,
    isLabelHidden: isLabelHidden,
    htmlFor: selectId,
    maxWidth: maxWidth
  }), /*#__PURE__*/_react.default.createElement(_Combobox.default, _extends({}, selectAttrs, {
    ariaLabel: label,
    allowClear: allowClear,
    "aria-describedby": ariaDescriptionIds,
    disabled: selectAttrs.disabled || disabled,
    inputId: selectId,
    isIncomplete: isIncomplete,
    isInvalid: isInvalid,
    isTouchAccessible: isTouchAccessible,
    defaultValue: defaultValue,
    maxHeight: maxHeight || selectAttrs.maxHeight,
    onChange: onChange,
    placeholder: placeholder,
    required: required,
    value: value
  }), children));
};
ComboboxField.propTypes = propTypes;
ComboboxField.defaultProps = defaultProps;
ComboboxField.Option = _Option.default;
ComboboxField.OptGroup = _OptGroup.default;
var _default = ComboboxField;
exports.default = _default;