"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// libs/commands/bootstrap/src/lib/has-dependency-installed.ts
var require_has_dependency_installed = __commonJS({
  "libs/commands/bootstrap/src/lib/has-dependency-installed.ts"(exports2, module2) {
    "use strict";
    var import_npmlog = __toESM(require("npmlog"));
    var import_arborist = __toESM(require("@npmcli/arborist"));
    var import_semver = __toESM(require("semver"));
    var cache = /* @__PURE__ */ new Map();
    module2.exports.hasDependencyInstalled = hasDependencyInstalled;
    function hasDependencyInstalled(pkg, depName, needVersion) {
      import_npmlog.default.silly("hasDependencyInstalled", pkg.name, depName);
      return getInstalled(pkg).then(
        (versions) => versions.has(depName) && import_semver.default.satisfies(versions.get(depName), needVersion)
      );
    }
    function getInstalled(pkg) {
      if (cache.has(pkg)) {
        return Promise.resolve(cache.get(pkg));
      }
      const arb = new import_arborist.default({
        path: pkg.location
      });
      return arb.loadActual().then((tree) => {
        const deps = /* @__PURE__ */ new Map();
        for (const [dependencyName, node] of tree.children.entries()) {
          deps.set(dependencyName, node.version);
        }
        cache.set(pkg, deps);
        return deps;
      });
    }
  }
});

// packages/lerna/src/commands/bootstrap/lib/has-dependency-installed.ts
module.exports = require_has_dependency_installed();
