"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// libs/commands/publish/src/lib/get-unpublished-packages.ts
var require_get_unpublished_packages = __commonJS({
  "libs/commands/publish/src/lib/get-unpublished-packages.ts"(exports2, module2) {
    "use strict";
    var import_npmlog = __toESM(require("npmlog"));
    var import_p_map = __toESM(require("p-map"));
    var import_pacote = __toESM(require("pacote"));
    module2.exports.getUnpublishedPackages = getUnpublishedPackages;
    function getUnpublishedPackages(packageGraph, opts) {
      import_npmlog.default.silly("getUnpublishedPackages");
      let chain = Promise.resolve();
      const graphNodesToCheck = Array.from(packageGraph.values());
      const mapper = (pkg) => import_pacote.default.packument(pkg.name, opts).then(
        (packument) => {
          if (packument.versions === void 0 || packument.versions[pkg.version] === void 0) {
            return pkg;
          }
        },
        () => {
          import_npmlog.default.warn("", "Unable to determine published version, assuming %j unpublished.", pkg.name);
          return pkg;
        }
      );
      chain = chain.then(() => (0, import_p_map.default)(graphNodesToCheck, mapper, { concurrency: 4 }));
      return chain.then((results) => results.filter(Boolean));
    }
  }
});

// packages/lerna/src/commands/publish/lib/get-unpublished-packages.ts
module.exports = require_get_unpublished_packages();
