"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// libs/commands/version/src/lib/is-behind-upstream.ts
var require_is_behind_upstream = __commonJS({
  "libs/commands/version/src/lib/is-behind-upstream.ts"(exports2, module2) {
    "use strict";
    var import_npmlog = __toESM(require("npmlog"));
    var childProcess = require("@lerna/child-process");
    module2.exports.isBehindUpstream = isBehindUpstream;
    function isBehindUpstream(gitRemote, branch, opts) {
      import_npmlog.default.silly("isBehindUpstream");
      updateRemote(opts);
      const remoteBranch = `${gitRemote}/${branch}`;
      const [behind, ahead] = countLeftRight(`${remoteBranch}...${branch}`, opts);
      import_npmlog.default.silly(
        "isBehindUpstream",
        `${branch} is behind ${remoteBranch} by ${behind} commit(s) and ahead by ${ahead}`
      );
      return Boolean(behind);
    }
    function updateRemote(opts) {
      childProcess.execSync("git", ["remote", "update"], opts);
    }
    function countLeftRight(symmetricDifference, opts) {
      const stdout = childProcess.execSync(
        "git",
        ["rev-list", "--left-right", "--count", symmetricDifference],
        opts
      );
      return stdout.split("	").map((val) => parseInt(val, 10));
    }
  }
});

// packages/lerna/src/commands/version/lib/is-behind-upstream.ts
module.exports = require_is_behind_upstream();
