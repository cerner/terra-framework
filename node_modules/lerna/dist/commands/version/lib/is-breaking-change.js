"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// libs/commands/version/src/lib/is-breaking-change.ts
var require_is_breaking_change = __commonJS({
  "libs/commands/version/src/lib/is-breaking-change.ts"(exports2, module2) {
    "use strict";
    var import_semver = __toESM(require("semver"));
    module2.exports.isBreakingChange = isBreakingChange;
    function isBreakingChange(currentVersion, nextVersion) {
      const releaseType = import_semver.default.diff(currentVersion, nextVersion);
      let breaking;
      if (releaseType === "major") {
        breaking = true;
      } else if (releaseType === "minor") {
        breaking = import_semver.default.lt(currentVersion, "1.0.0");
      } else if (releaseType === "patch") {
        breaking = import_semver.default.lt(currentVersion, "0.1.0");
      } else {
        breaking = false;
      }
      return breaking;
    }
  }
});

// packages/lerna/src/commands/version/lib/is-breaking-change.ts
module.exports = require_is_breaking_change();
