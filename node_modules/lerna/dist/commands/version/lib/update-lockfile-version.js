"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// libs/commands/version/src/lib/update-lockfile-version.ts
var require_update_lockfile_version = __commonJS({
  "libs/commands/version/src/lib/update-lockfile-version.ts"(exports2, module2) {
    "use strict";
    var import_devkit = require("@nrwl/devkit");
    var import_load_json_file = __toESM(require("load-json-file"));
    var import_npmlog = __toESM(require("npmlog"));
    var import_path = __toESM(require("path"));
    module2.exports.updateLockfileVersion = updateLockfileVersion;
    function updateLockfileVersion(pkg) {
      const lockfilePath = import_path.default.join(pkg.location, "package-lock.json");
      let chain = Promise.resolve();
      chain = chain.then(
        () => (0, import_load_json_file.default)(lockfilePath).catch(() => {
          import_npmlog.default.verbose("version", `${pkg.name} has no lockfile. Skipping lockfile update.`);
        })
      );
      chain = chain.then((obj) => {
        if (obj) {
          obj.version = pkg.version;
          if (obj.packages && obj.packages[""]) {
            obj.packages[""].version = pkg.version;
            if (obj.packages[""].dependencies) {
              const updatedPkgDependencies = Object.keys(obj.packages[""].dependencies).reduce(
                (prev, next) => ({ ...prev, [next]: pkg.dependencies[next] }),
                {}
              );
              obj.packages[""].dependencies = updatedPkgDependencies;
            }
            if (obj.packages[""].devDependencies) {
              const updatedPkgDevDependencies = Object.keys(obj.packages[""].devDependencies).reduce(
                (prev, next) => ({ ...prev, [next]: pkg.devDependencies[next] }),
                {}
              );
              obj.packages[""].devDependencies = updatedPkgDevDependencies;
            }
          }
          (0, import_devkit.writeJsonFile)(lockfilePath, obj, {
            spaces: 2
          });
          return lockfilePath;
        }
      });
      return chain;
    }
  }
});

// packages/lerna/src/commands/version/lib/update-lockfile-version.ts
module.exports = require_update_lockfile_version();
