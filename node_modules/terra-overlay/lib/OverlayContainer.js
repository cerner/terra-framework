"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _OverlayModule = _interopRequireDefault(require("./Overlay.module.scss"));
var _excluded = ["overlay", "children"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var cx = _bind.default.bind(_OverlayModule.default);
var propTypes = {
  /**
  * The overlay and the content to be displayed within the overlay.
  */
  overlay: _propTypes.default.node,
  /**
  * The elements that overlay should hide when overlay isOpen.
  * elements which are not included in overlay will be wrapped within children for better use of accessibility.
  */
  children: _propTypes.default.node
};
var defaultProps = {
  overlay: null,
  children: null
};
var OverlayContainer = function OverlayContainer(_ref) {
  var overlay = _ref.overlay,
    children = _ref.children,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var OverlayContainerClassNames = cx(['overlay-container', customProps.className]);
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, customProps, {
    className: OverlayContainerClassNames
  }), overlay, /*#__PURE__*/_react.default.createElement("div", {
    "data-terra-overlay-container-content": true,
    className: cx('container-content')
  }, children));
};
OverlayContainer.propTypes = propTypes;
OverlayContainer.defaultProps = defaultProps;
var _default = OverlayContainer;
exports.default = _default;