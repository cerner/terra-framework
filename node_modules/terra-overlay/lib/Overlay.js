"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _focusTrapReact = _interopRequireDefault(require("focus-trap-react"));
var _reactPortal = require("react-portal");
var KeyCode = _interopRequireWildcard(require("keycode-js"));
require("mutationobserver-shim");
require("./_contains-polyfill");
require("./_matches-polyfill");
var _OverlayModule = _interopRequireDefault(require("./Overlay.module.scss"));
var _OverlayContainer = _interopRequireDefault(require("./OverlayContainer"));
var _excluded = ["children", "isOpen", "backgroundStyle", "isScrollable", "isRelativeToContainer", "onRequestClose", "rootSelector", "zIndex"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var cx = _bind.default.bind(_OverlayModule.default);
var BackgroundStyles = {
  LIGHT: 'light',
  DARK: 'dark',
  CLEAR: 'clear'
};
var zIndexes = ['100', '6000', '7000', '8000', '9000'];
var propTypes = {
  /**
  * The content to be displayed within the overlay.
  */
  children: _propTypes.default.node,
  /**
  * Indicates if the overlay is open.
  */
  isOpen: _propTypes.default.bool,
  /**
  * The visual theme to be applied to the overlay background. Accepts 'light', 'dark', and 'clear'.
  */
  backgroundStyle: _propTypes.default.oneOf(['light', 'dark', 'clear']),
  /**
  * Indicates if the overlay content is scrollable.
  */
  isScrollable: _propTypes.default.bool,
  /**
  * Callback triggered on overlay click or ESC key. Setting this enables close behavior.
  */
  onRequestClose: _propTypes.default.func,
  /**
  * Indicates if the overlay is relative to the triggering container.
  */
  isRelativeToContainer: _propTypes.default.bool,
  /**
   * Used to select the root mount DOM node. This is used to help prevent focus from shifting outside of the overlay when it is opened in a portal.
   */
  rootSelector: _propTypes.default.string,
  /**
  * Z-Index layer to apply to the ModalContent and ModalOverlay. Valid values are '100', '6000', '7000', '8000', or '9000'.
  */
  zIndex: _propTypes.default.oneOf(['100', '6000', '7000', '8000', '9000'])
};
var defaultProps = {
  children: null,
  isOpen: false,
  backgroundStyle: BackgroundStyles.LIGHT,
  isScrollable: false,
  isRelativeToContainer: false,
  onRequestClose: undefined,
  rootSelector: '#root',
  zIndex: '100'
};
var Overlay = /*#__PURE__*/function (_React$Component) {
  _inherits(Overlay, _React$Component);
  var _super = _createSuper(Overlay);
  function Overlay(props) {
    var _this;
    _classCallCheck(this, Overlay);
    _this = _super.call(this, props);
    _this.setContainer = _this.setContainer.bind(_assertThisInitialized(_this));
    _this.disableContainerChildrenFocus = _this.disableContainerChildrenFocus.bind(_assertThisInitialized(_this));
    _this.enableContainerChildrenFocus = _this.enableContainerChildrenFocus.bind(_assertThisInitialized(_this));
    _this.shouldHandleESCKeydown = _this.shouldHandleESCKeydown.bind(_assertThisInitialized(_this));
    _this.shouldHandleClick = _this.shouldHandleClick.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Overlay, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // eslint-disable-next-line no-prototype-builtins
      if (!Element.prototype.hasOwnProperty('inert')) {
        // IE10 throws an error if wicg-inert is imported too early, as wicg-inert tries to set an observer on document.body which may not exist on import
        // eslint-disable-next-line global-require
        require('wicg-inert/dist/inert');
      }
      document.addEventListener('keydown', this.shouldHandleESCKeydown);
      if (this.props.isOpen) {
        this.disableContainerChildrenFocus();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.isOpen && !prevProps.isOpen) {
        this.disableContainerChildrenFocus();
      } else if (!this.props.isOpen && prevProps.isOpen) {
        this.enableContainerChildrenFocus();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('keydown', this.shouldHandleESCKeydown);
      this.enableContainerChildrenFocus();
    }
  }, {
    key: "handleCloseEvent",
    value: function handleCloseEvent(event) {
      if (this.props.onRequestClose) {
        this.props.onRequestClose(event);
      }
    }
  }, {
    key: "setContainer",
    value: function setContainer(node) {
      if (!node) {
        return;
      } // Ref callbacks happen on mount and unmount, element is null on unmount
      this.overflow = document.documentElement.style.overflow;
      if (this.props.isRelativeToContainer) {
        this.container = node.parentNode;
      } else {
        this.container = null;
      }
    }
  }, {
    key: "disableContainerChildrenFocus",
    value: function disableContainerChildrenFocus() {
      if (this.props.isRelativeToContainer) {
        if (this.container && this.container.querySelector('[data-terra-overlay-container-content]')) {
          this.container.querySelector('[data-terra-overlay-container-content]').setAttribute('inert', '');
        }
      } else {
        var selector = this.props.rootSelector;
        if (document.querySelector(selector) && !document.querySelector(selector).hasAttribute('data-overlay-count')) {
          document.querySelector(selector).setAttribute('data-overlay-count', '1');
          document.querySelector(selector).setAttribute('inert', '');
        } else if (document.querySelector(selector) && document.querySelector(selector).hasAttribute('data-overlay-count')) {
          var inert = +document.querySelector(selector).getAttribute('data-overlay-count');
          document.querySelector(selector).setAttribute('data-overlay-count', "".concat(inert + 1));
          document.querySelector(selector).setAttribute('inert', '');
        }
        document.documentElement.style.overflow = 'hidden';
      }
    }
  }, {
    key: "enableContainerChildrenFocus",
    value: function enableContainerChildrenFocus() {
      if (this.props.isRelativeToContainer) {
        if (this.container && this.container.querySelector('[data-terra-overlay-container-content]')) {
          this.container.querySelector('[data-terra-overlay-container-content]').removeAttribute('inert');
          this.container.querySelector('[data-terra-overlay-container-content]').removeAttribute('aria-hidden');
        }
      } else {
        var selector = this.props.rootSelector;
        if (document.querySelector(selector)) {
          // Guard for Jest testing
          var inert = +document.querySelector(selector).getAttribute('data-overlay-count');
          if (inert === 1) {
            document.querySelector(selector).removeAttribute('data-overlay-count');
            document.querySelector(selector).removeAttribute('inert');
            document.querySelector(selector).removeAttribute('aria-hidden');
          } else if (inert && inert > 1) {
            document.querySelector(selector).setAttribute('data-overlay-count', "".concat(inert - 1));
          }
        }
        document.documentElement.style.overflow = this.overflow;
      }
    }
  }, {
    key: "shouldHandleESCKeydown",
    value: function shouldHandleESCKeydown(event) {
      if (this.props.isOpen && event.keyCode === KeyCode.KEY_ESCAPE) {
        this.handleCloseEvent(event);
        event.preventDefault();
      }
    }
  }, {
    key: "shouldHandleClick",
    value: function shouldHandleClick(event) {
      if (this.props.isOpen) {
        this.handleCloseEvent(event);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        children = _this$props.children,
        isOpen = _this$props.isOpen,
        backgroundStyle = _this$props.backgroundStyle,
        isScrollable = _this$props.isScrollable,
        isRelativeToContainer = _this$props.isRelativeToContainer,
        onRequestClose = _this$props.onRequestClose,
        rootSelector = _this$props.rootSelector,
        zIndex = _this$props.zIndex,
        customProps = _objectWithoutProperties(_this$props, _excluded);
      var theme = this.context;
      var type = isRelativeToContainer ? 'container' : 'fullscreen';
      if (!isOpen) {
        return null;
      }
      var zIndexLayer = '100';
      if (zIndexes.indexOf(zIndex) >= 0) {
        zIndexLayer = zIndex;
      }
      var OverlayClassNames = (0, _classnames.default)(cx(['overlay', type, backgroundStyle, {
        scrollable: isScrollable
      }, "layer-".concat(zIndexLayer), theme.className]), customProps.className);

      /*
        tabIndex set to 0 allows screen readers like VoiceOver to read overlay content when its displayed.
        Key events are added on mount.
      */
      /* eslint-disable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-tabindex */
      var overlayComponent = /*#__PURE__*/_react.default.createElement("div", _extends({}, customProps, {
        ref: this.setContainer,
        onClick: this.shouldHandleClick,
        className: OverlayClassNames,
        tabIndex: "0"
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: cx('content')
      }, children));
      /* eslint-enable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-tabindex */

      if (isRelativeToContainer) {
        return overlayComponent;
      }
      var backgroundScrollContent = /*#__PURE__*/_react.default.createElement("div", {
        className: cx('background-scroll-content')
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: cx('inner')
      }));
      return /*#__PURE__*/_react.default.createElement(_reactPortal.Portal, null, backgroundScrollContent, /*#__PURE__*/_react.default.createElement(_focusTrapReact.default, null, /*#__PURE__*/_react.default.createElement("div", null, overlayComponent)));
    }
  }]);
  return Overlay;
}(_react.default.Component);
var Opts = {
  BackgroundStyles: BackgroundStyles,
  zIndexes: zIndexes
};
Overlay.propTypes = propTypes;
Overlay.defaultProps = defaultProps;
Overlay.contextType = _terraThemeContext.default;
Overlay.Opts = Opts;
Overlay.Container = _OverlayContainer.default;
var _default = Overlay;
exports.default = _default;