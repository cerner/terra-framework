"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GENERIC_VARIANTS = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _AvatarModule = _interopRequireDefault(require("../common/Avatar.module.scss"));
var _AvatarUtils = require("../common/AvatarUtils");
var _excluded = ["alt", "color", "hashValue", "isAriaHidden", "size", "variant"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var cx = _bind.default.bind(_AvatarModule.default);
var GENERIC_VARIANTS = {
  SINGLE_USER: 'single-user',
  SHARED_USER: 'shared-user',
  PROVIDER: 'provider'
};
exports.GENERIC_VARIANTS = GENERIC_VARIANTS;
var propTypes = {
  /**
   * Specifies the alternative text for the image.
   */
  alt: _propTypes.default.string.isRequired,
  /**
   * Sets the background color. Defaults to `auto`. Accepted color variants are theme specific.
   * One of: `'auto'`, `'neutral'`, `'one'`, `'two'`, `'three'`, `'four'`, `'five'`, `'six'`, `'seven'`, `'eight'`, `'nine'`, `'ten'`.
   */
  color: _propTypes.default.oneOf(['auto', 'neutral', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']),
  /**
   * Value used for the hash function when color is set to `auto`. If not provided, hash function utilizes alt.
   */
  hashValue: _propTypes.default.string,
  /**
   * Whether to hide avatar from the accessibility tree.
   */
  isAriaHidden: _propTypes.default.bool,
  /**
   * Overrides the default size.
   */
  size: _propTypes.default.string,
  /**
   * Sets the Generic Avatar type to One of the following variants `single-user`, `shared-user`, or `provider`.
   */
  variant: _propTypes.default.oneOf([GENERIC_VARIANTS.SINGLE_USER, GENERIC_VARIANTS.SHARED_USER, GENERIC_VARIANTS.PROVIDER])
};
var defaultProps = {
  color: 'auto',
  hashValue: undefined,
  isAriaHidden: false,
  size: undefined,
  variant: GENERIC_VARIANTS.SINGLE_USER
};
var Generic = function Generic(_ref) {
  var alt = _ref.alt,
    color = _ref.color,
    hashValue = _ref.hashValue,
    isAriaHidden = _ref.isAriaHidden,
    size = _ref.size,
    variant = _ref.variant,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var colorVariant = (0, _AvatarUtils.setColor)(alt, color, hashValue);
  var attributes = _objectSpread({}, customProps);
  var customStyles = size ? _objectSpread({
    fontSize: size
  }, attributes.style) : attributes.style;
  var GenericUserClassNames = (0, _classnames.default)(cx('avatar', "".concat(colorVariant), theme.className), attributes.className);
  var genericIconClassNames = cx(['icon', 'user']);
  if (variant === GENERIC_VARIANTS.SHARED_USER) {
    genericIconClassNames = cx(['icon', GENERIC_VARIANTS.SHARED_USER]);
  } else if (variant === GENERIC_VARIANTS.PROVIDER) {
    genericIconClassNames = cx(['icon', GENERIC_VARIANTS.PROVIDER]);
  }

  /* eslint-disable react/forbid-dom-props */
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, attributes, {
    className: GenericUserClassNames,
    style: customStyles
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: genericIconClassNames,
    role: "img",
    "aria-label": alt,
    alt: alt,
    "aria-hidden": isAriaHidden
  }));
  /* eslint-enable react/forbid-dom-props */
};

Generic.propTypes = propTypes;
Generic.defaultProps = defaultProps;
var _default = Generic;
exports.default = _default;