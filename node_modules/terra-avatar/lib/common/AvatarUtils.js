"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateColor = exports.setColor = exports.getColorVariant = exports.generateInitials = exports.generateImagePlaceholder = exports.generateImage = exports.calculateHash = exports.COLOR_VARIANTS = exports.AVATAR_VARIANTS = void 0;
var _react = _interopRequireDefault(require("react"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraImage = _interopRequireDefault(require("terra-image"));
var _AvatarModule = _interopRequireDefault(require("./Avatar.module.scss"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var cx = _bind.default.bind(_AvatarModule.default);
var AVATAR_VARIANTS = {
  USER: 'user',
  FACILITY: 'facility',
  GENERIC: 'generic'
};
exports.AVATAR_VARIANTS = AVATAR_VARIANTS;
var COLOR_VARIANTS = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'];

/**
 * Generates a hash, based on a given string s.
 * https://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
 */
exports.COLOR_VARIANTS = COLOR_VARIANTS;
var calculateHash = function calculateHash(s) {
  var hash = 0;
  var char;
  if (s.trim().length === 0) {
    return hash;
  }

  /* eslint-disable no-bitwise */
  for (var i = 0; i < s.length; i += 1) {
    char = s.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash &= hash; // Convert to 32bit integer
  }
  /* eslint-enable no-bitwise */

  return Math.abs(hash); // Always return positive hash
};

/**
 *  Returns a color variant based on a given hashValue.
 */
exports.calculateHash = calculateHash;
var getColorVariant = function getColorVariant(hashValue) {
  var hash = calculateHash(hashValue);
  var size = COLOR_VARIANTS.length - 1;
  var index = hash % size;
  return COLOR_VARIANTS[index];
};

/**
 * Render placeholder.
 */
exports.getColorVariant = getColorVariant;
var generateImagePlaceholder = function generateImagePlaceholder(avatarParams) {
  var alt = avatarParams.alt,
    variant = avatarParams.variant,
    isAriaHidden = avatarParams.isAriaHidden;
  var avatarIconClassNames = cx(['icon', variant]);
  return /*#__PURE__*/_react.default.createElement("span", {
    className: avatarIconClassNames,
    role: "img",
    "aria-label": alt,
    alt: alt,
    "aria-hidden": isAriaHidden
  });
};

/**
 * Appends deceased text based on alt
 */
exports.generateImagePlaceholder = generateImagePlaceholder;
var appendDeceased = function appendDeceased(alt, initials, intl) {
  var deceasedText = intl.formatMessage({
    id: 'Terra.avatar.deceased'
  });
  return alt === '' ? "".concat(initials, ", ").concat(deceasedText) : "".concat(alt, ", ").concat(deceasedText);
};

/**
 * Render placeholder.
 */
var generateInitials = function generateInitials(avatarParams) {
  var initials = avatarParams.initials,
    isAriaHidden = avatarParams.isAriaHidden,
    isDeceased = avatarParams.isDeceased,
    intl = avatarParams.intl;
  var alt = isDeceased ? appendDeceased(avatarParams.alt, initials, intl) : avatarParams.alt;
  var avatarTextClassNames = cx('initials');
  return /*#__PURE__*/_react.default.createElement("span", {
    className: avatarTextClassNames,
    role: "img",
    alt: alt,
    "aria-label": alt,
    "aria-hidden": isAriaHidden
  }, initials.toUpperCase());
};

/**
 * Render image with placeholder.
 */
exports.generateInitials = generateInitials;
var generateImage = function generateImage(avatarParams) {
  var initials = avatarParams.initials,
    image = avatarParams.image,
    variant = avatarParams.variant,
    handleFallback = avatarParams.handleFallback,
    isDeceased = avatarParams.isDeceased,
    intl = avatarParams.intl;
  var alt = isDeceased ? appendDeceased(avatarParams.alt, initials, intl) : avatarParams.alt;
  var icon = variant === AVATAR_VARIANTS.USER ? generateInitials(avatarParams) : generateImagePlaceholder(avatarParams);
  return /*#__PURE__*/_react.default.createElement(_terraImage.default, {
    className: cx('image'),
    src: image,
    placeholder: icon,
    alt: alt,
    onError: handleFallback,
    fit: "cover"
  });
};

/**
 * Returns true if the given color exists within `COLOR_VARIANTS`.
 */
exports.generateImage = generateImage;
var validateColor = function validateColor(color) {
  if (!color) {
    return false;
  }
  return COLOR_VARIANTS.includes(color); // will return true if color is an item in the COLOR_VARIANTS array.
};

/**
 * Returns a color variant based on the following precedence:
 *   1. `color`
 *   2. Hash `hashValue` to generate color variant.
 *   3. Hash `alt`  to generate color variant. This is the fallback.
 */
exports.validateColor = validateColor;
var setColor = function setColor(alt, color, hashValue) {
  if (color === 'neutral' || color !== 'auto' && validateColor(color)) {
    return color;
  }
  if (hashValue) {
    return getColorVariant(hashValue);
  }
  return getColorVariant(alt);
};
exports.setColor = setColor;