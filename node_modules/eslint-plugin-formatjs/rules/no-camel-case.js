"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
var util_1 = require("../util");
var CAMEL_CASE_REGEX = /[A-Z]/;
var CamelCase = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(CamelCase, _super);
    function CamelCase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.message = 'Camel case arguments are not allowed';
        return _this;
    }
    return CamelCase;
}(Error));
function verifyAst(ast) {
    for (var _i = 0, ast_1 = ast; _i < ast_1.length; _i++) {
        var el = ast_1[_i];
        if ((0, icu_messageformat_parser_1.isArgumentElement)(el)) {
            if (CAMEL_CASE_REGEX.test(el.value)) {
                throw new CamelCase();
            }
            continue;
        }
        if ((0, icu_messageformat_parser_1.isPluralElement)(el)) {
            if (CAMEL_CASE_REGEX.test(el.value)) {
                throw new CamelCase();
            }
            var options = el.options;
            for (var _a = 0, _b = Object.keys(options); _a < _b.length; _a++) {
                var selector = _b[_a];
                verifyAst(options[selector].value);
            }
        }
    }
}
function checkNode(context, node) {
    var msgs = (0, util_1.extractMessages)(node, context.settings);
    for (var _i = 0, msgs_1 = msgs; _i < msgs_1.length; _i++) {
        var _a = msgs_1[_i][0], defaultMessage = _a.message.defaultMessage, messageNode = _a.messageNode;
        if (!defaultMessage || !messageNode) {
            continue;
        }
        try {
            verifyAst((0, icu_messageformat_parser_1.parse)(defaultMessage, {
                ignoreTag: context.settings.ignoreTag,
            }));
        }
        catch (e) {
            context.report({
                node: messageNode,
                message: e instanceof Error ? e.message : String(e),
            });
        }
    }
}
var rule = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallow camel case placeholders in message',
            category: 'Errors',
            recommended: false,
            url: 'https://formatjs.io/docs/tooling/linter#no-camel-case',
        },
        fixable: 'code',
    },
    create: function (context) {
        var callExpressionVisitor = function (node) {
            return checkNode(context, node);
        };
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: function (node) { return checkNode(context, node); },
            CallExpression: callExpressionVisitor,
        };
    },
};
exports.default = rule;
