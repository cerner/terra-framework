"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("../util");
var icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
var PluralRulesEnforcement = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(PluralRulesEnforcement, _super);
    function PluralRulesEnforcement(message) {
        var _this = _super.call(this) || this;
        _this.message = message;
        return _this;
    }
    return PluralRulesEnforcement;
}(Error));
var LDML;
(function (LDML) {
    LDML["zero"] = "zero";
    LDML["one"] = "one";
    LDML["two"] = "two";
    LDML["few"] = "few";
    LDML["many"] = "many";
    LDML["other"] = "other";
})(LDML || (LDML = {}));
function verifyAst(plConfig, ast) {
    for (var _i = 0, ast_1 = ast; _i < ast_1.length; _i++) {
        var el = ast_1[_i];
        if ((0, icu_messageformat_parser_1.isPluralElement)(el)) {
            var rules = Object.keys(plConfig);
            for (var _a = 0, rules_1 = rules; _a < rules_1.length; _a++) {
                var rule_1 = rules_1[_a];
                if (plConfig[rule_1] && !el.options[rule_1]) {
                    throw new PluralRulesEnforcement("Missing plural rule \"".concat(rule_1, "\""));
                }
                if (!plConfig[rule_1] && el.options[rule_1]) {
                    throw new PluralRulesEnforcement("Plural rule \"".concat(rule_1, "\" is forbidden"));
                }
            }
            var options = el.options;
            for (var _b = 0, _c = Object.keys(options); _b < _c.length; _b++) {
                var selector = _c[_b];
                verifyAst(plConfig, options[selector].value);
            }
        }
    }
}
function checkNode(context, node) {
    var msgs = (0, util_1.extractMessages)(node, context.settings);
    if (!msgs.length) {
        return;
    }
    var plConfig = context.options[0];
    if (!plConfig) {
        return;
    }
    for (var _i = 0, msgs_1 = msgs; _i < msgs_1.length; _i++) {
        var _a = msgs_1[_i][0], defaultMessage = _a.message.defaultMessage, messageNode = _a.messageNode;
        if (!defaultMessage || !messageNode) {
            continue;
        }
        try {
            verifyAst(context.options[0], (0, icu_messageformat_parser_1.parse)(defaultMessage, {
                ignoreTag: context.settings.ignoreTag,
            }));
        }
        catch (e) {
            context.report({
                node: messageNode,
                message: e instanceof Error ? e.message : String(e),
            });
        }
    }
}
var rule = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Enforce plural rules to always specify certain categories like `one`/`other`',
            category: 'Errors',
            recommended: false,
            url: 'https://formatjs.io/docs/tooling/linter#enforce-plural-rules',
        },
        fixable: 'code',
        schema: [
            {
                type: 'object',
                properties: Object.keys(LDML).reduce(function (schema, k) {
                    schema[k] = {
                        type: 'boolean',
                    };
                    return schema;
                }, {}),
                additionalProperties: false,
            },
        ],
    },
    create: function (context) {
        var callExpressionVisitor = function (node) {
            return checkNode(context, node);
        };
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: function (node) { return checkNode(context, node); },
            CallExpression: callExpressionVisitor,
        };
    },
};
exports.default = rule;
