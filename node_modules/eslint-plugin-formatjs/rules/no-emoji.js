"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("../util");
var emoji_regex_1 = (0, tslib_1.__importDefault)(require("emoji-regex"));
var EMOJI_REGEX = emoji_regex_1.default();
function checkNode(context, node) {
    var msgs = (0, util_1.extractMessages)(node, context.settings);
    for (var _i = 0, msgs_1 = msgs; _i < msgs_1.length; _i++) {
        var _a = msgs_1[_i][0], defaultMessage = _a.message.defaultMessage, messageNode = _a.messageNode;
        if (!defaultMessage || !messageNode) {
            continue;
        }
        if (EMOJI_REGEX.test(defaultMessage)) {
            context.report({
                node: messageNode,
                message: 'Emojis are not allowed',
            });
        }
    }
}
var rule = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallow emojis in message',
            category: 'Errors',
            recommended: false,
            url: 'https://formatjs.io/docs/tooling/linter#no-emoji',
        },
        fixable: 'code',
    },
    create: function (context) {
        var callExpressionVisitor = function (node) {
            return checkNode(context, node);
        };
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: function (node) { return checkNode(context, node); },
            CallExpression: callExpressionVisitor,
        };
    },
};
exports.default = rule;
