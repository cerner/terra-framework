"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("../util");
var icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
var manipulator_1 = require("@formatjs/icu-messageformat-parser/manipulator");
function calculateComplexity(ast) {
    if (ast.length === 1) {
        var el_1 = ast[0];
        if ((0, icu_messageformat_parser_1.isPluralElement)(el_1) || (0, icu_messageformat_parser_1.isSelectElement)(el_1)) {
            return Object.keys(el_1.options).reduce(function (complexity, k) {
                return complexity + calculateComplexity(el_1.options[k].value);
            }, 0);
        }
    }
    return 1;
}
function checkNode(context, node) {
    var msgs = (0, util_1.extractMessages)(node, context.settings);
    if (!msgs.length) {
        return;
    }
    var config = (0, tslib_1.__assign)({ limit: 20 }, (context.options[0] || {}));
    for (var _i = 0, msgs_1 = msgs; _i < msgs_1.length; _i++) {
        var _a = msgs_1[_i][0], defaultMessage = _a.message.defaultMessage, messageNode = _a.messageNode;
        if (!defaultMessage || !messageNode) {
            continue;
        }
        var hoistedAst = (0, manipulator_1.hoistSelectors)((0, icu_messageformat_parser_1.parse)(defaultMessage, {
            ignoreTag: context.settings.ignoreTag,
        }));
        var complexity = calculateComplexity(hoistedAst);
        if (complexity > config.limit) {
            context.report({
                node: messageNode,
                message: "Message complexity is too high (".concat(complexity, " vs limit at ").concat(config.limit, ")"),
            });
        }
    }
}
var rule = {
    meta: {
        type: 'problem',
        docs: {
            description: "Make sure a sentence is not too complex. \nComplexity is determined by how many strings are produced when we try to\nflatten the sentence given its selectors. For example:\n\"I have {count, plural, one{a dog} other{many dogs}}\"\nhas the complexity of 2 because flattening the plural selector\nresults in 2 sentences: \"I have a dog\" & \"I have many dogs\".\nDefault complexity limit is 20 \n(using Smartling as a reference: https://help.smartling.com/hc/en-us/articles/360008030994-ICU-MessageFormat)\n",
            category: 'Errors',
            recommended: false,
            url: 'https://formatjs.io/docs/tooling/linter#no-complex-selectors',
        },
        schema: [
            {
                type: 'object',
                properties: {
                    limit: {
                        type: 'number',
                    },
                },
                additionalProperties: false,
            },
        ],
        fixable: 'code',
    },
    create: function (context) {
        var callExpressionVisitor = function (node) {
            return checkNode(context, node);
        };
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: function (node) { return checkNode(context, node); },
            CallExpression: callExpressionVisitor,
        };
    },
};
exports.default = rule;
