"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
function isComment(token) {
    return !!token && (token.type === 'Block' || token.type === 'Line');
}
function checkNode(context, node) {
    var msgs = (0, util_1.extractMessages)(node, context.settings);
    var _loop_1 = function (idPropNode) {
        if (idPropNode) {
            context.report({
                node: idPropNode,
                message: 'Manual `id` are not allowed in message descriptor',
                fix: function (fixer) {
                    var src = context.getSourceCode();
                    var token = src.getTokenAfter(idPropNode);
                    var fixes = [fixer.remove(idPropNode)];
                    if (token && !isComment(token) && (token === null || token === void 0 ? void 0 : token.value) === ',') {
                        fixes.push(fixer.remove(token));
                    }
                    return fixes;
                },
            });
        }
    };
    for (var _i = 0, msgs_1 = msgs; _i < msgs_1.length; _i++) {
        var idPropNode = msgs_1[_i][0].idPropNode;
        _loop_1(idPropNode);
    }
}
exports.default = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Ban explicit ID from MessageDescriptor',
            category: 'Errors',
            recommended: false,
            url: 'https://formatjs.io/docs/tooling/linter#no-id',
        },
        fixable: 'code',
    },
    create: function (context) {
        var callExpressionVisitor = function (node) {
            return checkNode(context, node);
        };
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: function (node) { return checkNode(context, node); },
            CallExpression: callExpressionVisitor,
        };
    },
};
