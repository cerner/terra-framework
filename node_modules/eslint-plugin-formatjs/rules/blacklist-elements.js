"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("../util");
var icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
var BlacklistElement = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(BlacklistElement, _super);
    function BlacklistElement(type) {
        var _this = _super.call(this) || this;
        _this.message = "".concat(type, " element is blacklisted");
        return _this;
    }
    return BlacklistElement;
}(Error));
var Element;
(function (Element) {
    Element["literal"] = "literal";
    Element["argument"] = "argument";
    Element["number"] = "number";
    Element["date"] = "date";
    Element["time"] = "time";
    Element["select"] = "select";
    Element["selectordinal"] = "selectordinal";
    Element["plural"] = "plural";
    Element["tag"] = "tag";
})(Element || (Element = {}));
function verifyAst(blacklist, ast) {
    for (var _i = 0, ast_1 = ast; _i < ast_1.length; _i++) {
        var el = ast_1[_i];
        if ((0, icu_messageformat_parser_1.isLiteralElement)(el) && blacklist.includes(Element.literal)) {
            throw new BlacklistElement(Element.literal);
        }
        if ((0, icu_messageformat_parser_1.isArgumentElement)(el) && blacklist.includes(Element.argument)) {
            throw new BlacklistElement(Element.argument);
        }
        if ((0, icu_messageformat_parser_1.isNumberElement)(el) && blacklist.includes(Element.number)) {
            throw new BlacklistElement(Element.number);
        }
        if ((0, icu_messageformat_parser_1.isDateElement)(el) && blacklist.includes(Element.date)) {
            throw new BlacklistElement(Element.date);
        }
        if ((0, icu_messageformat_parser_1.isTimeElement)(el) && blacklist.includes(Element.time)) {
            throw new BlacklistElement(Element.time);
        }
        if ((0, icu_messageformat_parser_1.isSelectElement)(el) && blacklist.includes(Element.select)) {
            throw new BlacklistElement(Element.select);
        }
        if ((0, icu_messageformat_parser_1.isTagElement)(el) && blacklist.includes(Element.tag)) {
            throw new BlacklistElement(Element.tag);
        }
        if ((0, icu_messageformat_parser_1.isPluralElement)(el)) {
            if (blacklist.includes(Element.plural)) {
                throw new BlacklistElement(Element.argument);
            }
            if (el.pluralType === 'ordinal' &&
                blacklist.includes(Element.selectordinal)) {
                throw new BlacklistElement(Element.selectordinal);
            }
        }
        if ((0, icu_messageformat_parser_1.isSelectElement)(el) || (0, icu_messageformat_parser_1.isPluralElement)(el)) {
            var options = el.options;
            for (var _a = 0, _b = Object.keys(options); _a < _b.length; _a++) {
                var selector = _b[_a];
                verifyAst(blacklist, options[selector].value);
            }
        }
    }
}
function checkNode(context, node) {
    var msgs = (0, util_1.extractMessages)(node, context.settings);
    if (!msgs.length) {
        return;
    }
    var blacklist = context.options[0];
    if (!Array.isArray(blacklist) || !blacklist.length) {
        return;
    }
    for (var _i = 0, msgs_1 = msgs; _i < msgs_1.length; _i++) {
        var _a = msgs_1[_i][0], defaultMessage = _a.message.defaultMessage, messageNode = _a.messageNode;
        if (!defaultMessage || !messageNode) {
            continue;
        }
        try {
            verifyAst(context.options[0], (0, icu_messageformat_parser_1.parse)(defaultMessage, {
                ignoreTag: context.settings.ignoreTag,
            }));
        }
        catch (e) {
            context.report({
                node: messageNode,
                message: e instanceof Error ? e.message : String(e),
            });
        }
    }
}
var rule = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallow specific elements in ICU message format',
            category: 'Errors',
            recommended: false,
            url: 'https://formatjs.io/docs/tooling/linter#blacklist-elements',
        },
        fixable: 'code',
        schema: [
            {
                type: 'array',
                properties: {
                    items: {
                        type: 'string',
                        enum: Object.keys(Element),
                    },
                },
            },
        ],
    },
    create: function (context) {
        var callExpressionVisitor = function (node) {
            return checkNode(context, node);
        };
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: function (node) { return checkNode(context, node); },
            CallExpression: callExpressionVisitor,
        };
    },
};
exports.default = rule;
