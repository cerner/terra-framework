"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util");
function checkNode(context, node) {
    var msgs = (0, util_1.extractMessages)(node, context.settings);
    var type = context.options[0];
    for (var _i = 0, msgs_1 = msgs; _i < msgs_1.length; _i++) {
        var _a = msgs_1[_i][0], defaultMessage = _a.message.defaultMessage, messageNode = _a.messageNode;
        if (!defaultMessage) {
            if (type === 'literal' && messageNode) {
                context.report({
                    node: messageNode,
                    message: "\"defaultMessage\" must be:\n- a string literal or\n- template literal without variable",
                });
            }
            else if (!messageNode) {
                context.report({
                    node: node,
                    message: '`defaultMessage` has to be specified in message descriptor',
                });
            }
        }
    }
}
var rule = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Enforce defaultMessage in message descriptor',
            category: 'Errors',
            recommended: false,
            url: 'https://formatjs.io/docs/tooling/linter#enforce-default-message',
        },
        fixable: 'code',
        schema: [
            {
                enum: ['literal', 'anything'],
            },
        ],
    },
    create: function (context) {
        var callExpressionVisitor = function (node) {
            return checkNode(context, node);
        };
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: function (node) { return checkNode(context, node); },
            CallExpression: callExpressionVisitor,
        };
    },
};
exports.default = rule;
