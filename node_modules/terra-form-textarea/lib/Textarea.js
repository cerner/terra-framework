"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TextareaSize = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _TextareaModule = _interopRequireDefault(require("./Textarea.module.scss"));
var _excluded = ["name", "required", "onChange", "onFocus", "onInput", "isAutoResizable", "isIncomplete", "isInvalid", "value", "defaultValue", "rows", "size", "ariaLabel", "refCallback", "disableResize"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var cx = _bind.default.bind(_TextareaModule.default);
var isMobileDevice = function isMobileDevice() {
  return window.matchMedia('(max-width: 1024px)').matches && ('ontouchstart' in window
  // eslint-disable-next-line no-undef
  || window.DocumentTouch && document instanceof DocumentTouch || navigator.maxTouchPoints > 0 // eslint-disable-line compat/compat
  || navigator.msMaxTouchPoints > 0);
};
var TextareaSize = {
  SMALL: 'small',
  MEDIUM: 'medium',
  LARGE: 'large',
  FULL: 'full'
};
exports.TextareaSize = TextareaSize;
var TEXTAREA_ROW_SIZES = {
  small: 2,
  medium: 5,
  large: 10
};
var propTypes = {
  /**
  * String that labels the current element. 'aria-label' must be present,
  * for accessibility.
  */
  ariaLabel: _propTypes.default.string,
  /**
   * The defaultValue of the textarea. Use this to create an uncontrolled textarea.
   */
  defaultValue: _propTypes.default.string,
  /**
   * Whether the textarea is disabled.
   */
  disabled: _propTypes.default.bool,
  /**
   * Whether the textarea can be auto-resized vertically. _(Will be ignored if size attribute is set to "full".)_
   */
  isAutoResizable: _propTypes.default.bool,
  /**
   * Whether the text area displays as Incomplete. Use when no value has been provided. _(usage note: `required` must also be set)_.
   */
  isIncomplete: _propTypes.default.bool,
  /**
   * Whether the text area displays as Invalid. Use when value does not meet validation pattern.
   */
  isInvalid: _propTypes.default.bool,
  /**
   * Name of the input.
   */
  name: _propTypes.default.string,
  /**
   * Function to trigger when user changes the textarea value. Provide a function to create a controlled input.
   */
  onChange: _propTypes.default.func,
  /**
   * Function to trigger when user focuses on this textarea.
   */
  onFocus: _propTypes.default.func,
  /**
   * Function to trigger when user inputs a value. Use when programmatically setting a value. Sends parameter {Event} event.
   */
  onInput: _propTypes.default.func,
  /**
   * Whether the input is required or not.
   */
  required: _propTypes.default.bool,
  /**
   * Value to set for the rows attribute of the textarea. This takes precedence over size when
   * setting the height of the textarea.
   */
  rows: _propTypes.default.number,
  /**
   * The size of the textarea. _(Sizes the textarea by setting the rows attribute a corresponding preset value.)_
   */
  size: _propTypes.default.oneOf(['small', 'medium', 'large', 'full']),
  /**
   * The value of the textarea. Use this to create a controlled textarea.
   */
  value: _propTypes.default.string,
  /**
   * Function callback for the ref of the textarea. Useful for advanced
   * functionality such as managing focus, selection, or animations.
   */
  refCallback: _propTypes.default.func,
  /**
   * Whether or not the textarea is resizable.
   * `Disabled` textarea and the ones with size `full` are always non-resizable.
   */
  disableResize: _propTypes.default.bool
};
var defaultProps = {
  defaultValue: undefined,
  disabled: false,
  name: null,
  isAutoResizable: false,
  isIncomplete: false,
  isInvalid: false,
  onChange: undefined,
  onInput: undefined,
  required: false,
  rows: undefined,
  size: 'small',
  value: undefined,
  refCallback: undefined,
  disableResize: false
};
var Textarea = /*#__PURE__*/function (_React$Component) {
  _inherits(Textarea, _React$Component);
  var _super = _createSuper(Textarea);
  function Textarea(props) {
    var _this;
    _classCallCheck(this, Textarea);
    _this = _super.call(this, props);
    _this.isMobileDevice = isMobileDevice();
    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));
    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Textarea, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var lineHeight = Math.ceil(parseInt(window.getComputedStyle(this.textarea).lineHeight, 10));
      this.textarea.currentLineHeight = lineHeight;
      this.setBaseHeights();
      if (this.props.isAutoResizable && !this.isMobileDevice) {
        this.resizeTextarea();
      }
    }

    // Addresses https://github.com/cerner/terra-core/issues/2496.
    // min-height manipulation exists outside the virtual dom. React reconcilliation will fail to update this inline style, because it is not a prop.
    // This is apparent when swapping different sized TextArea components. To alleviate this, first reset the min-height.
    // This allows us to capture the correct scrollHeight, and use this correct value for min-height.
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.size !== prevProps.size || this.props.rows !== prevProps.rows) {
        this.setBaseHeights();
      }
    }
  }, {
    key: "onFocus",
    value: function onFocus(event) {
      if (this.props.isAutoResizable && !this.isMobileDevice) {
        var lineHeight = Math.ceil(parseInt(window.getComputedStyle(this.textarea).lineHeight, 10));
        if (this.textarea.currentLineHeight !== lineHeight) {
          this.textarea.currentLineHeight = lineHeight;
          this.setBaseHeights();
        }
      }
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }, {
    key: "onChange",
    value: function onChange(event) {
      if (this.props.isAutoResizable && !this.isMobileDevice) {
        this.resizeTextarea();
      }
      if (this.props.onChange) {
        this.props.onChange(event);
      }
    }
  }, {
    key: "setBaseHeights",
    value: function setBaseHeights() {
      // To Properly resize the textarea vertically, we need to record the initial height
      // to help with the resizing calculation.
      var savedValue = this.textarea.value;
      this.textarea.value = '';
      this.textarea.baseScrollHeight = this.textarea.scrollHeight;

      // For terra textareas, we want the gripper to not have the ability to resize the textarea to
      // be a tiny square. Setting the minHeight restricts the area the gripper can be shrunk too
      this.textarea.style.minHeight = '0px';
      this.textarea.style.minHeight = "".concat(this.textarea.scrollHeight, "px");
      this.textarea.value = savedValue;
    }
  }, {
    key: "resizeTextarea",
    value: function resizeTextarea() {
      var minRows = this.props.rows || TEXTAREA_ROW_SIZES[this.props.size];
      this.textarea.rows = minRows;
      var rows = Math.ceil((this.textarea.scrollHeight - this.textarea.baseScrollHeight) / this.textarea.currentLineHeight);
      this.textarea.rows = minRows + rows;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props,
        name = _this$props.name,
        required = _this$props.required,
        onChange = _this$props.onChange,
        onFocus = _this$props.onFocus,
        onInput = _this$props.onInput,
        isAutoResizable = _this$props.isAutoResizable,
        isIncomplete = _this$props.isIncomplete,
        isInvalid = _this$props.isInvalid,
        value = _this$props.value,
        defaultValue = _this$props.defaultValue,
        rows = _this$props.rows,
        size = _this$props.size,
        ariaLabel = _this$props.ariaLabel,
        refCallback = _this$props.refCallback,
        disableResize = _this$props.disableResize,
        customProps = _objectWithoutProperties(_this$props, _excluded);
      var theme = this.context;
      var additionalTextareaProps = _objectSpread({}, customProps);
      var textareaClasses = (0, _classnames.default)(cx('textarea', {
        'form-error': isInvalid
      }, {
        'form-incomplete': isIncomplete && required && !isInvalid
      }, {
        'full-size': size === 'full'
      }, {
        resizable: isAutoResizable && !this.isMobileDevice
      }, {
        'no-resize': disableResize
      }, theme.className), additionalTextareaProps.className);
      var ariaLabelText;

      // Handle case of users setting aria-label as a custom prop
      if (additionalTextareaProps && Object.prototype.hasOwnProperty.call(additionalTextareaProps, 'aria-label')) {
        // If they've set aria-label and ariaLabel, use the ariaLabel value,
        // otherwise, fallback to using the aria-label value passed in.
        ariaLabelText = !ariaLabel ? additionalTextareaProps['aria-label'] : ariaLabel;
      } else if (ariaLabel) {
        // If users only set ariaLabel prop, use that value
        ariaLabelText = ariaLabel;
      }
      additionalTextareaProps['aria-label'] = ariaLabelText;
      if (required) {
        additionalTextareaProps['aria-required'] = 'true';
      }
      var textareaRows = rows || TEXTAREA_ROW_SIZES[size];
      if (value !== undefined) {
        additionalTextareaProps.value = value;
      } else {
        additionalTextareaProps.defaultValue = defaultValue;
      }
      if (additionalTextareaProps.placeholder) {
        additionalTextareaProps.placeholder = null;
      }
      return /*#__PURE__*/_react.default.createElement("textarea", _extends({}, additionalTextareaProps, {
        ref: function ref(textarea) {
          _this2.textarea = textarea;
          if (refCallback) refCallback(textarea);
        },
        name: name,
        onFocus: this.onFocus,
        onChange: this.onChange,
        onInput: onInput,
        required: required,
        rows: textareaRows,
        className: textareaClasses
      }));
    }
  }]);
  return Textarea;
}(_react.default.Component);
Textarea.propTypes = propTypes;
Textarea.defaultProps = defaultProps;
Textarea.isTextarea = true;
Textarea.contextType = _terraThemeContext.default;
var _default = Textarea;
exports.default = _default;