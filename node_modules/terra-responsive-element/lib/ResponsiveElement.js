"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DependentViewport = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));
var _terraBreakpoints = _interopRequireWildcard(require("terra-breakpoints"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var DependentViewport = {
  WINDOW: 'window',
  PARENT: 'parent'
};
exports.DependentViewport = DependentViewport;
var propTypes = {
  /**
   * Child nodes.
   */
  children: _propTypes.default.node,
  /**
   * A callback function invoked when the breakpoint size changes. ```onChange(<string>breakpoint)```
   */
  onChange: _propTypes.default.func,
  /**
   * A callback function invoked when the responsive target resizes. ```onResize(<number>width)```
   */
  onResize: _propTypes.default.func,
  /**
   * [Deprecated] An element to be displayed at tiny breakpoints.
   */
  tiny: _propTypes.default.element,
  /**
   * [Deprecated] An element to be displayed at small breakpoints.
   */
  small: _propTypes.default.element,
  /**
   * [Deprecated] An element to be displayed at medium breakpoints.
   */
  medium: _propTypes.default.element,
  /**
   * [Deprecated] An element to be displayed at large breakpoints.
   */
  large: _propTypes.default.element,
  /**
   * [Deprecated] An element to be displayed at huge breakpoints.
   */
  huge: _propTypes.default.element,
  /**
   * [Deprecated] An element to be displayed at enormous breakpoints.
   */
  enormous: _propTypes.default.element,
  /**
   * The viewport the element will be responsive to. One of `window` or `parent`.
   */
  responsiveTo: _propTypes.default.oneOf(['window', 'parent'])
};
var defaultProps = {
  responsiveTo: 'parent'
};
var ResponsiveElement = /*#__PURE__*/function (_React$Component) {
  _inherits(ResponsiveElement, _React$Component);
  var _super = _createSuper(ResponsiveElement);
  function ResponsiveElement() {
    var _this;
    _classCallCheck(this, ResponsiveElement);
    _this = _super.call(this);
    _this.state = {
      element: null
    };
    _this.setContainer = _this.setContainer.bind(_assertThisInitialized(_this));
    _this.handleResize = _this.handleResize.bind(_assertThisInitialized(_this));
    _this.handleWindowResize = _this.handleWindowResize.bind(_assertThisInitialized(_this));
    _this.animationFrameID = null;
    return _this;
  }
  _createClass(ResponsiveElement, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      var _this$props = this.props,
        tiny = _this$props.tiny,
        small = _this$props.small,
        medium = _this$props.medium,
        large = _this$props.large,
        huge = _this$props.huge,
        enormous = _this$props.enormous;
      if (this.container) {
        this.handleResize(this.container.getBoundingClientRect().width);
        this.resizeObserver = new _resizeObserverPolyfill.default(function (entries) {
          _this2.animationFrameID = window.requestAnimationFrame(function () {
            _this2.animationFrameID = null;
            _this2.handleResize(entries[0].target.getBoundingClientRect().width);
          });
        });
        this.resizeObserver.observe(this.container);
      } else {
        this.handleResize(window.innerWidth);
        window.addEventListener('resize', this.handleWindowResize);
      }
      if (process.env.NODE_ENV !== 'production' && (tiny || small || medium || large || huge || enormous)) {
        // eslint-disable-next-line no-console
        console.warn('The uncontrolled variant of terra-responsive-element will be deprecated in a future release. To convert to the controlled variant, please review our documentation on terra ui. https://engineering.cerner.com/terra-ui/components/terra-responsive-element/responsive-element/responsive-element');
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.container) {
        window.cancelAnimationFrame(this.animationFrameID);
        this.resizeObserver.disconnect(this.container);
        this.container = null;
      } else {
        window.removeEventListener('resize', this.handleWindowResize);
      }
    }
  }, {
    key: "handleResize",
    value: function handleResize(width) {
      var _this$props2 = this.props,
        onChange = _this$props2.onChange,
        onResize = _this$props2.onResize,
        tiny = _this$props2.tiny,
        small = _this$props2.small,
        medium = _this$props2.medium,
        large = _this$props2.large,
        huge = _this$props2.huge,
        enormous = _this$props2.enormous;
      if (onResize) {
        onResize(width);
      }
      var activeBreakpoint = (0, _terraBreakpoints.activeBreakpointForSize)(width);
      if (onChange && activeBreakpoint !== this.breakpoint) {
        onChange(activeBreakpoint);
      }
      this.breakpoint = activeBreakpoint;

      // Only update the state if an uncontrolled component exists.
      if (tiny || small || medium || large || huge || enormous) {
        var element;
        if (width >= _terraBreakpoints.default.enormous && enormous) {
          element = 'enormous';
        } else if (width >= _terraBreakpoints.default.huge && huge) {
          element = 'huge';
        } else if (width >= _terraBreakpoints.default.large && large) {
          element = 'large';
        } else if (width >= _terraBreakpoints.default.medium && medium) {
          element = 'medium';
        } else if (width >= _terraBreakpoints.default.small && small) {
          element = 'small';
        } else {
          element = 'tiny';
        }
        if (this.state.element !== element) {
          this.setState({
            element: element
          });
        }
      }
    }
  }, {
    key: "handleWindowResize",
    value: function handleWindowResize() {
      this.handleResize(window.innerWidth);
    }
  }, {
    key: "setContainer",
    value: function setContainer(node) {
      if (node === null) {
        return;
      } // Ref callbacks happen on mount and unmount, element will be null on unmount
      this.container = this.props.responsiveTo === 'parent' ? node.parentNode : null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
        children = _this$props3.children,
        responsiveTo = _this$props3.responsiveTo;
      if (this.state.element) {
        return this.props[this.state.element] || null;
      }
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, responsiveTo === 'parent' && !this.container && /*#__PURE__*/_react.default.createElement("div", {
        ref: this.setContainer
      }), children);
    }
  }]);
  return ResponsiveElement;
}(_react.default.Component);
ResponsiveElement.propTypes = propTypes;
ResponsiveElement.defaultProps = defaultProps;
var _default = ResponsiveElement;
exports.default = _default;