"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.shallowWithIntl = exports.renderWithIntl = exports.mountWithIntl = exports.mountContext = exports.shallowContext = exports.mockIntl = void 0;

var _react = require("react");

var _reactIntl = require("react-intl");

var _enzyme = require("enzyme");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var mockIntl = {
  defaultLocale: 'en',
  formatDate: function formatDate() {
    return 'mock date';
  },
  formatHTMLMessage: function formatHTMLMessage(_ref) {
    var id = _ref.id;
    return id;
  },
  formatMessage: function formatMessage(_ref2) {
    var id = _ref2.id;
    return id;
  },
  formatNumber: function formatNumber(value) {
    return "".concat(value);
  },
  formatPlural: function formatPlural(value) {
    return "".concat(value);
  },
  formatTime: function formatTime(value) {
    return "".concat(value);
  },
  formatRelative: function formatRelative(value) {
    return "".concat(value);
  },
  now: function now() {
    return 0;
  }
};
exports.mockIntl = mockIntl;
var messageProxy = new Proxy({}, {
  get: function get(_, property) {
    return property;
  }
}); // eslint-disable-line compat/compat
// Create the IntlProvider to retrieve context for wrapping around.

var intlProvider = new _reactIntl.IntlProvider({
  locale: 'en',
  messages: messageProxy
}, {});

var _intlProvider$getChil = intlProvider.getChildContext(),
    intl = _intlProvider$getChil.intl;

var injectIntl = function injectIntl(node) {
  return /*#__PURE__*/(0, _react.cloneElement)(node, {
    intl: intl
  });
};

var shallowContext = {
  context: {
    intl: intl
  }
};
exports.shallowContext = shallowContext;
var mountContext = {
  context: {
    intl: intl
  },
  childContextTypes: {
    intl: _reactIntl.intlShape
  }
};
exports.mountContext = mountContext;

var mountWithIntl = function mountWithIntl(node) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var context = _ref3.context,
      childContextTypes = _ref3.childContextTypes,
      options = _objectWithoutProperties(_ref3, ["context", "childContextTypes"]);

  var subject = injectIntl(node);

  var opts = _objectSpread({
    context: _objectSpread(_objectSpread({}, context), mountContext.context),
    childContextTypes: _objectSpread(_objectSpread({}, childContextTypes), mountContext.childContextTypes)
  }, options);

  return (0, _enzyme.mount)(subject, opts);
};

exports.mountWithIntl = mountWithIntl;

var renderWithIntl = function renderWithIntl(node) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var context = _ref4.context,
      childContextTypes = _ref4.childContextTypes,
      options = _objectWithoutProperties(_ref4, ["context", "childContextTypes"]);

  var subject = injectIntl(node);

  var opts = _objectSpread({
    context: _objectSpread(_objectSpread({}, context), mountContext.context),
    childContextTypes: _objectSpread(_objectSpread({}, childContextTypes), mountContext.childContextTypes)
  }, options);

  return (0, _enzyme.render)(subject, opts);
};

exports.renderWithIntl = renderWithIntl;

var shallowWithIntl = function shallowWithIntl(node) {
  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var context = _ref5.context,
      options = _objectWithoutProperties(_ref5, ["context"]);

  var subject = injectIntl(node);

  var opts = _objectSpread({
    context: _objectSpread(_objectSpread({}, context), shallowContext.context)
  }, options);

  return (0, _enzyme.shallow)(subject, opts);
};

exports.shallowWithIntl = shallowWithIntl;
var _default = {
  mockIntl: mockIntl,
  mountWithIntl: mountWithIntl,
  shallowWithIntl: shallowWithIntl,
  renderWithIntl: renderWithIntl,
  shallowContext: shallowContext,
  mountContext: mountContext
};
exports.default = _default;