"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StatusViewVariants = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _reactIntl = require("react-intl");
var _terraButton = _interopRequireDefault(require("terra-button"));
var _terraDivider = _interopRequireDefault(require("terra-divider"));
var _StatusViewModule = _interopRequireDefault(require("./StatusView.module.scss"));
var _excluded = ["buttonAttrs", "customGlyph", "isAlignedTop", "isGlyphHidden", "message", "title", "variant"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var cx = _bind.default.bind(_StatusViewModule.default);
var StatusViewVariants = {
  NODATA: 'no-data',
  NOMATCHINGRESULTS: 'no-matching-results',
  NOTAUTHORIZED: 'not-authorized',
  ERROR: 'error'
};

/* eslint-disable react/forbid-foreign-prop-types */
exports.StatusViewVariants = StatusViewVariants;
var propTypes = {
  /**
   * An array of objects containing terra-button properties. A key attribute is required for each object.
   * This array is used to render buttons in the bottom section.
   * Example:`[{ text: 'Button 1', key: 1, variant: 'neutral', onClick: onClickFunction}]`
   */
  buttonAttrs: _propTypes.default.arrayOf(_propTypes.default.shape(_terraButton.default.propTypes)),
  /**
   * Display a custom glyph. Overrides a variant's default glyph.
   * Set `focusable=false` for svg element used as `customGlyph`.
   */
  customGlyph: _propTypes.default.node,
  /**
   *  Aligns the component at the top of the container rather than "centered"
   */
  isAlignedTop: _propTypes.default.bool,
  /**
   * Determines if the glyph should be displayed.
   */
  isGlyphHidden: _propTypes.default.bool,
  /**
   * The descriptive text, displayed under the title.
   */
  message: _propTypes.default.string,
  /**
   * The title displayed under the glyph. Variants contain default titles that can be overriden by this prop.
   */
  title: _propTypes.default.string,
  /**
   * Sets the glyph and title using a pre-baked variant. One of the following: `no-data`,
   * `no-matching-results`, `not-authorized`, or `error`
   */
  variant: _propTypes.default.oneOf(['no-data', 'no-matching-results', 'not-authorized', 'error'])
};
/* eslint-enable react/forbid-foreign-prop-types */

var defaultProps = {
  buttonAttrs: [],
  customGlyph: undefined,
  isAlignedTop: false,
  isGlyphHidden: false,
  message: undefined,
  title: undefined,
  variant: undefined
};
var generateButtons = function generateButtons(buttonAttrsArray) {
  if (!buttonAttrsArray.length) {
    return undefined;
  }
  return buttonAttrsArray.map(function (button) {
    return /*#__PURE__*/_react.default.createElement(_terraButton.default, _extends({}, button, {
      className: cx(['button', button.className])
    }));
  });
};
var StatusView = function StatusView(_ref) {
  var buttonAttrs = _ref.buttonAttrs,
    customGlyph = _ref.customGlyph,
    isAlignedTop = _ref.isAlignedTop,
    isGlyphHidden = _ref.isGlyphHidden,
    message = _ref.message,
    title = _ref.title,
    variant = _ref.variant,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var glyphSection;
  if (customGlyph && !isGlyphHidden) {
    glyphSection = /*#__PURE__*/_react.default.createElement("div", {
      className: cx('glyph')
    }, customGlyph);
  } else if (variant && !isGlyphHidden) {
    glyphSection = /*#__PURE__*/_react.default.createElement("div", {
      className: cx('glyph')
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: cx(variant, 'glyph-icon')
    }));
  }
  var defaultTitle;
  if (variant) {
    defaultTitle = /*#__PURE__*/_react.default.createElement(_reactIntl.FormattedMessage, {
      id: "Terra.status-view.".concat(variant)
    });
  }

  // Custom title takes precedence
  var titleSection;
  if (title || defaultTitle) {
    titleSection = /*#__PURE__*/_react.default.createElement("p", {
      className: cx('title')
    }, title || defaultTitle);
  }
  var messageSection;
  if (message) {
    messageSection = /*#__PURE__*/_react.default.createElement("p", {
      className: cx('message')
    }, message);
  }
  var actionSection;
  var buttons = generateButtons(buttonAttrs);
  if (buttons) {
    actionSection = /*#__PURE__*/_react.default.createElement("div", {
      className: cx('actions')
    }, buttons);
  }
  var dividerSection;
  if (titleSection && (messageSection || actionSection)) {
    dividerSection = /*#__PURE__*/_react.default.createElement("div", {
      className: cx('divider')
    }, /*#__PURE__*/_react.default.createElement(_terraDivider.default, null));
  }
  var outerViewClassNames = (0, _classnames.default)(cx('outer-view', {
    'is-aligned-top': isAlignedTop
  }, theme.className), customProps.className);
  var innerViewClassNames = cx(['inner-view']);
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, customProps, {
    className: outerViewClassNames
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: cx('top-space')
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: innerViewClassNames
  }, glyphSection, titleSection, dividerSection, messageSection, actionSection), /*#__PURE__*/_react.default.createElement("div", {
    className: cx('bottom-space')
  }));
};
StatusView.propTypes = propTypes;
StatusView.defaultProps = defaultProps;
var _default = StatusView;
exports.default = _default;