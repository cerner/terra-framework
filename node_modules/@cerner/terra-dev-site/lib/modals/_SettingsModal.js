"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _terraButton = _interopRequireDefault(require("terra-button"));
var _terraActionFooter = _interopRequireDefault(require("terra-action-footer"));
var _terraContentContainer = _interopRequireDefault(require("terra-content-container"));
var _terraActionHeader = _interopRequireDefault(require("terra-action-header"));
var _NativeSelect = _interopRequireDefault(require("terra-form-select/lib/native-select/NativeSelect"));
var _terraFormField = _interopRequireDefault(require("terra-form-field"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _disclosureManager = require("terra-application/lib/disclosure-manager");
var _AppSettingsContext = _interopRequireDefault(require("../site/_AppSettingsContext"));
var _SettingsModalModule = _interopRequireDefault(require("./SettingsModal.module.scss"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var cx = _bind.default.bind(_SettingsModalModule.default);
var SettingsModal = function SettingsModal() {
  var appSettings = _react.default.useContext(_AppSettingsContext.default);
  var _useState = (0, _react.useState)({
      locale: appSettings.currentLocale,
      theme: appSettings.currentTheme,
      direction: appSettings.currentDirection
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var locale = state.locale,
    theme = state.theme,
    direction = state.direction;
  var locales = appSettings.locales,
    themes = appSettings.themes,
    directions = appSettings.directions;
  var disclosureManager = _react.default.useContext(_disclosureManager.DisclosureManagerContext);
  return /*#__PURE__*/_react.default.createElement(_terraContentContainer.default, {
    fill: true,
    header: /*#__PURE__*/_react.default.createElement(_terraActionHeader.default, {
      title: "Settings",
      onBack: disclosureManager.goBack,
      onClose: disclosureManager.closeDisclosure
    }),
    footer: /*#__PURE__*/_react.default.createElement(_terraActionFooter.default, {
      end: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_terraButton.default, {
        text: "Submit",
        id: "submit",
        variant: _terraButton.default.Opts.Variants.EMPHASIS,
        className: cx('button'),
        onClick: function onClick() {
          appSettings.onUpdate({
            locale: locale,
            theme: theme,
            direction: direction
          });
          disclosureManager.dismiss();
        }
      }), /*#__PURE__*/_react.default.createElement(_terraButton.default, {
        text: "Cancel",
        id: "cancel",
        className: cx('button'),
        onClick: function onClick() {
          disclosureManager.dismiss();
        }
      }))
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('container')
  }, locales.length > 1 ? /*#__PURE__*/_react.default.createElement(_terraFormField.default, {
    label: "Locale",
    htmlFor: "terra-dev-site-locale-select"
  }, /*#__PURE__*/_react.default.createElement(_NativeSelect.default, {
    isFilterStyle: true,
    ariaLabel: "Locale",
    id: "terra-dev-site-locale-select",
    value: locale,
    onChange: function onChange(event) {
      setState({
        locale: event.currentTarget.value,
        theme: theme,
        direction: direction
      });
    },
    options: locales.map(function (value) {
      return {
        value: value,
        display: value
      };
    })
  })) : undefined, themes.length > 1 ? /*#__PURE__*/_react.default.createElement(_terraFormField.default, {
    label: "Theme",
    htmlFor: "terra-dev-site-theme-select"
  }, /*#__PURE__*/_react.default.createElement(_NativeSelect.default, {
    isFilterStyle: true,
    ariaLabel: "Theme",
    id: "terra-dev-site-theme-select",
    value: theme,
    onChange: function onChange(event) {
      setState({
        locale: locale,
        theme: event.currentTarget.value,
        direction: direction
      });
    },
    options: themes.map(function (value) {
      return {
        value: value,
        display: value
      };
    })
  })) : undefined, directions.length > 1 ? /*#__PURE__*/_react.default.createElement(_terraFormField.default, {
    label: "Direction",
    htmlFor: "terra-dev-site-direction-select"
  }, /*#__PURE__*/_react.default.createElement(_NativeSelect.default, {
    isFilterStyle: true,
    ariaLabel: "Direction",
    id: "terra-dev-site-direction-select",
    value: direction,
    onChange: function onChange(event) {
      setState({
        locale: locale,
        theme: theme,
        direction: event.currentTarget.value
      });
    },
    options: directions.map(function (value) {
      return {
        value: value,
        display: value
      };
    })
  })) : undefined));
};
var _default = SettingsModal;
exports.default = _default;