"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StatusViewVariants = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _terraButton = _interopRequireDefault(require("terra-button"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _StatusLayout = _interopRequireDefault(require("terra-application/lib/workspace/shared/StatusLayout"));
var _CardLayout = _interopRequireDefault(require("./CardLayout"));
var _Card = _interopRequireDefault(require("./Card"));
var _StatusLayoutModule = _interopRequireDefault(require("./StatusLayout.module.scss"));
var cx = _bind.default.bind(_StatusLayoutModule.default);
var StatusViewVariants = {
  NODATA: 'no-data',
  NOMATCHINGRESULTS: 'no-matching-results',
  NOTAUTHORIZED: 'not-authorized',
  ERROR: 'error'
};

/* eslint-disable react/forbid-foreign-prop-types */
exports.StatusViewVariants = StatusViewVariants;
var propTypes = {
  /**
   * An array of objects containing terra-button properties. A key attribute is required for each object.
   * This array is used to render buttons in the bottom section.
   * Example:`[{ text: 'Button 1', key: 1, variant: 'neutral', onClick: onClickFunction}]`
   */
  buttonAttrs: _propTypes.default.arrayOf(_propTypes.default.shape(_terraButton.default.propTypes)),
  /**
   * Display a custom glyph. Overrides a variant's default glyph.
   * Set `focusable=false` for svg element used as `customGlyph`.
   */
  customGlyph: _propTypes.default.node,
  /**
   *  Aligns the component at the top of the container rather than "centered"
   */
  isAlignedTop: _propTypes.default.bool,
  /**
   * Determines if the glyph should be displayed.
   */
  isGlyphHidden: _propTypes.default.bool,
  /**
   * The descriptive text, displayed under the title.
   */
  message: _propTypes.default.string,
  /**
   * The title displayed under the glyph. Variants contain default titles that can be overriden by this prop.
   */
  title: _propTypes.default.string,
  /**
   * Sets the glyph and title using a pre-baked variant. One of the following: `no-data`,
   * `no-matching-results`, `not-authorized`, or `error`
   */
  variant: _propTypes.default.oneOf(['no-data', 'no-matching-results', 'not-authorized', 'error'])
};
/* eslint-enable react/forbid-foreign-prop-types */

var defaultProps = {
  buttonAttrs: [],
  customGlyph: undefined,
  isAlignedTop: false,
  isGlyphHidden: false,
  message: undefined,
  title: undefined,
  variant: undefined
};
var StatusLayout = function StatusLayout(props) {
  return /*#__PURE__*/_react.default.createElement(_CardLayout.default, null, /*#__PURE__*/_react.default.createElement(_Card.default, null, /*#__PURE__*/_react.default.createElement("div", {
    classnames: cx('outer-view')
  }, /*#__PURE__*/_react.default.createElement("div", {
    classnames: cx('inner-view')
  }, /*#__PURE__*/_react.default.createElement(_StatusLayout.default, props)))));
};
StatusLayout.propTypes = propTypes;
StatusLayout.defaultProps = defaultProps;
var _default = StatusLayout;
exports.default = _default;