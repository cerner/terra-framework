"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _IconLeft = _interopRequireDefault(require("terra-icon/lib/icon/IconLeft"));
var _IconRollup = _interopRequireDefault(require("terra-icon/lib/icon/IconRollup"));
var _terraPopup = _interopRequireDefault(require("terra-popup"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _actionMenu = _interopRequireWildcard(require("terra-application/lib/action-menu"));
var _applicationIntl = require("terra-application/lib/application-intl");
var _useElementSize2 = _interopRequireWildcard(require("../../shared/useElementSize"));
var _PageContainerContext = _interopRequireDefault(require("../../layouts/page-container/PageContainerContext"));
var _PageHeaderButton = _interopRequireDefault(require("./PageHeaderButton"));
var _PageHeaderModule = _interopRequireDefault(require("./PageHeader.module.scss"));
var _excluded = ["icon"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var cx = _bind.default.bind(_PageHeaderModule.default);
var propTypes = {
  /**
   * A PageActions element containing action definitions to render as controls
   * within the header.
   */
  actions: _propTypes.default.element,
  /**
   * The label for the Page that the header is being rendered for.
   */
  label: _propTypes.default.string,
  /**
   * A NotificationBanners element type (as provided by the useNotificationBanners
   * hook) to be rendered alongside the other header contents.
   */
  onSelectBack: _propTypes.default.func
};
var PageHeader = function PageHeader(_ref) {
  var actions = _ref.actions,
    label = _ref.label,
    onSelectBack = _ref.onSelectBack;
  var intl = _react.default.useContext(_applicationIntl.ApplicationIntlContext);
  var pageContainerContext = _react.default.useContext(_PageContainerContext.default);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var headerContainerRef = _react.default.useRef();
  var moreActionsButtonRef = _react.default.useRef();
  var _React$useState = _react.default.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    showMenu = _React$useState2[0],
    setShowMenu = _React$useState2[1];
  var _useElementSize = (0, _useElementSize2.default)(headerContainerRef, _useElementSize2.breakpointFilter),
    activeBreakpoint = _useElementSize.activeBreakpoint;

  // We filter out any falsy action values that may have been provided
  // due to inline boolean logic.
  var validActions = [];
  if (actions) {
    validActions = _react.default.Children.toArray(actions.props.children).filter(function (child) {
      return child;
    });
  }
  if (validActions.length > 3) {
    throw new Error("[terra-application] ".concat(label, " cannot render more than three actions."));
  }
  var actionsAreCollapsed = activeBreakpoint === 'tiny' && validActions.length > 1;
  var backActionButton = onSelectBack ? /*#__PURE__*/_react.default.createElement(_PageHeaderButton.default, {
    icon: /*#__PURE__*/_react.default.createElement(_IconLeft.default, null),
    ariaLabel: intl.formatMessage({
      id: 'terraDevSite.pageHeader.back'
    }),
    onSelect: onSelectBack
  }) : undefined;

  // Actions are either rendered as buttons or as options in in a menu,
  // depending on the current header size and the number of actions present. If
  // a menu is necessary, a single button is rendered to present that menu upon
  // selection.
  var pageActions = actionsAreCollapsed ? /*#__PURE__*/_react.default.createElement(_PageHeaderButton.default, {
    refCallback: function refCallback(ref) {
      moreActionsButtonRef.current = ref;
      validActions.forEach(function (action) {
        if (action.props.refCallback) {
          action.props.refCallback(ref);
        }
      });
    },
    className: cx('header-button'),
    icon: /*#__PURE__*/_react.default.createElement(_IconRollup.default, null),
    ariaLabel: intl.formatMessage({
      id: 'terraDevSite.pageHeader.moreActions'
    }),
    onSelect: function onSelect() {
      setShowMenu(true);
    }
  }) : validActions.map(function (action) {
    return /*#__PURE__*/_react.default.createElement(_PageHeaderButton.default, {
      key: action.key,
      refCallback: action.props.refCallback,
      icon: action.props.icon,
      ariaLabel: action.props.label,
      onSelect: action.props.onSelect
    });
  });

  // The actions defined by the page container are rendered next to the
  // consumer-provided actions, with a divider included only if both page and
  // container actions are present.
  var endActions = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, pageActions, pageContainerContext !== null && pageContainerContext !== void 0 && pageContainerContext.containerActions.length ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, validActions.length ? /*#__PURE__*/_react.default.createElement("div", {
    className: cx('actions-divider')
  }) : undefined, pageContainerContext.containerActions.map(function (action) {
    return /*#__PURE__*/_react.default.createElement(_PageHeaderButton.default, {
      key: action.key,
      ariaLabel: action.label,
      icon: action.icon,
      onSelect: action.onSelect,
      isDisabled: !action.onSelect
    });
  })) : undefined);
  var startActions = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, pageContainerContext !== null && pageContainerContext !== void 0 && pageContainerContext.startActions.length ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, pageContainerContext.startActions.map(function (_ref2) {
    var Icon = _ref2.icon,
      action = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
    return /*#__PURE__*/_react.default.createElement(_PageHeaderButton.default, {
      key: action.key,
      ariaLabel: action.label,
      icon: /*#__PURE__*/_react.default.createElement(Icon, null),
      onSelect: action.onSelect,
      isDisabled: !action.onSelect
    });
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: cx('actions-divider')
  })) : undefined);
  var actionsMenu = showMenu ? /*#__PURE__*/_react.default.createElement(_terraPopup.default, {
    isOpen: true,
    targetRef: function targetRef() {
      return moreActionsButtonRef.current;
    },
    onRequestClose: function onRequestClose() {
      setShowMenu(false);
    },
    contentHeight: "auto",
    contentWidth: "auto",
    contentAttachment: "top right",
    isContentFocusDisabled: true,
    isHeaderDisabled: true,
    popupContentRole: "none"
  }, /*#__PURE__*/_react.default.createElement(_actionMenu.default, {
    label: intl.formatMessage({
      id: 'terraDevSite.pageHeader.actionsMenu'
    }, {
      label: label
    }),
    onRequestClose: function onRequestClose() {
      setShowMenu(false);
    }
  }, validActions.map(function (action) {
    return /*#__PURE__*/_react.default.createElement(_actionMenu.ActionMenuItem, {
      key: action.key,
      actionKey: action.key,
      label: action.props.label,
      isDisabled: !action.props.onSelect,
      icon: action.props.icon,
      onAction: function onAction() {
        setShowMenu(false);
        action.props.onSelect();
      }
    });
  }))) : undefined;
  var pageHeaderClassNames = cx('page-header-container', theme.className);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: headerContainerRef,
    className: pageHeaderClassNames
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('page-header')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('start-actions-container')
  }, startActions, backActionButton), /*#__PURE__*/_react.default.createElement("div", {
    className: cx('label-container'),
    role: "heading",
    "aria-level": 1
  }, label), /*#__PURE__*/_react.default.createElement("div", {
    className: cx('end-actions-container')
  }, endActions)), actionsMenu);
};
PageHeader.propTypes = propTypes;
var _default = PageHeader;
exports.default = _default;