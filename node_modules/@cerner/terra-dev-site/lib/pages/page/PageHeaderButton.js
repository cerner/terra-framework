"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _PageHeaderButtonModule = _interopRequireDefault(require("./PageHeaderButton.module.scss"));
var cx = _bind.default.bind(_PageHeaderButtonModule.default);
var propTypes = {
  /**
   * The text for the button's aria-label attribute.
   */
  ariaLabel: _propTypes.default.string.isRequired,
  /**
   * The icon to display for the associated action.
   */
  icon: _propTypes.default.element.isRequired,
  /**
   * Callback function for the selection of the button. If no function is
   * provided, the button will render as disabled.
   */
  onSelect: _propTypes.default.func,
  /**
   * Ref callback for button.
   */
  refCallback: _propTypes.default.func
};
var PageHeaderButton = function PageHeaderButton(_ref) {
  var ariaLabel = _ref.ariaLabel,
    icon = _ref.icon,
    onSelect = _ref.onSelect,
    refCallback = _ref.refCallback;
  var theme = _react.default.useContext(_terraThemeContext.default);
  var buttonClassNames = cx('page-header-button', theme.className);
  return /*#__PURE__*/_react.default.createElement("button", {
    type: "button",
    className: buttonClassNames,
    onClick: onSelect ? function (event) {
      event.preventDefault();
      onSelect();
    } : undefined,
    onBlur: function onBlur(event) {
      event.currentTarget.setAttribute('data-focus-styles-enabled', 'true');
    },
    onMouseDown: function onMouseDown(event) {
      event.currentTarget.setAttribute('data-focus-styles-enabled', 'false');
    },
    "aria-label": ariaLabel,
    disabled: !onSelect,
    "data-focus-styles-enabled": true,
    ref: refCallback
  }, /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    className: cx('button-inner')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('button-image'),
    title: ariaLabel
  }, icon)));
};
PageHeaderButton.propTypes = propTypes;
var _default = PageHeaderButton;
exports.default = _default;