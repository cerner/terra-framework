"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _DynamicOverlayContainer = _interopRequireDefault(require("terra-application/lib/workspace/shared/DynamicOverlayContainer"));
var _PageHeader = _interopRequireDefault(require("./PageHeader"));
var _PageActions = _interopRequireDefault(require("./PageActions"));
var _PageAction = _interopRequireDefault(require("./PageAction"));
var _PageModule = _interopRequireDefault(require("./Page.module.scss"));
var cx = _bind.default.bind(_PageModule.default);
var propTypes = {
  /**
   * The string description of the Page to present to the user. This value is
   * also used to build description text for screen readers and accessibility
   * tools.
   */
  label: _propTypes.default.string.isRequired,
  /**
   * A PageActions instance defining the Actions to present within the Page's
   * header. Only the PageActions component is supported.
   */
  actions: _propTypes.default.element,
  /**
   * A function to be executed upon selection of the Page's back button. If not
   * provided, the back button will not be rendered.
   */
  onRequestClose: _propTypes.default.func,
  /**
   * A react element to render inside an activity overlay, for example when loading.
   */
  activityOverlay: _propTypes.default.element,
  /**
  * A react element to render to display statues, for example a 404.
  */
  statusOverlay: _propTypes.default.element,
  /**
   * The components to render within the Page.
   */
  children: _propTypes.default.node
};
var Page = function Page(_ref) {
  var label = _ref.label,
    actions = _ref.actions,
    onRequestClose = _ref.onRequestClose,
    children = _ref.children,
    statusOverlay = _ref.statusOverlay,
    activityOverlay = _ref.activityOverlay;
  if (actions && actions.type !== _PageActions.default) {
    throw new Error("[terra-application] Page.Actions must be used to define actions for ".concat(label, "."));
  }
  var theme = _react.default.useContext(_terraThemeContext.default);

  // If onRequestClose is provided, we check for unsaved changes prior to
  // executing the callback (unless explicitly disabled).
  var handleOnSelectBack = onRequestClose ? function () {
    onRequestClose();
  } : undefined;
  var pageClassNames = cx('page', theme.className);
  var overlays = _react.default.useMemo(function () {
    var overlaysToRender = [];
    if (statusOverlay) {
      overlaysToRender.push({
        key: 'status-overlay',
        component: statusOverlay
      });
    }
    if (activityOverlay) {
      overlaysToRender.push({
        key: 'activity-overlay',
        component: activityOverlay
      });
    }
    return overlaysToRender;
  }, [statusOverlay, activityOverlay]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: pageClassNames
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('header')
  }, /*#__PURE__*/_react.default.createElement(_PageHeader.default, {
    onSelectBack: handleOnSelectBack,
    label: label,
    actions: actions
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: cx('content')
  }, /*#__PURE__*/_react.default.createElement(_DynamicOverlayContainer.default, {
    overlays: overlays
  }, children)));
};
Page.propTypes = propTypes;
Page.Actions = _PageActions.default;
Page.Action = _PageAction.default;
var _default = Page;
exports.default = _default;