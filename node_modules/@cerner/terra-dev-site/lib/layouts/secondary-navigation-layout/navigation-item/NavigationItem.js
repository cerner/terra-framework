"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _NavigationItemContext = _interopRequireDefault(require("./NavigationItemContext"));
var _pageContainer = _interopRequireDefault(require("../../page-container"));
// import ActiveMainProvider from '../main-container/private/ActiveMainProvider';

var propTypes = {
  /**
   * The string uniquely identifying the navigation item within the application.
   * This value must be globally unique and not shared between multiple tiers of
   * navigation (primary, secondary, etc.).
   */
  navigationKey: _propTypes.default.string.isRequired,
  /**
   * The string description of the NavigationItem to display to the user.
   */
  label: _propTypes.default.string.isRequired,
  /**
   * A function called to generate the child content for the NavigationItem.
   * A parameter indicating whether or not the NavigationItem is active is
   * provided.
   *
   * If provided, the `renderPage` and `children` props will be ignored.
   *
   * Signature: `renderLayout({ isActive })`
   */
  renderLayout: _propTypes.default.func,
  /**
   * A function called to render a single Page component as content for the
   * NavigationItem.
   *
   * If provided, the `children` prop will be ignored.
   *
   * Signature: `renderPage({ isActive })`
   */
  renderPage: _propTypes.default.func,
  /**
   * The child components to render within the NavigationItem.
   */
  children: _propTypes.default.node,
  /**
   * @private
   * A boolean indicating whether or not the NavigationItem is considered active
   * based on the determined active navigation key of the layout consuming it.
   */
  isActive: _propTypes.default.bool,
  /**
   * @private
   * The HTMLElement to which the NavigationItem's content should be rendered.
   */
  portalElement: _propTypes.default.instanceOf(HTMLElement)
};
var NavigationItem = function NavigationItem(_ref) {
  var navigationKey = _ref.navigationKey,
    children = _ref.children,
    renderLayout = _ref.renderLayout,
    renderPage = _ref.renderPage,
    isActive = _ref.isActive,
    portalElement = _ref.portalElement;
  var ancestorNavigationItemContext = _react.default.useContext(_NavigationItemContext.default);
  var navigationItemContextValue = _react.default.useMemo(function () {
    return {
      // If an ancestor NavigationItem is inactivated, then we must consider
      // this entire branch inactivated as well.
      isActive: isActive && ancestorNavigationItemContext.isActive,
      navigationKeys: [].concat((0, _toConsumableArray2.default)(ancestorNavigationItemContext.navigationKeys), [navigationKey])
    };
  }, [isActive, navigationKey, ancestorNavigationItemContext.isActive, ancestorNavigationItemContext.navigationKeys]);
  var content;
  if (renderLayout) {
    content = renderLayout({
      isActive: isActive
    });
  } else if (renderPage) {
    content = /*#__PURE__*/_react.default.createElement(_pageContainer.default, null, renderPage({
      isActive: isActive
    }));
  } else {
    content = children;
  }
  return /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_react.default.createElement(_NavigationItemContext.default.Provider, {
    value: navigationItemContextValue
  }, content), portalElement);
};
NavigationItem.propTypes = propTypes;
var _default = NavigationItem;
exports.default = _default;