"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _IconCaretRight = _interopRequireDefault(require("terra-icon/lib/icon/IconCaretRight"));
var _IconCaretDown = _interopRequireDefault(require("terra-icon/lib/icon/IconCaretDown"));
var _CollapsingNavigationMenuModule = _interopRequireDefault(require("./CollapsingNavigationMenu.module.scss"));
var cx = _bind.default.bind(_CollapsingNavigationMenuModule.default);
var propTypes = {
  item: _propTypes.default.shape({
    /**
     * Text for the menu item
     */
    text: _propTypes.default.string,
    /**
     * On-click the menu item will take you here
     */
    path: _propTypes.default.string,
    /**
     * Sub menu items
     */
    childItems: _propTypes.default.arrayOf(_propTypes.default.object),
    /**
     * Name of the menu item
     */
    name: _propTypes.default.string
  }).isRequired,
  /**
   * HTML ID to be assigned to the menu item element
   */
  id: _propTypes.default.string.isRequired,
  /**
   * Indicates if a menu item is expanded or not
   */
  itemIsOpen: _propTypes.default.bool,
  /**
   * Indicates if the menu item is currently selected or not
   */
  isSelected: _propTypes.default.bool,
  /**
   * Child elements to render within the menu item
   */
  childItems: _propTypes.default.arrayOf(_propTypes.default.element),
  /**
   * Indicates if the menu item is a first level element or not
   */
  firstLevel: _propTypes.default.bool,
  /**
   * Function to handle a keyDown event
   */
  handleKeyDown: _propTypes.default.func.isRequired,
  /**
   * Function to handle a click event
   */
  handleOnClick: _propTypes.default.func.isRequired
};

/**
 * Enables focus styles for the target of the given event. Typically used as an onBlur callback on selectable elements.
 */
var enableFocusStyles = function enableFocusStyles(event) {
  event.currentTarget.setAttribute('data-focus-styles-enabled', 'true');
};

/**
 * Disables focus styles for the target of the given event. Typically used as an onMouseDown callback on selectable elements.
 */
var disableFocusStyles = function disableFocusStyles(event) {
  event.currentTarget.setAttribute('data-focus-styles-enabled', 'false');
};
var CollapsingNavigationMenuItem = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var item = _ref.item,
    id = _ref.id,
    itemIsOpen = _ref.itemIsOpen,
    isSelected = _ref.isSelected,
    childItems = _ref.childItems,
    firstLevel = _ref.firstLevel,
    handleKeyDown = _ref.handleKeyDown,
    handleOnClick = _ref.handleOnClick;
  var itemHasChildren = item.childItems !== undefined;
  var menuItemClassNames = (0, _bind.default)(cx(['item', {
    'is-selected': isSelected
  }]));
  var optionalAttributes = itemHasChildren ? {
    'aria-expanded': itemIsOpen
  } : {};
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
    key: item.path
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: !firstLevel ? cx('indent') : null
  }, /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    className: menuItemClassNames,
    tabIndex: "-1",
    role: "treeitem",
    id: id,
    onKeyDown: function onKeyDown(event) {
      return handleKeyDown(event, item);
    },
    onClick: function onClick(event) {
      return handleOnClick(event, item);
    },
    onBlur: enableFocusStyles,
    onMouseDown: disableFocusStyles,
    "data-focus-styles-enabled": true,
    ref: ref
  }, optionalAttributes), itemHasChildren ? /*#__PURE__*/_react.default.createElement("span", {
    className: cx('disclosure')
  }, itemIsOpen ? /*#__PURE__*/_react.default.createElement(_IconCaretDown.default, {
    className: cx('caret')
  }) : /*#__PURE__*/_react.default.createElement(_IconCaretRight.default, {
    className: cx('caret')
  })) : null, item.name), childItems));
});
CollapsingNavigationMenuItem.propTypes = propTypes;
var _default = CollapsingNavigationMenuItem;
exports.default = _default;