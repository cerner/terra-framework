"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraButton = _interopRequireWildcard(require("terra-button"));
var _IconLeft = _interopRequireDefault(require("terra-icon/lib/icon/IconLeft"));
var _theme = require("terra-application/lib/theme");
var _applicationIntl = require("terra-application/lib/application-intl");
var _SideNavHeaderModule = _interopRequireDefault(require("./SideNavHeader.module.scss"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var cx = _bind.default.bind(_SideNavHeaderModule.default);
var propTypes = {
  /**
   * A function called to request close of the side nav.
   */
  onRequestClose: _propTypes.default.func,
  /**
   * The label for the side nav header.
   */
  label: _propTypes.default.string
};
var SideNavHeader = function SideNavHeader(_ref) {
  var onRequestClose = _ref.onRequestClose,
    label = _ref.label;
  var theme = _react.default.useContext(_theme.ThemeContext);
  var applicationIntl = _react.default.useContext(_applicationIntl.ApplicationIntlContext);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: cx('page-header-container', theme.className)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('page-layout-header')
  }, onRequestClose ? /*#__PURE__*/_react.default.createElement("div", {
    className: cx('back-button-container')
  }, /*#__PURE__*/_react.default.createElement(_terraButton.default, {
    className: cx(['header-button', 'back-button']),
    icon: /*#__PURE__*/_react.default.createElement(_IconLeft.default, null),
    text: applicationIntl.formatMessage({
      id: 'terraDevSite.pageHeader.back'
    }),
    onClick: onRequestClose,
    variant: _terraButton.ButtonVariants.UTILITY
  })) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('label-container')
  }, label)));
};
SideNavHeader.propTypes = propTypes;
var _default = SideNavHeader;
exports.default = _default;