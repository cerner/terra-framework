"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _keycodeJs = require("keycode-js");
var _IconLeftPane = _interopRequireDefault(require("terra-icon/lib/icon/IconLeftPane"));
var _theme = require("terra-application/lib/theme");
var _breakpoints = require("terra-application/lib/breakpoints");
var _usePortalManager3 = _interopRequireDefault(require("../../shared/usePortalManager"));
var _navigationItem = _interopRequireDefault(require("./navigation-item"));
var _pageContainer = _interopRequireDefault(require("../page-container"));
var _deferExecution = _interopRequireDefault(require("../../utils/defer-execution"));
var _LayoutActionsContext = _interopRequireDefault(require("./LayoutActionsContext"));
var _SecondaryNavigationGroup = _interopRequireDefault(require("./SecondaryNavigationGroup"));
var _CollapsingNavigationMenu = _interopRequireDefault(require("./side-nav/CollapsingNavigationMenu"));
var _SideNavHeader = _interopRequireDefault(require("./side-nav/SideNavHeader"));
var _SecondaryNavigationLayoutModule = _interopRequireDefault(require("./SecondaryNavigationLayout.module.scss"));
var cx = _bind.default.bind(_SecondaryNavigationLayoutModule.default);
var sideNavOverlayBreakpoints = ['tiny', 'small', 'medium'];
var propTypes = {
  /**
   * A string id used to uniquely identify the SecondaryNavigationLayout and its
   * components in the DOM.
   */
  id: _propTypes.default.string.isRequired,
  /**
   * A string applied to the side bar as a label.
   */
  label: _propTypes.default.string.isRequired,
  /**
   * A string key representing the currently active navigation item. This value
   * must correspond to a NavigationItem provided as a child to the layout.
   *
   * If no matching value exists, the `renderNavigationFallback` prop will be
   * executed to determine the rendered content. If no NavigationItem children
   * are expected to be provided, this prop should be left undefined.
   */
  activeNavigationKey: _propTypes.default.string.isRequired,
  /**
   * A function to be executed upon the selection of a navigation item.
   * Ex: `onSelectNavigationItem(String selectedItemKey, Object metaData)`
   */
  onSelectNavigationItem: _propTypes.default.func,
  /**
   * A function used to render a single page component within the body of
   * the SecondaryNavigationLayout.
   *
   * This prop should be used only when secondary navigation is not required for
   * the consuming application. If navigation capabilities are required,
   * NavigationItem children must be used instead.
   */
  renderPage: _propTypes.default.func,
  /**
   * A function used to render a single layout component within the body of
   * the SecondaryNavigationLayout.
   *
   * This prop should be used only when secondary navigation is not required for
   * the consuming application. If navigation capabilities are required,
   * NavigationItem children must be used instead.
   */
  renderLayout: _propTypes.default.func,
  /**
   * A function used to render a fallback component when the provided
   * activeNavigationKey does not correspond to a provided NavigationItem child.
   *
   * If no NavigationItem children are provided, this prop is ignored.
   */
  renderNavigationFallback: _propTypes.default.func,
  /**
   * A collection of child components to render within the layout body.
   *
   * Providing a NavigationItem component as a direct child will result in a
   * navigation entry being added to the SecondaryNavigationLayout side bar. Any
   * non-NavigationItem children provided alongside NavigationItem children will
   * **not** be rendered.
   *
   * If another layout is to be rendered within this layout, it is recommended
   * to use the `renderLayout` prop instead. If the renderLayout prop is
   * provided, children will be ignored, regardless of its contents.
   */
  children: _propTypes.default.node
};
function mapChildItem(item) {
  return {
    text: item.label,
    name: item.label,
    path: item.key,
    childItems: item.childItems ? item.childItems.map(mapChildItem) : undefined
  };
}
var SecondaryNavigationLayout = function SecondaryNavigationLayout(_ref) {
  var id = _ref.id,
    label = _ref.label,
    activeNavigationKey = _ref.activeNavigationKey,
    children = _ref.children,
    onSelectNavigationItem = _ref.onSelectNavigationItem,
    renderPage = _ref.renderPage,
    renderLayout = _ref.renderLayout,
    renderNavigationFallback = _ref.renderNavigationFallback;
  var activeBreakpoint = _react.default.useContext(_breakpoints.ActiveBreakpointContext);
  var parentLayoutActions = _react.default.useContext(_LayoutActionsContext.default);
  var theme = _react.default.useContext(_theme.ThemeContext);
  var pageContainerRef = _react.default.useRef();
  var sideNavBodyRef = _react.default.useRef();
  var sideNavPanelRef = _react.default.useRef();
  var sideNavOverlayRef = _react.default.useRef();
  var _usePortalManager = (0, _usePortalManager3.default)(activeNavigationKey, function () {
      (0, _deferExecution.default)(function () {
        document.body.focus();
      });
    }),
    _usePortalManager2 = (0, _slicedToArray2.default)(_usePortalManager, 3),
    contentElementRef = _usePortalManager2[0],
    pageContainerPortalsRef = _usePortalManager2[1],
    visibleNavigationKey = _usePortalManager2[2];
  var _React$useState = _react.default.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    sideNavOverlayIsVisible = _React$useState2[0],
    setSideNavOverlayIsVisible = _React$useState2[1];
  function getNavigationItems(childComponents) {
    return _react.default.Children.toArray(childComponents).reduce(function (accumulator, child) {
      var items = (0, _toConsumableArray2.default)(accumulator);
      if (child.type === _navigationItem.default) {
        items.push(child);
      } else if (child.type === _SecondaryNavigationGroup.default) {
        var groupItems = getNavigationItems(child.props.children);
        if (groupItems) {
          items.push.apply(items, (0, _toConsumableArray2.default)(groupItems));
        }
      }
      return items;
    }, []);
  }
  var navigationItems = getNavigationItems(children);
  var hasActiveNavigationItem = !!navigationItems.find(function (item) {
    return item.props.navigationKey === activeNavigationKey;
  });
  var hasSidebar = !!navigationItems.length;
  var hasOverlaySidebar = sideNavOverlayBreakpoints.indexOf(activeBreakpoint) !== -1;
  var sideNavIsVisible = hasSidebar && (sideNavOverlayIsVisible || sideNavOverlayBreakpoints.indexOf(activeBreakpoint) === -1);
  var layoutActionsContextValue = _react.default.useMemo(function () {
    var newStartActions = parentLayoutActions.startActions;
    if (hasSidebar && hasOverlaySidebar) {
      newStartActions = [].concat((0, _toConsumableArray2.default)(newStartActions), [{
        key: 'secondary-navigation-layout-toggle-navigation-panel',
        label: "Toggle Navigation Panel ".concat(sideNavOverlayIsVisible ? 'Closed' : 'Open'),
        icon: _IconLeftPane.default,
        onSelect: function onSelect() {
          setSideNavOverlayIsVisible(function (state) {
            return !state;
          });
        }
      }]);
    }
    return {
      startActions: newStartActions,
      endActions: parentLayoutActions.endActions
    };
  }, [parentLayoutActions.startActions, parentLayoutActions.endActions, hasSidebar, hasOverlaySidebar, sideNavOverlayIsVisible]);
  _react.default.useEffect(function () {
    var navigationItemKeys = navigationItems.map(function (item) {
      return item.props.navigationKey;
    });
    // Cleanup nodes for removed children
    var danglingPortalKeys = Object.keys(pageContainerPortalsRef.current).filter(function (itemKey) {
      return !navigationItemKeys.includes(itemKey);
    });
    danglingPortalKeys.forEach(function (pageKey) {
      delete pageContainerPortalsRef.current[pageKey];
    });
  }, [navigationItems, pageContainerPortalsRef]);
  var lastNavigationPanelOpenState = _react.default.useRef(sideNavOverlayIsVisible);
  _react.default.useEffect(function () {
    if (sideNavOverlayIsVisible && !lastNavigationPanelOpenState.current) {
      (0, _deferExecution.default)(function () {
        sideNavPanelRef.current.focus();
      });
    } else if (!sideNavOverlayIsVisible && lastNavigationPanelOpenState.current) {
      (0, _deferExecution.default)(function () {
        var mainElement = document.querySelector('main');
        if (mainElement) {
          mainElement.focus();
        }
      });
    }
    lastNavigationPanelOpenState.current = sideNavOverlayIsVisible;
  }, [sideNavOverlayIsVisible]);
  _react.default.useEffect(function () {
    if (!sideNavOverlayIsVisible) {
      return undefined;
    }
    function handleKeydown(e) {
      if (e.keyCode === _keycodeJs.KEY_ESCAPE) {
        if (e.target === pageContainerRef.current || pageContainerRef.current.contains(e.target)) {
          setSideNavOverlayIsVisible(false);
        }
      }
    }
    document.addEventListener('keydown', handleKeydown);
    return function () {
      document.removeEventListener('keydown', handleKeydown);
    };
  }, [sideNavOverlayIsVisible, setSideNavOverlayIsVisible]);
  function activatePage(pageKey) {
    setSideNavOverlayIsVisible(false);
    if (pageKey === activeNavigationKey) {
      return;
    }
    onSelectNavigationItem(pageKey);
  }
  function renderNavigationItems() {
    return navigationItems.map(function (item) {
      var _pageContainerPortals;
      var portalElement = (_pageContainerPortals = pageContainerPortalsRef.current[item.props.navigationKey]) === null || _pageContainerPortals === void 0 ? void 0 : _pageContainerPortals.element;
      if (!portalElement) {
        portalElement = document.createElement('div');
        portalElement.style.position = 'relative';
        portalElement.style.height = '100%';
        portalElement.style.width = '100%';
        portalElement.id = "side-nav-".concat(item.props.navigationKey);
        pageContainerPortalsRef.current[item.props.navigationKey] = {
          element: portalElement
        };
      }

      /**
       * The cloned element is wrapped in a keyed fragment to ensure the render order of
       * the mapped items.
       */
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
        key: item.props.navigationKey
      }, /*#__PURE__*/_react.default.cloneElement(item, {
        isActive: item.props.navigationKey === visibleNavigationKey,
        portalElement: portalElement
      }));
    });
  }
  function buildSideNavItems(childComponents) {
    return _react.default.Children.map(childComponents, function (child) {
      if (child.type === _navigationItem.default) {
        return {
          key: child.props.navigationKey,
          label: child.props.label
        };
      }
      if (child.type === _SecondaryNavigationGroup.default) {
        return {
          key: child.props.label,
          label: child.props.label,
          childItems: buildSideNavItems(child.props.children)
        };
      }
      return null;
    });
  }
  var content;
  if (renderPage) {
    content = /*#__PURE__*/_react.default.createElement(_pageContainer.default, null, renderPage());
  } else if (renderLayout) {
    content = renderLayout();
  } else if (navigationItems.length) {
    content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderNavigationItems(), !hasActiveNavigationItem && renderNavigationFallback ? renderNavigationFallback() : undefined);
  } else {
    content = children;
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('side-nav-container', theme.className),
    ref: pageContainerRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: sideNavPanelRef,
    className: cx('side-nav-sidebar', {
      visible: hasSidebar && sideNavIsVisible,
      overlay: hasOverlaySidebar
    }),
    tabIndex: "-1"
  }, hasSidebar && /*#__PURE__*/_react.default.createElement("div", {
    className: cx('sidebar-container')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cx('header-container')
  }, /*#__PURE__*/_react.default.createElement(_SideNavHeader.default, {
    label: label,
    onRequestClose: sideNavOverlayIsVisible ? function () {
      setSideNavOverlayIsVisible(false);
    } : undefined
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: cx('content')
  }, /*#__PURE__*/_react.default.createElement(_CollapsingNavigationMenu.default, {
    id: "".concat(id, "-side-nav"),
    selectedPath: activeNavigationKey,
    onSelect: function onSelect(key) {
      activatePage(key);
    },
    menuItems: [{
      childItems: buildSideNavItems(children).map(mapChildItem)
    }]
  })))), /*#__PURE__*/_react.default.createElement("div", {
    ref: sideNavBodyRef,
    className: cx('side-nav-body')
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: contentElementRef,
    className: cx('page-body'),
    inert: sideNavOverlayIsVisible ? 'true' : null
  }, /*#__PURE__*/_react.default.createElement(_LayoutActionsContext.default.Provider, {
    value: layoutActionsContextValue
  }, content)), sideNavOverlayIsVisible ?
  /*#__PURE__*/
  // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
  _react.default.createElement("div", {
    ref: sideNavOverlayRef,
    className: cx('side-nav-overlay'),
    onClick: function onClick() {
      setSideNavOverlayIsVisible(false);
    }
  }) : null)));
};
SecondaryNavigationLayout.propTypes = propTypes;
var _default = SecondaryNavigationLayout;
exports.default = _default;