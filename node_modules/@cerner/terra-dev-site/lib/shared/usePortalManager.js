"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPortalElement = exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _scrollPersistence = require("../utils/scroll-persistence/scroll-persistence");
/**
 * React hook used to manage the presentation of multiple portaled elements within a single container.
 * @param {string} activePortalKey - The identifier of the active portal. Must correspond to a key in the portalRefs value.
 * @param {function} onPortalActivated - The callback function executed upon portal activation.
 * function (activatedPortalKey, activatedPortalElement)
 * @param {function} onPortalDeactivated - The callback function executed upon portal deactivation.
 * function (deactivatedPortalKey, deactivatedPortalElement)
 * @returns {Array} An array containing 1. a ref to be used for the static container, and 2. a ref within which to store the portaled elements.
 */
var usePortalManager = function usePortalManager(activePortalKey, onPortalActivated, onPortalDeactivated) {
  var containerRef = _react.default.useRef();
  var portalsRef = _react.default.useRef({});
  var lastActiveItemKeyRef = _react.default.useRef();
  var _React$useState = _react.default.useState(),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    visiblePortalKey = _React$useState2[0],
    setVisiblePortalKey = _React$useState2[1];
  _react.default.useLayoutEffect(function () {
    if (!containerRef.current) {
      return;
    }
    var dataForActivePortal = portalsRef.current[activePortalKey];
    if (containerRef.current.contains(dataForActivePortal === null || dataForActivePortal === void 0 ? void 0 : dataForActivePortal.element)) {
      /**
       * If the container already contains the element for the active portal,
       * the hook can terminate without changes.
       */
      return;
    }
    if (lastActiveItemKeyRef.current) {
      /**
       * If a portal was previously active and is becoming inactive, its
       * scroll positions are recorded and the element is removed from the DOM.
       */
      var elementToRemove = portalsRef.current[lastActiveItemKeyRef.current].element;
      portalsRef.current[lastActiveItemKeyRef.current].scrollData = (0, _scrollPersistence.getPersistentScrollMap)(elementToRemove);
      containerRef.current.removeChild(elementToRemove);
      if (onPortalDeactivated) {
        onPortalDeactivated(lastActiveItemKeyRef.current, elementToRemove);
      }
    }
    if (dataForActivePortal !== null && dataForActivePortal !== void 0 && dataForActivePortal.element) {
      /**
       * If the activePortalKey matches a known element, that element is appended to the
       * container and any previously recorded scroll positions are applied.
       */
      containerRef.current.appendChild(dataForActivePortal.element);
      if (dataForActivePortal.scrollData) {
        (0, _scrollPersistence.applyScrollData)(dataForActivePortal.scrollData, dataForActivePortal.element);
      }
      lastActiveItemKeyRef.current = activePortalKey;
      setVisiblePortalKey(activePortalKey);
      if (onPortalActivated) {
        onPortalActivated(activePortalKey, dataForActivePortal.element);
      }
    } else {
      lastActiveItemKeyRef.current = undefined;
    }
  }, [activePortalKey, onPortalActivated, onPortalDeactivated]);
  return [containerRef, portalsRef, visiblePortalKey];
};

/**
 * Generates an element used to house portaled content.
 * @returns {element} The generated element with appropriate styling.
 */
var getPortalElement = function getPortalElement() {
  var portalElement = document.createElement('div');
  portalElement.style.position = 'relative';
  portalElement.style.height = '100%';
  portalElement.style.width = '100%';
  return portalElement;
};
exports.getPortalElement = getPortalElement;
var _default = usePortalManager;
exports.default = _default;