"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _AppSettingsContext = _interopRequireDefault(require("./_AppSettingsContext"));
var _siteConfigShapes = require("./siteConfigShapes");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var propTypes = {
  children: _propTypes.default.element.isRequired,
  settingsConfig: _siteConfigShapes.settingsConfigShape.isRequired
};

/* Use default locales or fall back on default. terra-toolkit v5.21.0 provides configurations from terraI18n,
  * so this reduces the number of places users need to define their locales.
  */
var locales = (typeof TERRA_AGGREGATED_LOCALES === "undefined" ? "undefined" : (0, _typeof2.default)(TERRA_AGGREGATED_LOCALES)) === 'object' ? TERRA_AGGREGATED_LOCALES : ['en'];
var themesConfig = (typeof TERRA_THEME_CONFIG === "undefined" ? "undefined" : (0, _typeof2.default)(TERRA_THEME_CONFIG)) === 'object' ? TERRA_THEME_CONFIG : {};
var scopedThemes = themesConfig.scoped || [];
var defaultThemeName = themesConfig.theme || 'terra-default-theme';
var themesMap = _objectSpread(_objectSpread({}, scopedThemes.reduce(function (acc, name) {
  acc[name] = name;
  return acc;
}, {})), {}, (0, _defineProperty2.default)({}, defaultThemeName, undefined));

// Sort themes alphabetically
var themes = Object.keys(themesMap).sort(function (a, b) {
  var nameA = a.toUpperCase(); // ignore upper and lowercase
  var nameB = b.toUpperCase(); // ignore upper and lowercase
  if (nameA < nameB) {
    return -1;
  }
  if (nameA > nameB) {
    return 1;
  }
  // names must be equal
  return 0;
});
var AppSettingsProvider = function AppSettingsProvider(_ref) {
  var settingsConfig = _ref.settingsConfig,
    children = _ref.children;
  var _settingsConfig$defau = settingsConfig.defaultLocale,
    defaultLocale = _settingsConfig$defau === void 0 ? 'en' : _settingsConfig$defau,
    _settingsConfig$defau2 = settingsConfig.defaultTheme,
    defaultTheme = _settingsConfig$defau2 === void 0 ? defaultThemeName : _settingsConfig$defau2,
    _settingsConfig$defau3 = settingsConfig.defaultDirection,
    defaultDirection = _settingsConfig$defau3 === void 0 ? 'ltr' : _settingsConfig$defau3;
  var _useState = (0, _react.useState)(defaultLocale),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentLocale = _useState2[0],
    setCurrentLocale = _useState2[1];
  var _useState3 = (0, _react.useState)(defaultDirection),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    currentDirection = _useState4[0],
    setCurrentDirection = _useState4[1];
  var _useState5 = (0, _react.useState)(defaultTheme),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    currentTheme = _useState6[0],
    setCurrentTheme = _useState6[1];

  /**
   * Place settings on dom
   */
  (0, _react.useEffect)(function () {
    var htmlNode = document.getElementsByTagName('html')[0];
    if (htmlNode.getAttribute('lang') !== currentLocale) {
      htmlNode.setAttribute('lang', currentLocale);
    }
    if (htmlNode.getAttribute('dir') !== currentDirection) {
      htmlNode.setAttribute('dir', currentDirection);
    }
  }, [currentLocale, currentDirection]);
  var appSettings = (0, _react.useMemo)(function () {
    /**
     * Handle setting update and store new settings in state.
     * @param {*} newSettings
     */
    var onUpdate = function onUpdate(_ref2) {
      var locale = _ref2.locale,
        theme = _ref2.theme,
        direction = _ref2.direction;
      if (locale) {
        setCurrentLocale(locale);
      }
      if (theme) {
        setCurrentTheme(theme);
      }
      if (direction) {
        setCurrentDirection(direction);
      }
    };
    return {
      locales: locales,
      currentLocale: currentLocale,
      currentTheme: currentTheme,
      currentDirection: currentDirection,
      directions: ['ltr', 'rtl'],
      themes: themes,
      currentThemeClassName: themesMap[currentTheme],
      onUpdate: onUpdate
    };
  }, [currentLocale, currentTheme, currentDirection]);
  return /*#__PURE__*/_react.default.createElement(_AppSettingsContext.default.Provider, {
    value: appSettings
  }, children);
};
AppSettingsProvider.propTypes = propTypes;
var _default = AppSettingsProvider;
exports.default = _default;