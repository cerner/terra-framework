"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
/**
 * Generate react components based off the package.json file
 * Don't use an arrow function
 * @param {*} content the json file
 */
var loader = /*#__PURE__*/function () {
  var _loader = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(content) {
    var callback, json, repoUrl, repoDirectory, finalUrl, badge, code;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            callback = this.async();
            json = JSON.parse(content);
            repoUrl = json.repository && json.repository.url ? json.repository.url.match(/https.*[^.git]/i) : '';
            repoDirectory = json.repository && json.repository.directory ? json.repository.directory.match(/[^/].*/i) : '';
            finalUrl = '';
            if (repoUrl) {
              if (repoDirectory) {
                finalUrl = "".concat(repoUrl, "/tree/main/").concat(repoDirectory);
              } else {
                finalUrl = repoUrl;
              }
            }
            badge = finalUrl ? "<Badges\n        src=\"".concat(finalUrl, "\"\n        name=\"").concat(json.name, "\"\n        version=\"").concat(json.version, "\"\n        url={url}\n      />") : "<Badges\n        name=\"".concat(json.name, "\"\n        version=\"").concat(json.version, "\"\n        url={url}\n      />");
            code = ['import React from \'react\';', 'import Badges from \'@cerner/terra-dev-site/lib/loader-components/_Badges\';', '', "export const Badge = ({ url }) => (\n      ".concat(badge, "\n    );")].join('\n');
            return _context.abrupt("return", callback(null, code));
          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  function loader(_x) {
    return _loader.apply(this, arguments);
  }
  return loader;
}();
module.exports = loader;