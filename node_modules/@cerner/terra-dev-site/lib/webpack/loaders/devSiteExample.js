"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var path = require('path');
var startCase = require('lodash.startcase');
var findCssFileName = require('../loaderUtils/determineCssFileName');

/**
 * Generate the example with the supplied file.
 * Don't use an arrow function
 */
var loader = /*#__PURE__*/function () {
  var _loader = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(content) {
    var callback, exampleSource, parsedResourcePath, cssFileName, code;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            callback = this.async();
            exampleSource = this.resourcePath;
            parsedResourcePath = path.parse(exampleSource);
            cssFileName = findCssFileName(content);
            code = ['import React from \'react\';', "import Example from '".concat(exampleSource, "';"), "import Code from '".concat(exampleSource, "?dev-site-codeblock';"), 'import ExampleTemplate from \'@cerner/terra-dev-site/lib/loader-components/_ExampleTemplate\';'];
            if (!(cssFileName !== undefined)) {
              _context2.next = 15;
              break;
            }
            _context2.prev = 6;
            this.resolve(this.context, cssFileName, /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
              return _regenerator.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            })));
            code.push("import Css from '".concat(cssFileName, "?dev-site-codeblock';"), "export default ({ title, description, isExpanded }) => (\n            <ExampleTemplate\n            title={ title || '".concat(startCase(parsedResourcePath.name), "'}\n            description={description}\n            example={<Example />}\n            exampleCssSrc={<Css />}\n            exampleSrc={<Code />}\n            isExpanded={isExpanded}\n            />\n          );"));
            return _context2.abrupt("return", callback(null, code.join('\n')));
          case 12:
            _context2.prev = 12;
            _context2.t0 = _context2["catch"](6);
            // eslint-disable-next-line no-console
            console.error("Cannot resolve path:\n".concat(cssFileName, "\n").concat(_context2.t0));
          case 15:
            code.push("export default ({ title, description, isExpanded }) => (\n    <ExampleTemplate\n      title={ title || '".concat(startCase(parsedResourcePath.name), "'}\n      description={description}\n      example={<Example />}\n      exampleSrc={<Code />}\n      isExpanded={isExpanded}\n    />\n  );"));
            return _context2.abrupt("return", callback(null, code.join('\n')));
          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[6, 12]]);
  }));
  function loader(_x) {
    return _loader.apply(this, arguments);
  }
  return loader;
}();
module.exports = loader;