"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var lodashTemplate = require('lodash.template');
var _require = require('loader-utils'),
  getOptions = _require.getOptions;
var generateNavigationConfig = require('../loaderUtils/generateNavigationConfig');

/**
  * Generate the entry point for the particular site plugin.
  * Don't use an arrow function or you wont have access to this.
  * @param {string} template contents of the file that triggered the loader.
  */
var loader = /*#__PURE__*/function () {
  var _loader = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(template) {
    var callback, imports, index, addImport, _getOptions$entryLoad, entryPath, siteConfig, basename, resolveExtensions, sites, contentDirectory, isLernaMonoRepo, dataCallback, extensionItems, _generateNavigationCo, contentImports, navigationConfig, routesMap, pageConfig;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            callback = this.async();
            imports = {};
            index = 0;
            addImport = function addImport(path) {
              var identifier = imports[path];
              if (identifier) {
                return identifier;
              }
              identifier = "importName".concat(index);
              index += 1;
              imports[path] = identifier;
              return identifier;
            };
            _getOptions$entryLoad = getOptions(this).entryLoaderData[this.resourceQuery], entryPath = _getOptions$entryLoad.entryPath, siteConfig = _getOptions$entryLoad.siteConfig, basename = _getOptions$entryLoad.basename, resolveExtensions = _getOptions$entryLoad.resolveExtensions, sites = _getOptions$entryLoad.sites, contentDirectory = _getOptions$entryLoad.contentDirectory, isLernaMonoRepo = _getOptions$entryLoad.isLernaMonoRepo, dataCallback = _getOptions$entryLoad.dataCallback;
            extensionItems = (siteConfig.extensionItems || []).map(function (ext) {
              return {
                key: ext.key,
                text: ext.text,
                icon: addImport(ext.iconPath),
                modal: addImport(ext.modalFilePath)
              };
            });
            _generateNavigationCo = generateNavigationConfig({
              siteConfig: siteConfig,
              resolveExtensions: resolveExtensions,
              mode: this.mode,
              contentDirectory: contentDirectory,
              isLernaMonoRepo: isLernaMonoRepo,
              addContextDependency: this.addContextDependency,
              // getLogger is undefined in the loader runner for tests, but never in acutal usage.
              logger: this.getLogger ? this.getLogger('terra-dev-site loader') : undefined
            }), contentImports = _generateNavigationCo.contentImports, navigationConfig = _generateNavigationCo.navigationConfig, routesMap = _generateNavigationCo.routesMap, pageConfig = _generateNavigationCo.pageConfig;
            if (dataCallback) {
              dataCallback({
                relativeUrls: [].concat((0, _toConsumableArray2.default)(Object.keys(pageConfig).map(function (url) {
                  return "".concat(basename).concat(url);
                })), (0, _toConsumableArray2.default)(Object.keys(routesMap).map(function (url) {
                  return "".concat(basename).concat(url);
                })))
              });
            }
            return _context.abrupt("return", callback(null, lodashTemplate(template)({
              entryPath: entryPath,
              title: siteConfig.titleConfig.title,
              headline: siteConfig.titleConfig.headline,
              subline: siteConfig.titleConfig.subline,
              defaultTheme: siteConfig.defaultTheme,
              defaultLocale: siteConfig.defaultLocale,
              defaultDirection: siteConfig.defaultDirection,
              basename: basename,
              contentImports: contentImports,
              navigationConfig: JSON.stringify(navigationConfig),
              routesMap: JSON.stringify(routesMap),
              pageConfig: JSON.stringify(pageConfig),
              extensionItems: extensionItems,
              imports: imports,
              sites: JSON.stringify(sites),
              sideEffectImportFilePaths: siteConfig.sideEffectImportFilePaths,
              enableDebugLogging: siteConfig.enableDebugLogging,
              additionalConfig: JSON.stringify(siteConfig.additionalConfig)
            })));
          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  function loader(_x) {
    return _loader.apply(this, arguments);
  }
  return loader;
}();
module.exports = loader;