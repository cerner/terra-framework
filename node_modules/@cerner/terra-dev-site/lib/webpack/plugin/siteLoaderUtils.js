"use strict";

var rehypeSlug = require('rehype-slug');
var rehypeUrl = require('rehype-urls');
var rehypeUrlInspector = require('@jsdevtools/rehype-url-inspector');
var babelLoader = {
  loader: 'babel-loader',
  options: {
    rootMode: 'upward' // needed to correctly resolve babel's config root in mono-repos
  }
};

var getMdxLoader = function getMdxLoader(_ref) {
  var publicPath = _ref.publicPath,
    urlInspectCallback = _ref.urlInspectCallback;
  return {
    loader: '@mdx-js/loader',
    options: {
      rehypePlugins: [
      // Add id's to h-tags
      rehypeSlug, [rehypeUrl, function (url) {
        // Re-write relative urls to include public path.
        if (!url.protocol && url.pathname && url.pathname.startsWith('/') && publicPath.length > 1) {
          // Remove the first slash from the url.pathname because publicPath always ends with one.
          return "".concat(publicPath).concat(url.pathname.slice(1));
        }
        return url.href;
      }],
      // order here matters, this should be run AFTER the url is updated with the public path.
      [rehypeUrlInspector, {
        inspectEach: urlInspectCallback
      }]]
    }
  };
};
module.exports = {
  babelLoader: babelLoader,
  getMdxLoader: getMdxLoader
};