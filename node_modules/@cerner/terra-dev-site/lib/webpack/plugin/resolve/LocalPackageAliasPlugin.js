"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var path = require('path');
var glob = require('glob');
var fs = require('fs');
var AliasPlugin = require('enhanced-resolve/lib/AliasPlugin');
/**
 * Setup aliases for any packages found in the root directory globs.
 * This aliases the package name for the folder the package name resides in.
 * This allows for importing the package as if it was in the node modules folder.
 * {packageName: pathToFolder}
 */
var LocalPackageAliasPlugin = /*#__PURE__*/function () {
  function LocalPackageAliasPlugin() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$rootDirectories = _ref.rootDirectories,
      rootDirectories = _ref$rootDirectories === void 0 ? [process.cwd()] : _ref$rootDirectories;
    (0, _classCallCheck2.default)(this, LocalPackageAliasPlugin);
    // Creates a structure like this for aliases, this is the expected structure for the alias plugin.
    // {
    //   name:'item/to/alias',
    //   onlyModule: false,
    //   alias:'/new/alias/name',
    // }
    this.alias = rootDirectories.reduce(function (acc, root) {
      return acc.concat(glob.sync("".concat(root, "/package.json")).map(function (rootPath) {
        var dirname = path.dirname(rootPath);
        var packageName = JSON.parse(fs.readFileSync(rootPath)).name;
        return {
          name: packageName,
          onlyModule: false,
          alias: dirname
        };
      }));
    }, []);
  }
  (0, _createClass2.default)(LocalPackageAliasPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      new AliasPlugin('described-resolve', this.alias, 'resolve').apply(resolver);
    }
  }]);
  return LocalPackageAliasPlugin;
}();
module.exports = LocalPackageAliasPlugin;