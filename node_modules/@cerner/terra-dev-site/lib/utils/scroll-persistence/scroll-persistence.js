"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyScrollData = applyScrollData;
exports.getOverflowDataForElement = getOverflowDataForElement;
exports.getPersistentScrollMap = getPersistentScrollMap;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _v = _interopRequireDefault(require("uuid/v4"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function getOverflowDataForElement(overflowElement) {
  var overflowId = overflowElement.getAttribute('data-persistent-overflow-id');
  if (!overflowId) {
    overflowId = (0, _v.default)();
    overflowElement.setAttribute('data-persistent-overflow-id', overflowId);
  }
  return (0, _defineProperty2.default)({}, "".concat(overflowId), {
    scrollTop: overflowElement.scrollTop,
    scrollLeft: overflowElement.scrollLeft
  });
}
function getPersistentScrollMap(container) {
  var scrollElements = container.querySelectorAll('[data-application-overflow-container]');
  return Array.prototype.slice.call(scrollElements).reduce(function (accumulator, element) {
    return _objectSpread(_objectSpread({}, accumulator), getOverflowDataForElement(element));
  }, {});
}
function applyScrollData() {
  var scrollData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var container = arguments.length > 1 ? arguments[1] : undefined;
  Object.entries(scrollData).forEach(function (_ref2) {
    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
      overflowId = _ref3[0],
      data = _ref3[1];
    var overflowElement = container.querySelector("[data-persistent-overflow-id=\"".concat(overflowId, "\"]"));
    if (overflowElement) {
      overflowElement.scrollTop = data.scrollTop;
      overflowElement.scrollLeft = data.scrollLeft;
    }
  });
}