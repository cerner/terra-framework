"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _GridModule = _interopRequireDefault(require("./Grid.module.scss"));
var _excluded = ["className", "children", "tiny", "small", "medium", "large", "huge", "enormous"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var cx = _bind.default.bind(_GridModule.default);
var columnRange = function columnRange(props, propName) {
  if (props[propName]) {
    var val = props[propName];
    return val >= 1 && val <= 12 ? null : new Error("".concat(propName, " must be in range 1 to 12 inclusively"));
  }
  return null;
};
var propTypes = {
  /**
   * The component that will be displayed in cell level.
   */
  children: _propTypes.default.node,
  /**
   * Custom class name that can be assigned to grid column.
   */
  className: _propTypes.default.string,
  /**
   * Defines the number of columns this container will span in the 12 column grid. It is applied at the `tiny` breakpoint and wider screens.
   */
  tiny: columnRange,
  /**
   * Defines the number of columns this container will span in the 12 column grid. It is applied at the `enormous` breakpoint and wider screens.
   */
  enormous: columnRange,
  /**
   * Defines the number of columns this container will span in the 12 column grid. It is applied at the `huge` breakpoint and wider screens.
   */
  huge: columnRange,
  /**
   * Defines the number of columns this container will span in the 12 column grid. It is applied at the `large` breakpoint and wider screens.
   */
  large: columnRange,
  /**
   * Defines the number of columns this container will span in the 12 column grid. It is applied at the `medium` breakpoint and wider screens.
   */
  medium: columnRange,
  /**
   * Defines the number of columns this container will span in the 12 column grid. It is applied at the `small` breakpoint and wider screens.
   */
  small: columnRange
};
var GridColumn = function GridColumn(_ref) {
  var _ref2;
  var className = _ref.className,
    children = _ref.children,
    tiny = _ref.tiny,
    small = _ref.small,
    medium = _ref.medium,
    large = _ref.large,
    huge = _ref.huge,
    enormous = _ref.enormous,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var colClassNames = (0, _classnames.default)(cx(['column', (_ref2 = {}, _defineProperty(_ref2, "column-tiny-".concat(tiny), tiny), _defineProperty(_ref2, "column-small-".concat(small), small), _defineProperty(_ref2, "column-medium-".concat(medium), medium), _defineProperty(_ref2, "column-large-".concat(large), large), _defineProperty(_ref2, "column-huge-".concat(huge), huge), _defineProperty(_ref2, "column-enormous-".concat(enormous), enormous), _ref2), theme.className]), className);
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, customProps, {
    className: colClassNames
  }), children);
};
GridColumn.propTypes = propTypes;
var _default = GridColumn;
exports.default = _default;