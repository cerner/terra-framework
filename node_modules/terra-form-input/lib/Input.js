"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _InputModule = _interopRequireDefault(require("./Input.module.scss"));
var _excluded = ["defaultValue", "disabled", "isIncomplete", "isInvalid", "onBlur", "onChange", "onFocus", "onInput", "name", "pattern", "refCallback", "required", "type", "ariaLabel", "value"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var cx = _bind.default.bind(_InputModule.default);
var propTypes = {
  /**
   * The defaultValue of the input field. Use this to create an uncontrolled input.
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  /**
   * Whether the input is disabled.
   */
  disabled: _propTypes.default.bool,
  /**
   * Whether the input displays as Incomplete. Use when no value has been provided. _(usage note: `required` must also be set)_.
   */
  isIncomplete: _propTypes.default.bool,
  /**
   * Whether the input displays as Invalid. Use when value does not meet validation pattern.
   */
  isInvalid: _propTypes.default.bool,
  /**
   * Function to trigger when the input loses focus.
   */
  onBlur: _propTypes.default.func,
  /**
   * Function to trigger when user changes the input value. Provide a function to create a controlled input.
   */
  onChange: _propTypes.default.func,
  /**
   * Function to trigger when the input gains focus.
   */
  onFocus: _propTypes.default.func,
  /**
   * Function to trigger when user inputs a value. Use when programmatically setting a value. Sends parameter {Event} event.
   */
  onInput: _propTypes.default.func,
  /**
   * Content to be displayed as the name.
   */
  name: _propTypes.default.string,
  /**
   * The regular expression that the input's value is checked against.
   *
   * _NOTE:_ The pattern attribute works with the following input types: text, date, search, url, tel, email, and password.
   */
  pattern: _propTypes.default.string,
  /**
   * Callback ref to pass into the input dom element.
   */
  refCallback: _propTypes.default.func,
  /**
   * Whether the input is required.
   */
  required: _propTypes.default.bool,
  /**
   * Specifies the type of input element to display.
   *
   * _NOTE:_ Styling is only applied to the following supported input types: text, number, password, email, search, tel, url, hidden.
   *
   * _These types are unsupported:_ date, datetime-local, month, time, week, color, file, range, checkbox, radio, button, reset, submit.
   */
  type: _propTypes.default.string,
  /**
   * The value of the input field. Use this to create a controlled input.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  /**
  * @private
  * String that labels the current element. 'aria-label' must be present,
  * for accessibility.
  */
  ariaLabel: _propTypes.default.string
};
var defaultProps = {
  defaultValue: undefined,
  disabled: false,
  isIncomplete: false,
  isInvalid: false,
  onBlur: undefined,
  onChange: undefined,
  onFocus: undefined,
  onInput: undefined,
  name: null,
  pattern: undefined,
  required: false,
  refCallback: undefined,
  type: undefined,
  value: undefined
};
var Input = /*#__PURE__*/function (_React$Component) {
  _inherits(Input, _React$Component);
  var _super = _createSuper(Input);
  function Input() {
    _classCallCheck(this, Input);
    return _super.apply(this, arguments);
  }
  _createClass(Input, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        defaultValue = _this$props.defaultValue,
        disabled = _this$props.disabled,
        isIncomplete = _this$props.isIncomplete,
        isInvalid = _this$props.isInvalid,
        onBlur = _this$props.onBlur,
        onChange = _this$props.onChange,
        onFocus = _this$props.onFocus,
        onInput = _this$props.onInput,
        name = _this$props.name,
        pattern = _this$props.pattern,
        refCallback = _this$props.refCallback,
        required = _this$props.required,
        type = _this$props.type,
        ariaLabel = _this$props.ariaLabel,
        value = _this$props.value,
        customProps = _objectWithoutProperties(_this$props, _excluded);
      var attributes = _objectSpread({}, customProps);
      var theme = this.context;

      // unsupportedTypes: 'date', 'datetime-local', 'month', 'time', 'week', 'color', 'file', 'range', 'checkbox', 'radio', 'button', 'reset', 'submit'
      var supportedTypes = ['text', 'number', 'password', 'email', 'search', 'tel', 'url', 'hidden'];
      var cxSupportedTypeClassNames = (type === undefined || supportedTypes.includes(type)) && cx('form-input', {
        'form-error': isInvalid
      }, {
        'form-incomplete': isIncomplete && required && !isInvalid
      }, theme.className);
      var formInputClassNames = (0, _classnames.default)(cxSupportedTypeClassNames, attributes.className);
      var ariaLabelText;

      // Handle case of users setting aria-label as a custom prop
      if (attributes && Object.prototype.hasOwnProperty.call(attributes, 'aria-label')) {
        // If they've set aria-label and ariaLabel, use the ariaLabel value,
        // otherwise, fallback to using the aria-label value passed in.
        ariaLabelText = !ariaLabel ? attributes['aria-label'] : ariaLabel;
      } else if (ariaLabel) {
        // If users only set ariaLabel prop, use that value
        ariaLabelText = ariaLabel;
      }
      attributes['aria-label'] = ariaLabelText;
      if (required) {
        attributes['aria-required'] = 'true';
      }
      if (value !== undefined) {
        attributes.value = value;
      } else if (defaultValue !== undefined) {
        attributes.defaultValue = defaultValue;
      }
      if (attributes.placeholder) {
        attributes.placeholder = null;
      }
      return /*#__PURE__*/_react.default.createElement("input", _extends({}, attributes, {
        ref: function ref(inputRef) {
          if (refCallback) refCallback(inputRef);
        },
        name: name,
        type: type,
        pattern: pattern,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        onInput: onInput,
        disabled: disabled,
        required: required,
        className: formInputClassNames
      }));
    }
  }]);
  return Input;
}(_react.default.Component);
Input.propTypes = propTypes;
Input.defaultProps = defaultProps;
Input.contextType = _terraThemeContext.default;
Input.isInput = true;
var _default = Input;
exports.default = _default;