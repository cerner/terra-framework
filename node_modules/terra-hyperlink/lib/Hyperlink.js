"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HyperlinkVariants = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _IconExternalLink = _interopRequireDefault(require("terra-icon/lib/icon/IconExternalLink"));
var _IconAudio = _interopRequireDefault(require("terra-icon/lib/icon/IconAudio"));
var _IconVideoCamera = _interopRequireDefault(require("terra-icon/lib/icon/IconVideoCamera"));
var _IconImage = _interopRequireDefault(require("terra-icon/lib/icon/IconImage"));
var _IconDocuments = _interopRequireDefault(require("terra-icon/lib/icon/IconDocuments"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var KeyCode = _interopRequireWildcard(require("keycode-js"));
var _HyperlinkModule = _interopRequireDefault(require("./Hyperlink.module.scss"));
var _excluded = ["children", "isDisabled", "isUnderlineHidden", "variant", "href", "onClick", "onBlur", "onFocus", "onKeyDown", "onKeyUp", "onMouseDown"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var cx = _bind.default.bind(_HyperlinkModule.default);
var variants = {
  DEFAULT: 'default',
  EXTERNAL: 'external',
  IMAGE: 'image',
  VIDEO: 'video',
  AUDIO: 'audio',
  DOCUMENT: 'document'
};
exports.HyperlinkVariants = variants;
var getHyperlinkIcon = function getHyperlinkIcon(variant) {
  switch (variant) {
    case variants.AUDIO:
      return /*#__PURE__*/_react.default.createElement("span", {
        className: cx('icon')
      }, /*#__PURE__*/_react.default.createElement(_IconAudio.default, null));
    case variants.DOCUMENT:
      return /*#__PURE__*/_react.default.createElement("span", {
        className: cx('icon')
      }, /*#__PURE__*/_react.default.createElement(_IconDocuments.default, null));
    case variants.EXTERNAL:
      return /*#__PURE__*/_react.default.createElement("span", {
        className: cx('icon')
      }, /*#__PURE__*/_react.default.createElement(_IconExternalLink.default, null));
    case variants.IMAGE:
      return /*#__PURE__*/_react.default.createElement("span", {
        className: cx('icon')
      }, /*#__PURE__*/_react.default.createElement(_IconImage.default, null));
    case variants.VIDEO:
      return /*#__PURE__*/_react.default.createElement("span", {
        className: cx('icon')
      }, /*#__PURE__*/_react.default.createElement(_IconVideoCamera.default, null));
    default:
      return null;
  }
};
var propTypes = {
  /**
   * The content to display inside link.
   */
  children: _propTypes.default.node,
  /**
   * Sets the href of the link.
   */
  href: _propTypes.default.string,
  /**
   * Whether or not the link should be disabled.
   */
  isDisabled: _propTypes.default.bool,
  /**
   * Whether or not the link should display an underline by default. Will still display an underline on hover and focus.
   */
  isUnderlineHidden: _propTypes.default.bool,
  /**
   * Callback function triggered when clicked.
   */
  onClick: _propTypes.default.func,
  /**
   * Callback function triggered when hyperlink loses focus.
   */
  onBlur: _propTypes.default.func,
  /**
   * Callback function triggered when hyperlink gains focus.
   */
  onFocus: _propTypes.default.func,
  /**
   * Callback function triggered when key is pressed.
   */
  onKeyDown: _propTypes.default.func,
  /**
   * Callback function triggered when key is released.
   */
  onKeyUp: _propTypes.default.func,
  /**
   * @private Callback function not intended for use with this API, but if set pass it through to the element regardless.
   */
  onMouseDown: _propTypes.default.func,
  /**
   * Sets the hyperlink variant. One of `default`, `external`, `image`, `video`, `audio`, `document`.
   */
  variant: _propTypes.default.oneOf(['default', 'external', 'image', 'video', 'audio', 'document'])
};
var defaultProps = {
  isDisabled: false,
  variant: variants.DEFAULT
};
var Hyperlink = /*#__PURE__*/function (_React$Component) {
  _inherits(Hyperlink, _React$Component);
  var _super = _createSuper(Hyperlink);
  function Hyperlink(props) {
    var _this;
    _classCallCheck(this, Hyperlink);
    _this = _super.call(this, props);
    _this.state = {
      active: false,
      focused: false
    };
    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));
    _this.handleKeyUp = _this.handleKeyUp.bind(_assertThisInitialized(_this));
    _this.handleOnBlur = _this.handleOnBlur.bind(_assertThisInitialized(_this));
    _this.handleMouseDown = _this.handleMouseDown.bind(_assertThisInitialized(_this));
    _this.linkRef = /*#__PURE__*/_react.default.createRef();
    return _this;
  }
  _createClass(Hyperlink, [{
    key: "handleMouseDown",
    value: function handleMouseDown(event) {
      this.linkRef.current.setAttribute('data-focus-styles-enabled', 'false');
      if (this.props.onMouseDown) {
        this.props.onMouseDown(event);
      }
    }
  }, {
    key: "handleOnBlur",
    value: function handleOnBlur(event) {
      this.setState({
        focused: false
      });
      this.linkRef.current.setAttribute('data-focus-styles-enabled', 'true');
      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      // Add focus styles for keyboard navigation
      if (event.nativeEvent.keyCode === KeyCode.KEY_RETURN) {
        this.setState({
          focused: true
        });
      }
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: "handleKeyUp",
    value: function handleKeyUp(event) {
      // Apply focus styles for keyboard navigation
      if (event.nativeEvent.keyCode === KeyCode.KEY_TAB) {
        this.setState({
          focused: true
        });
      }
      if (this.props.onKeyUp) {
        this.props.onKeyUp(event);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        children = _this$props.children,
        isDisabled = _this$props.isDisabled,
        isUnderlineHidden = _this$props.isUnderlineHidden,
        variant = _this$props.variant,
        href = _this$props.href,
        onClick = _this$props.onClick,
        onBlur = _this$props.onBlur,
        onFocus = _this$props.onFocus,
        onKeyDown = _this$props.onKeyDown,
        onKeyUp = _this$props.onKeyUp,
        onMouseDown = _this$props.onMouseDown,
        customProps = _objectWithoutProperties(_this$props, _excluded);
      var theme = this.context;
      var hyperlinkClasses = (0, _classnames.default)(cx('hyperlink', variant, {
        'is-disabled': isDisabled
      }, {
        'is-underline-hidden': isUnderlineHidden
      }, {
        'is-active': this.state.active
      }, {
        'is-focused': this.state.focused
      }, theme.className), customProps.className);
      var ComponentType = isDisabled ? 'span' : 'a';
      var target = customProps.target; // Defaults to undefined if not set
      var rel = customProps.rel; // Defaults to undefined if not set

      // If variant is set to external, we'll add target="_blank" and rel="noopener noreferrer"
      // unless user passes their own target or rel attribute
      if (!customProps.target && variant === 'external') {
        target = '_blank';
      }
      if (!customProps.rel && variant === 'external') {
        rel = 'noopener noreferrer';
      }
      return /*#__PURE__*/_react.default.createElement(ComponentType, _extends({}, customProps, {
        className: hyperlinkClasses,
        "aria-disabled": isDisabled,
        onKeyDown: this.handleKeyDown,
        onKeyUp: this.handleKeyUp,
        onBlur: this.handleOnBlur,
        onMouseDown: this.handleMouseDown,
        onClick: onClick,
        onFocus: onFocus,
        href: isDisabled ? null : href,
        target: target,
        rel: rel,
        "data-focus-styles-enabled": true,
        ref: this.linkRef
      }), children, getHyperlinkIcon(variant));
    }
  }]);
  return Hyperlink;
}(_react.default.Component);
Hyperlink.propTypes = propTypes;
Hyperlink.defaultProps = defaultProps;
Hyperlink.contextType = _terraThemeContext.default;
var _default = Hyperlink;
exports.default = _default;