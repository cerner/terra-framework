"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _DividerModule = _interopRequireDefault(require("./Divider.module.scss"));
var _SectionDivider = _interopRequireDefault(require("./_SectionDivider"));
var _excluded = ["text", "level", "id"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var propTypes = {
  /**
   * String to be displayed inline with the divider. For accessibility best practices, providing a `level` should also be used whenever.
   * Using the `text` prop to make it a section heading.
   */
  text: _propTypes.default.string,
  /**
   * Sets the heading level to One of `1`, `2`, `3`, `4`, `5`, `6`. This helps screen readers to announce appropriate heading levels.
   * Changing `level` will not visually change the style of the content.
   */
  level: _propTypes.default.oneOf([1, 2, 3, 4, 5, 6]),
  /**
   * IDs should be used with 'aria-labelledby' to associate headings with the corresponding list, section, or page area to label regions.
   */
  id: _propTypes.default.string
};
var cx = _bind.default.bind(_DividerModule.default);
var Divider = function Divider(props) {
  var text = props.text,
    level = props.level,
    id = props.id,
    customProps = _objectWithoutProperties(props, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var dividerClassNames = (0, _classnames.default)(cx([{
    divider: !text
  }, {
    'divider-container': text
  }, theme.className]), customProps.className);
  if (!text) {
    return /*#__PURE__*/_react.default.createElement("hr", _extends({}, customProps, {
      className: dividerClassNames
    }));
  }
  if (level) {
    return /*#__PURE__*/_react.default.createElement(_SectionDivider.default, _extends({
      level: level,
      text: text,
      id: id
    }, customProps, {
      className: dividerClassNames
    }));
  }
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, customProps, {
    className: dividerClassNames,
    id: id
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: cx(['divider-text'])
  }, text));
};
Divider.propTypes = propTypes;
var _default = Divider;
exports.default = _default;