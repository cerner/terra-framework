"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _DividerModule = _interopRequireDefault(require("./Divider.module.scss"));
var _excluded = ["text", "level", "id"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var propTypes = {
  /**
   * String to be displayed inline with the divider. For accessibility best practices, a `level` needs to be provided whenever.
   * using the `text` prop to make it a section heading.
   */
  text: _propTypes.default.string.isRequired,
  /**
   * Sets the heading level to One of `1`, `2`, `3`, `4`, `5`, `6`. This helps screen readers to announce appropriate heading levels.
   * Changing `level` will not visually change the style of the content.
   */
  level: _propTypes.default.oneOf([1, 2, 3, 4, 5, 6]).isRequired,
  /**
   * IDs should be used with 'aria-labelledby' to associate headings with the corresponding list, section, or page area to label regions.
   */
  id: _propTypes.default.string
};
var cx = _bind.default.bind(_DividerModule.default);
var SectionDivider = function SectionDivider(_ref) {
  var text = _ref.text,
    level = _ref.level,
    id = _ref.id,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var theme = (0, _react.useContext)(_terraThemeContext.default);
  var dividerClassNames = (0, _classnames.default)(cx(['divider-container', theme.className]), customProps.className);
  var titleElement;
  if (text && level) {
    var HeaderElement = "h".concat(level);
    titleElement = /*#__PURE__*/_react.default.createElement(HeaderElement, {
      id: id,
      className: cx(['divider-text'])
    }, text);
  }
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, customProps, {
    className: dividerClassNames
  }), titleElement);
};
SectionDivider.propTypes = propTypes;
var _default = SectionDivider;
exports.default = _default;