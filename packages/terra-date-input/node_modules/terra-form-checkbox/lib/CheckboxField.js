"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _lodash = _interopRequireDefault(require("lodash.uniqueid"));
var _terraVisuallyHiddenText = _interopRequireDefault(require("terra-visually-hidden-text"));
var _reactIntl = require("react-intl");
var _CheckboxFieldModule = _interopRequireDefault(require("./CheckboxField.module.scss"));
var _excluded = ["children", "error", "help", "hideRequired", "intl", "isInvalid", "isInline", "isLegendHidden", "legend", "legendAttrs", "required", "showOptional"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var cx = _bind.default.bind(_CheckboxFieldModule.default);
var propTypes = {
  /**
   * The form control elements the Field contains.
   */
  children: _propTypes.default.node,
  /**
   * Error message for when the input is invalid. This will only be displayed if isInvalid is true.
   */
  error: _propTypes.default.node,
  /**
   * Help element to display with the checkboxes.
   */
  help: _propTypes.default.node,
  /**
   * Whether or not to hide the required indicator on the legend.
   */
  hideRequired: _propTypes.default.bool,
  /**
   * @private
   * intl object programmatically imported through injectIntl from react-intl.
   * */
  intl: _propTypes.default.shape({
    formatMessage: _propTypes.default.func
  }).isRequired,
  /**
   * Whether or not the field is an inline field.
   */
  isInline: _propTypes.default.bool,
  /**
   * Whether the field displays as Invalid. Use when value does not meet validation pattern.
   */
  isInvalid: _propTypes.default.bool,
  /**
   * Whether or not the legend is visible. Use this props to hide a legend while still creating it on the DOM for accessibility.
   */
  isLegendHidden: _propTypes.default.bool,
  /**
   * The legend of the form control children.
   */
  legend: _propTypes.default.string.isRequired,
  /**
   * Attributes to attach to the legend.
   */
  // eslint-disable-next-line react/forbid-prop-types
  legendAttrs: _propTypes.default.object,
  /**
   * Whether or not the field is required.
   */
  required: _propTypes.default.bool,
  /**
   * Whether or not to append the 'optional' legend to a non-required field legend.
   */
  showOptional: _propTypes.default.bool
};
var defaultProps = {
  children: null,
  error: null,
  help: null,
  hideRequired: false,
  isInline: false,
  isInvalid: false,
  isLegendHidden: false,
  legendAttrs: {},
  required: false,
  showOptional: false
};
var CheckboxField = function CheckboxField(props) {
  var children = props.children,
    error = props.error,
    help = props.help,
    hideRequired = props.hideRequired,
    intl = props.intl,
    isInvalid = props.isInvalid,
    isInline = props.isInline,
    isLegendHidden = props.isLegendHidden,
    legend = props.legend,
    legendAttrs = props.legendAttrs,
    required = props.required,
    showOptional = props.showOptional,
    customProps = _objectWithoutProperties(props, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var checkboxFieldClasses = (0, _classnames.default)(cx(['checkbox-field', {
    'is-inline': isInline
  }, theme.className]), customProps.className);
  var legendClassNames = cx(['legend', legendAttrs.className]);
  var legendAriaDescriptionId = "terra-checkbox-field-description-".concat((0, _lodash.default)());
  var helpAriaDescriptionId = help ? "terra-checkbox-field-description-help-".concat((0, _lodash.default)()) : '';
  var errorAriaDescriptionId = error ? "terra-checkbox-field-description-error-".concat((0, _lodash.default)()) : '';
  var ariaDescriptionIds = "".concat(legendAriaDescriptionId, " ").concat(errorAriaDescriptionId, " ").concat(helpAriaDescriptionId);
  var legendGroup = /*#__PURE__*/_react.default.createElement("legend", {
    id: legendAriaDescriptionId,
    className: cx(['legend-group', {
      'legend-group-hidden': isLegendHidden
    }])
  }, /*#__PURE__*/_react.default.createElement("div", _extends({}, legendAttrs, {
    className: legendClassNames
  }), isInvalid && /*#__PURE__*/_react.default.createElement("span", {
    className: cx('error-icon')
  }), required && (isInvalid || !hideRequired) && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": "true",
    className: cx('required')
  }, "*"), /*#__PURE__*/_react.default.createElement(_terraVisuallyHiddenText.default, {
    text: intl.formatMessage({
      id: 'Terra.form.field.required'
    })
  })), legend, required && !isInvalid && hideRequired && /*#__PURE__*/_react.default.createElement("span", {
    className: cx('required-hidden')
  }, "*"), showOptional && !required && /*#__PURE__*/_react.default.createElement("span", {
    className: cx('optional')
  }, intl.formatMessage({
    id: 'Terra.form.field.optional'
  })), !isInvalid && /*#__PURE__*/_react.default.createElement("span", {
    className: cx('error-icon-hidden')
  })));
  var content = _react.default.Children.map(children, function (child) {
    if (child && child.type.isCheckbox) {
      return /*#__PURE__*/_react.default.cloneElement(child, {
        inputAttrs: {
          'aria-describedby': ariaDescriptionIds
        }
      });
    }
    return child;
  });
  return /*#__PURE__*/_react.default.createElement("fieldset", _extends({}, customProps, {
    className: checkboxFieldClasses
  }), legendGroup, content, isInvalid && error && /*#__PURE__*/_react.default.createElement("div", {
    id: errorAriaDescriptionId,
    className: cx('error-text')
  }, error), help && /*#__PURE__*/_react.default.createElement("div", {
    id: helpAriaDescriptionId,
    className: cx('help-text')
  }, help));
};
CheckboxField.propTypes = propTypes;
CheckboxField.defaultProps = defaultProps;
var _default = (0, _reactIntl.injectIntl)(CheckboxField);
exports.default = _default;