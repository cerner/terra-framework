"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ButtonVariants = exports.ButtonTypes = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var KeyCode = _interopRequireWildcard(require("keycode-js"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _ButtonModule = _interopRequireDefault(require("./Button.module.scss"));
var _excluded = ["icon", "isBlock", "isCompact", "isDisabled", "isIconOnly", "isReversed", "text", "type", "variant", "href", "onClick", "onMouseDown", "onBlur", "onFocus", "onKeyDown", "onKeyUp", "refCallback", "title"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var cx = _bind.default.bind(_ButtonModule.default);
var ButtonVariants = {
  NEUTRAL: 'neutral',
  EMPHASIS: 'emphasis',
  GHOST: 'ghost',
  // TODO: this should be removed on the next major version bump
  'DE-EMPHSASIS': 'de-emphasis',
  'DE-EMPHASIS': 'de-emphasis',
  ACTION: 'action',
  UTILITY: 'utility'
};
exports.ButtonVariants = ButtonVariants;
var ButtonTypes = {
  BUTTON: 'button',
  SUBMIT: 'submit',
  RESET: 'reset'
};
exports.ButtonTypes = ButtonTypes;
var propTypes = {
  /**
   * Sets the href. When set will render the component as an anchor tag.
   */
  href: _propTypes.default.string,
  /**
   * An optional icon. Nested inline with the text when provided.
   */
  icon: _propTypes.default.element,
  /**
   * Whether or not the button should only display as an icon.
   */
  isIconOnly: _propTypes.default.bool,
  /**
   * Whether or not the button should display as a block.
   */
  isBlock: _propTypes.default.bool,
  /**
   * Whether or not the button has reduced padding
   */
  isCompact: _propTypes.default.bool,
  /**
   * Whether or not the button should be disabled.
   */
  isDisabled: _propTypes.default.bool,
  /**
   * Reverses the position of the icon and text.
   */
  isReversed: _propTypes.default.bool,
  /**
   * Callback function triggered when mouse is pressed.
   */
  onMouseDown: _propTypes.default.func,
  /**
   * Callback function triggered when clicked.
   */
  onClick: _propTypes.default.func,
  /**
   * Callback function triggered when button loses focus.
   */
  onBlur: _propTypes.default.func,
  /**
   * Callback function triggered when button gains focus.
   */
  onFocus: _propTypes.default.func,
  /**
   * Callback function triggered when key is pressed.
   */
  onKeyDown: _propTypes.default.func,
  /**
   * Callback function triggered when key is released.
   */
  onKeyUp: _propTypes.default.func,
  /**
   * Callback ref to pass into the dom element.
   */
  refCallback: _propTypes.default.func,
  /**
   * Sets the button text.
   * If the button is `isIconOnly` or variant `utility` this text is set as the aria-label and title for accessibility
   * `a11yLabel` prop of `icon` will be set as aria-label and title when `icon` has `a11yLabel` prop specified.
   */
  text: _propTypes.default.string.isRequired,
  /**
   * Additional information to display as a native tooltip on hover.
   * Buttons declared as `isIconOnly` or `utility` will fallback to using `text` if not provided.
   */
  title: _propTypes.default.string,
  /**
   * Sets the button type. One of `button`, `submit`, or `reset`.
   */
  type: _propTypes.default.oneOf([ButtonTypes.BUTTON, ButtonTypes.SUBMIT, ButtonTypes.RESET]),
  /**
   * Sets the button variant. One of `neutral`,  `emphasis`, `ghost`, `de-emphasis`, `action` or `utility`.
   */
  variant: _propTypes.default.oneOf([ButtonVariants.NEUTRAL, ButtonVariants.EMPHASIS, ButtonVariants.GHOST, ButtonVariants['DE-EMPHASIS'], ButtonVariants.ACTION, ButtonVariants.UTILITY])
};
var defaultProps = {
  isBlock: false,
  isCompact: false,
  isDisabled: false,
  isIconOnly: false,
  isReversed: false,
  refCallback: undefined,
  title: undefined,
  type: ButtonTypes.BUTTON,
  variant: ButtonVariants.NEUTRAL
};
var Button = /*#__PURE__*/function (_React$Component) {
  _inherits(Button, _React$Component);
  var _super = _createSuper(Button);
  function Button(props) {
    var _this;
    _classCallCheck(this, Button);
    _this = _super.call(this, props);
    _this.state = {
      active: false,
      focused: false
    };
    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));
    _this.handleKeyUp = _this.handleKeyUp.bind(_assertThisInitialized(_this));
    _this.handleOnBlur = _this.handleOnBlur.bind(_assertThisInitialized(_this));
    _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_this));
    _this.handleMouseDown = _this.handleMouseDown.bind(_assertThisInitialized(_this));
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
    _this.shouldShowFocus = true;
    return _this;
  }
  _createClass(Button, [{
    key: "handleOnBlur",
    value: function handleOnBlur(event) {
      this.setState({
        focused: false
      });
      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Button#Clicking_and_focus
      // Button on Firefox, Safari and IE running on OS X does not receive focus when clicked.
      // This will put focus on the button when clicked if it is not currently the active element.
      if (document.activeElement !== event.currentTarget) {
        this.shouldShowFocus = false;
        event.currentTarget.focus();
        this.shouldShowFocus = true;
      }
      if (this.props.onClick) {
        this.props.onClick(event);
      }
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      // Add active state to FF browsers
      if (event.nativeEvent.keyCode === KeyCode.KEY_SPACE) {
        this.setState({
          active: true
        });

        // Follow href on space keydown when rendered as an anchor tag
        if (this.props.href) {
          // Prevent window scrolling
          event.preventDefault();
          window.location.href = this.props.href;
        }
      }

      // Add focus styles for keyboard navigation
      if (event.nativeEvent.keyCode === KeyCode.KEY_SPACE || event.nativeEvent.keyCode === KeyCode.KEY_RETURN) {
        this.setState({
          focused: true
        });
      }
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: "handleKeyUp",
    value: function handleKeyUp(event) {
      // Remove active state from FF broswers
      if (event.nativeEvent.keyCode === KeyCode.KEY_SPACE) {
        this.setState({
          active: false
        });
      }

      // Apply focus styles for keyboard navigation
      if (event.nativeEvent.keyCode === KeyCode.KEY_TAB) {
        this.setState({
          focused: true
        });
      }
      if (this.props.onKeyUp) {
        this.props.onKeyUp(event);
      }
    }
  }, {
    key: "handleFocus",
    value: function handleFocus(event) {
      if (this.shouldShowFocus) {
        this.setState({
          focused: true
        });
      }
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }, {
    key: "handleMouseDown",
    value: function handleMouseDown(event) {
      if (this.props.onMouseDown) {
        this.props.onMouseDown(event);
      }

      // See https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus#Notes
      // If you call HTMLElement.focus() from a mousedown event handler, you must call event.preventDefault() to keep the focus from leaving the HTMLElement.
      // Otherwise, when you click on the button again, focus would leave the button and onBlur would get called causing the document.activeElement would no longer be the focused button.
      event.preventDefault();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        icon = _this$props.icon,
        isBlock = _this$props.isBlock,
        isCompact = _this$props.isCompact,
        isDisabled = _this$props.isDisabled,
        isIconOnly = _this$props.isIconOnly,
        isReversed = _this$props.isReversed,
        text = _this$props.text,
        type = _this$props.type,
        variant = _this$props.variant,
        href = _this$props.href,
        onClick = _this$props.onClick,
        onMouseDown = _this$props.onMouseDown,
        onBlur = _this$props.onBlur,
        onFocus = _this$props.onFocus,
        onKeyDown = _this$props.onKeyDown,
        onKeyUp = _this$props.onKeyUp,
        refCallback = _this$props.refCallback,
        title = _this$props.title,
        customProps = _objectWithoutProperties(_this$props, _excluded);
      var theme = this.context;
      var buttonClasses = (0, _classnames.default)(cx(['button', variant, {
        'is-disabled': isDisabled
      }, {
        block: isBlock
      }, {
        compact: isCompact
      }, {
        'is-active': this.state.active && !isDisabled
      }, {
        'is-focused': this.state.focused && !isDisabled
      }, theme.className]), customProps.className);
      var buttonLabelClasses = cx(['button-label', {
        'text-and-icon': icon && !isIconOnly && variant !== 'utility'
      }, {
        'icon-only': isIconOnly || variant === 'utility'
      }, {
        'text-only': !icon
      }]);
      var buttonTextClasses = cx([{
        'text-first': icon && isReversed
      }]);
      var iconClasses = cx(['icon', {
        'icon-first': !isIconOnly && variant !== 'utility' && !isReversed
      }]);
      var buttonText = !isIconOnly && variant !== 'utility' ? /*#__PURE__*/_react.default.createElement("span", {
        className: buttonTextClasses
      }, text) : null;
      var buttonIcon = null;
      if (icon) {
        var iconSvgClasses = icon.props.className ? "".concat(icon.props.className, " ").concat(cx('icon-svg')) : cx('icon-svg');
        var cloneIcon = /*#__PURE__*/_react.default.cloneElement(icon, {
          className: iconSvgClasses
        });
        buttonIcon = /*#__PURE__*/_react.default.createElement("span", {
          className: iconClasses
        }, cloneIcon);
      }
      var buttonTitle = title;
      if (isIconOnly || variant === 'utility') {
        buttonTitle = icon && icon.props.a11yLabel ? icon.props.a11yLabel : title || text;
      }
      var buttonLabel = /*#__PURE__*/_react.default.createElement("span", {
        className: buttonLabelClasses
      }, isReversed ? buttonText : buttonIcon, isReversed ? buttonIcon : buttonText);
      var ariaLabel = customProps['aria-label'];
      if (isIconOnly || variant === 'utility') {
        ariaLabel = icon && icon.props.a11yLabel ? icon.props.a11yLabel : ariaLabel || text;
      }
      var ComponentType = 'button';
      if (href) {
        ComponentType = 'a';
        customProps.role = 'button';
      }
      return /*#__PURE__*/_react.default.createElement(ComponentType, _extends({}, customProps, {
        className: buttonClasses,
        type: type,
        disabled: isDisabled,
        tabIndex: isDisabled ? '-1' : customProps.tabIndex,
        "aria-disabled": isDisabled,
        "aria-label": ariaLabel,
        onKeyDown: this.handleKeyDown,
        onKeyUp: this.handleKeyUp,
        onBlur: this.handleOnBlur,
        title: buttonTitle,
        onClick: this.handleClick,
        onMouseDown: this.handleMouseDown,
        onFocus: this.handleFocus,
        href: href,
        ref: refCallback
      }), buttonLabel);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (prevState.focused && nextProps.isDisabled) {
        return {
          focused: false
        };
      }
      return null;
    }
  }]);
  return Button;
}(_react.default.Component);
Button.propTypes = propTypes;
Button.defaultProps = defaultProps;
Button.contextType = _terraThemeContext.default;
Button.Opts = {};
Button.Opts.Types = ButtonTypes;
Button.Opts.Variants = ButtonVariants;
var _default = Button;
exports.default = _default;