"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bind = _interopRequireDefault(require("classnames/bind"));
var _terraThemeContext = _interopRequireDefault(require("terra-theme-context"));
var _RadioModule = _interopRequireDefault(require("./Radio.module.scss"));
var _RadioUtil = _interopRequireDefault(require("./_RadioUtil"));
var _excluded = ["checked", "defaultChecked", "inputAttrs", "id", "disabled", "isInline", "isLabelHidden", "labelText", "labelTextAttrs", "name", "onBlur", "onChange", "onFocus", "value"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var cx = _bind.default.bind(_RadioModule.default);
var propTypes = {
  /**
    * Whether or not the radio button is checked. Use this to generate a controlled radio button.
    */
  checked: _propTypes.default.bool,
  /**
    * The checked property of the Input element. Use this to generate an uncontrolled radio button.
    */
  defaultChecked: _propTypes.default.bool,
  /**
    * The id of the radio button.
    */
  id: _propTypes.default.string,
  /**
    * Additional attributes for the input object.
    */
  // eslint-disable-next-line react/forbid-prop-types
  inputAttrs: _propTypes.default.object,
  /**
    * Whether the radio button is disabled.
    */
  disabled: _propTypes.default.bool,
  /**
    * Whether the radio button is inline.
    */
  isInline: _propTypes.default.bool,
  /**
    * Whether the label is hidden.
    */
  isLabelHidden: _propTypes.default.bool,
  /**
    * Text of the label.
    */
  labelText: _propTypes.default.string.isRequired,
  /**
    * Additional attributes for the text object.
    */
  // eslint-disable-next-line react/forbid-prop-types
  labelTextAttrs: _propTypes.default.object,
  /**
    * Name attribute of the input.
    */
  name: _propTypes.default.string,
  /**
   * Function to trigger when focus is lost from the radio button.
   */
  onBlur: _propTypes.default.func,
  /**
    * Function to trigger when user clicks on the radio button. Provide a function to create a controlled input.
    */
  onChange: _propTypes.default.func,
  /**
   *  Function to trigger when user focuses on the radio button.
   */
  onFocus: _propTypes.default.func,
  /**
    * The value of the input element.
    */
  value: _propTypes.default.string
};
var defaultProps = {
  checked: undefined,
  defaultChecked: undefined,
  id: undefined,
  inputAttrs: {},
  disabled: false,
  isInline: false,
  isLabelHidden: false,
  labelTextAttrs: {},
  name: null,
  onBlur: undefined,
  onChange: undefined,
  onFocus: undefined,
  value: undefined
};
var Radio = function Radio(_ref) {
  var checked = _ref.checked,
    defaultChecked = _ref.defaultChecked,
    inputAttrs = _ref.inputAttrs,
    id = _ref.id,
    disabled = _ref.disabled,
    isInline = _ref.isInline,
    isLabelHidden = _ref.isLabelHidden,
    labelText = _ref.labelText,
    labelTextAttrs = _ref.labelTextAttrs,
    name = _ref.name,
    onBlur = _ref.onBlur,
    onChange = _ref.onChange,
    onFocus = _ref.onFocus,
    value = _ref.value,
    customProps = _objectWithoutProperties(_ref, _excluded);
  var theme = _react.default.useContext(_terraThemeContext.default);
  var controlInputAttrs = _objectSpread({}, inputAttrs);
  if (checked !== undefined) {
    controlInputAttrs.checked = checked;
  } else {
    controlInputAttrs.defaultChecked = defaultChecked;
  }
  var radioClasses = (0, _classnames.default)(cx('radio', {
    'is-inline': isInline
  }, theme.className), customProps.className);
  var labelClasses = cx(['label', {
    'is-disabled': disabled
  }, {
    'is-hidden': isLabelHidden
  }, {
    'is-mobile': _RadioUtil.default.isConsideredMobileDevice()
  }, labelTextAttrs.className]);
  var inputClasses = cx(['native-input', inputAttrs.className]);
  var labelTextClasses = cx(['label-text']);
  var outerRingClasses = cx(['outer-ring', {
    'is-mobile': _RadioUtil.default.isConsideredMobileDevice()
  }]);
  var innerRingClasses = cx(['inner-ring']);
  var labelTextContainer = null;
  if (isLabelHidden) {
    controlInputAttrs['aria-label'] = labelText;
    labelTextContainer = /*#__PURE__*/_react.default.createElement("span", _extends({}, labelTextAttrs, {
      className: labelTextClasses
    }));
  } else {
    labelTextContainer = /*#__PURE__*/_react.default.createElement("span", _extends({}, labelTextAttrs, {
      className: labelTextClasses
    }), labelText);
  }
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, customProps, {
    className: radioClasses
  }), /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: id,
    className: labelClasses
  }, /*#__PURE__*/_react.default.createElement("input", _extends({}, controlInputAttrs, {
    type: "radio",
    id: id,
    disabled: disabled,
    name: name,
    value: value,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    className: inputClasses
  })), /*#__PURE__*/_react.default.createElement("span", {
    className: outerRingClasses
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: innerRingClasses
  })), labelTextContainer));
};
Radio.propTypes = propTypes;
Radio.defaultProps = defaultProps;
Radio.isRadio = true;
var _default = Radio;
exports.default = _default;