import React from 'react';
/* eslint-disable-next-line import/no-extraneous-dependencies */
import { shallowWithIntl, mountWithIntl } from 'terra-enzyme-intl';

import DateInput from '../../src/DateInput';

describe('DateInput', () => {
  const defaultRender = <DateInput name="date-input" />;

  // Snapshot Tests
  it('should render a default component', () => {
    const wrapper = shallowWithIntl(defaultRender);
    expect(wrapper).toMatchSnapshot();
  });
});

const renderedValueCases = [
  ['2001-02-31', ['2001', '02', '31']],
  ['2001-02-32', ['', '', '']],
  ['', ['', '', '']],
  ['0', ['', '', '']],
  ['4', ['', '', '']],
  ['-', ['', '', '']],
  ['$', ['', '', '']],
  ['a', ['', '', '']],
  ['A', ['', '', '']],
  ['00', ['', '', '']],
  ['10', ['', '', '']],
  ['-0', ['', '', '']],
  ['01', ['', '', '']],
  ['11', ['', '', '']],
  ['-1', ['', '', '']],
  ['0-', ['', '', '']],
  ['1-', ['', '', '']],
  ['--', ['', '', '']],
  ['000', ['', '', '']],
  ['001', ['', '', '']],
  ['010', ['', '', '']],
  ['011', ['', '', '']],
  ['111', ['', '', '']],
  ['100', ['', '', '']],
  ['110', ['', '', '']],
  ['11-', ['', '', '']],
  ['00-', ['', '', '']],
  ['01-', ['', '', '']],
  ['10-', ['', '', '']],
  ['-01', ['', '', '']],
  ['-10', ['', '', '']],
  ['1-1', ['', '', '']],
  ['-00', ['', '', '']],
  ['-11', ['', '', '']],
  ['---', ['', '', '']],
  ['--1', ['', '', '']],
  ['--0', ['', '', '']],
  ['-1-', ['', '', '']],
  ['1--', ['', '', '']],
  ['-0-', ['', '', '']],
  ['0--', ['', '', '']],
  ['1234', ['', '', '']],
  ['123-', ['', '', '']],
  ['12-1', ['', '', '']],
  ['1234-', ['', '', '']],
  ['123-1', ['', '', '']],
  ['1234-1', ['', '', '']],
  ['1-02', ['', '', '']],
  ['12-02', ['', '', '']],
  ['123-02', ['', '', '']],
  ['1234-02', ['', '', '']],
  ['1-11', ['', '', '']],
  ['12-11', ['', '', '']],
  ['123-11', ['', '', '']],
  ['1234-11', ['', '', '']],
  ['-11-', ['', '', '']],
  ['1-11-', ['', '', '']],
  ['12-11-', ['', '', '']],
  ['123-11-', ['', '', '']],
  ['1234-11-', ['', '', '']],
  ['-2-', ['', '', '']],
  ['0-2-', ['', '', '']],
  ['1-2-', ['', '', '']],
  ['12-2-', ['', '', '']],
  ['123-2-', ['', '', '']],
  ['1234-2-', ['', '', '']],
  ['-11-0', ['', '', '']],
  ['0-11-0', ['', '', '']],
  ['1-11-0', ['', '', '']],
  ['12-11-0', ['', '', '']],
  ['123-11-0', ['', '', '']],
  ['1234-11-0', ['', '', '']],
  ['-11-01', ['', '', '']],
  ['0-11-01', ['', '', '']],
  ['1-11-01', ['', '', '']],
  ['12-11-01', ['', '', '']],
  ['123-11-01', ['', '', '']],
  ['-11-2', ['', '', '']],
  ['0-11-2', ['', '', '']],
  ['1-11-2', ['', '', '']],
  ['12-11-2', ['', '', '']],
  ['123-11-2', ['', '', '']],
  ['1234-11-2', ['', '', '']],
  ['1--2', ['', '', '']],
  ['12--2', ['', '', '']],
  ['123--2', ['', '', '']],
  ['1234--2', ['', '', '']],
  ['--03', ['', '', '']],
  ['0--03', ['', '', '']],
  ['1--03', ['', '', '']],
  ['12--03', ['', '', '']],
  ['123--03', ['', '', '']],
  ['1234--03', ['', '', '']],
  ['1234-11-01', ['1234', '11', '01']],
  ['2001-07-04', ['2001', '07', '04']],
  ['2211-11-11', ['2211', '11', '11']],
  ['2020-10-31', ['2020', '10', '31']],
  ['2021-01-31', ['2021', '01', '31']],
  ['2000-02-29', ['2000', '02', '29']], // leap year
  ['2001-02-29', ['2001', '02', '29']], // non-leap-year
  ['2002-02-29', ['2002', '02', '29']], // non-leap-year
  ['2003-02-29', ['2003', '02', '29']], // non-leap-year
  ['2004-02-29', ['2004', '02', '29']], // leap year
  ['2008-02-29', ['2008', '02', '29']], // leap year
  ['2012-02-29', ['2012', '02', '29']], // leap year
  ['20012-02-29', ['', '', '']],
  ['20012-012-29', ['', '', '']],
];

// Test rendered display
function renderedValueTestCase(testCase) {
  it(`renders with ${testCase[0]} value`, () => {
    const wrapper = mountWithIntl(<DateInput name="date-input" value={testCase[0]} />);
    expect(wrapper.find('input[name="terra-date-year-date-input"]').props().value).toEqual(testCase[1][0]);
    expect(wrapper.find('select[name="terra-date-month-date-input"]').props().value).toEqual(testCase[1][1]);
    expect(wrapper.find('input[name="terra-date-day-date-input"]').props().value).toEqual(testCase[1][2]);
  });
}

renderedValueCases.forEach((testCase, i) => renderedValueTestCase(testCase, i));
