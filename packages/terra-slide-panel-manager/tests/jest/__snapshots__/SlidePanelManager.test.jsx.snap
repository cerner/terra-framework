// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SlidePanelManager should disclose content in SlidePanel 1`] = `
<SlidePanelManager
  panelBehavior="overlay"
>
  <DisclosureManager
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "panel",
      ]
    }
  >
    <SlidePanel
      fill={true}
      isOpen={true}
      mainContent={
        Array [
          <TestContainer
            app={
              AppDelegateInstance {
                "disclose": [Function],
              }
            }
          />,
        ]
      }
      panelBehavior="overlay"
      panelContent={
        <SlideGroup
          isAnimated={true}
          items={
            Array [
              <TestContainer
                app={
                  AppDelegateInstance {
                    "closeDisclosure": [Function],
                    "disclose": [Function],
                    "dismiss": [Function],
                    "maximize": [Function],
                    "registerDismissCheck": [Function],
                    "requestFocus": [Function],
                  }
                }
              />,
            ]
          }
        />
      }
      panelPosition="end"
      panelSize="large"
    >
      <div
        className="slide-panel is-open fill"
        data-slide-panel-panel-behavior="overlay"
        data-slide-panel-panel-position="end"
        data-slide-panel-panel-size="large"
      >
        <div
          aria-hidden={null}
          className="panel"
        >
          <SlideGroup
            isAnimated={true}
            items={
              Array [
                <TestContainer
                  app={
                    AppDelegateInstance {
                      "closeDisclosure": [Function],
                      "disclose": [Function],
                      "dismiss": [Function],
                      "maximize": [Function],
                      "registerDismissCheck": [Function],
                      "requestFocus": [Function],
                    }
                  }
                />,
              ]
            }
          >
            <div
              className="slide-group"
            >
              <TransitionGroup
                childFactory={[Function]}
                component="div"
                key="DISCLOSE_KEY"
              >
                <div>
                  <CSSTransition
                    classNames={
                      Object {
                        "enter": "enter",
                        "enterActive": "enter-active",
                        "exit": "exit",
                        "exitActive": "exit-active",
                      }
                    }
                    enter={true}
                    exit={true}
                    in={true}
                    key=".$DISCLOSE_KEY"
                    onEntered={[Function]}
                    onExit={[Function]}
                    onExited={[Function]}
                    timeout={300}
                  >
                    <Transition
                      appear={false}
                      enter={true}
                      exit={true}
                      in={true}
                      mountOnEnter={false}
                      onEnter={[Function]}
                      onEntered={[Function]}
                      onEntering={[Function]}
                      onExit={[Function]}
                      onExited={[Function]}
                      onExiting={[Function]}
                      timeout={300}
                      unmountOnExit={false}
                    >
                      <Slide
                        isHidden={false}
                      >
                        <div
                          aria-hidden={null}
                          className="slide"
                        >
                          <div
                            className="slide-shadow"
                          />
                          <TestContainer
                            app={
                              AppDelegateInstance {
                                "closeDisclosure": [Function],
                                "disclose": [Function],
                                "dismiss": [Function],
                                "maximize": [Function],
                                "registerDismissCheck": [Function],
                                "requestFocus": [Function],
                              }
                            }
                            key="DISCLOSE_KEY"
                          >
                            <div>
                              Hello World
                            </div>
                          </TestContainer>
                        </div>
                      </Slide>
                    </Transition>
                  </CSSTransition>
                </div>
              </TransitionGroup>
            </div>
          </SlideGroup>
        </div>
        <div
          className="main"
        >
          <TestContainer
            app={
              AppDelegateInstance {
                "disclose": [Function],
              }
            }
            key=".0"
          >
            <div>
              Hello World
            </div>
          </TestContainer>
        </div>
      </div>
    </SlidePanel>
  </DisclosureManager>
</SlidePanelManager>
`;

exports[`SlidePanelManager should render the SlidePanelManager with custom props 1`] = `
<SlidePanelManager
  className="test"
  id="my-slide-panel-manager"
  panelBehavior="overlay"
>
  <DisclosureManager
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "panel",
      ]
    }
  >
    <SlidePanel
      className="test"
      fill={true}
      id="my-slide-panel-manager"
      isOpen={false}
      mainContent={
        Array [
          <TestContainer
            app={
              AppDelegateInstance {
                "disclose": [Function],
              }
            }
          />,
        ]
      }
      panelBehavior="overlay"
      panelContent={
        <SlideGroup
          isAnimated={true}
          items={Array []}
        />
      }
      panelPosition="end"
      panelSize="small"
    >
      <div
        className="slide-panel fill test"
        data-slide-panel-panel-behavior="overlay"
        data-slide-panel-panel-position="end"
        data-slide-panel-panel-size="small"
        id="my-slide-panel-manager"
      >
        <div
          aria-hidden="true"
          className="panel"
        >
          <SlideGroup
            isAnimated={true}
            items={Array []}
          />
        </div>
        <div
          className="main"
        >
          <TestContainer
            app={
              AppDelegateInstance {
                "disclose": [Function],
              }
            }
            key=".0"
          >
            <div>
              Hello World
            </div>
          </TestContainer>
        </div>
      </div>
    </SlidePanel>
  </DisclosureManager>
</SlidePanelManager>
`;

exports[`SlidePanelManager should render the SlidePanelManager with defaults 1`] = `
<SlidePanelManager
  panelBehavior="overlay"
>
  <DisclosureManager
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "panel",
      ]
    }
  >
    <SlidePanel
      fill={true}
      isOpen={false}
      mainContent={
        Array [
          <TestContainer
            app={
              AppDelegateInstance {
                "disclose": [Function],
              }
            }
          />,
        ]
      }
      panelBehavior="overlay"
      panelContent={
        <SlideGroup
          isAnimated={true}
          items={Array []}
        />
      }
      panelPosition="end"
      panelSize="small"
    >
      <div
        className="slide-panel fill"
        data-slide-panel-panel-behavior="overlay"
        data-slide-panel-panel-position="end"
        data-slide-panel-panel-size="small"
      >
        <div
          aria-hidden="true"
          className="panel"
        >
          <SlideGroup
            isAnimated={true}
            items={Array []}
          />
        </div>
        <div
          className="main"
        >
          <TestContainer
            app={
              AppDelegateInstance {
                "disclose": [Function],
              }
            }
            key=".0"
          >
            <div>
              Hello World
            </div>
          </TestContainer>
        </div>
      </div>
    </SlidePanel>
  </DisclosureManager>
</SlidePanelManager>
`;

exports[`SlidePanelManager should render the SlidePanelManager with squish override 1`] = `
<SlidePanelManager
  panelBehavior="squish"
>
  <DisclosureManager
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "panel",
      ]
    }
  >
    <SlidePanel
      fill={true}
      isOpen={false}
      mainContent={
        Array [
          <TestContainer
            app={
              AppDelegateInstance {
                "disclose": [Function],
              }
            }
          />,
        ]
      }
      panelBehavior="squish"
      panelContent={
        <SlideGroup
          isAnimated={true}
          items={Array []}
        />
      }
      panelPosition="end"
      panelSize="small"
    >
      <div
        className="slide-panel fill"
        data-slide-panel-panel-behavior="squish"
        data-slide-panel-panel-position="end"
        data-slide-panel-panel-size="small"
      >
        <div
          aria-hidden="true"
          className="panel"
        >
          <SlideGroup
            isAnimated={true}
            items={Array []}
          />
        </div>
        <div
          className="main"
        >
          <TestContainer
            app={
              AppDelegateInstance {
                "disclose": [Function],
              }
            }
            key=".0"
          >
            <div>
              Hello World
            </div>
          </TestContainer>
        </div>
      </div>
    </SlidePanel>
  </DisclosureManager>
</SlidePanelManager>
`;
