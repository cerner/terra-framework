// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SlidePanelManager should disclose content in Modal wrapped by disclose container 1`] = `
<div
  id="disclosure-container"
>
  <withDisclosureManager(Component)
    id="test-panel"
  >
    <Component
      disclosureManager={
        DisclosureManagerDelegateInstance {
          "closeDisclosure": [Function],
          "disclose": [Function],
          "dismiss": [Function],
          "maximize": [Function],
          "registerDismissCheck": [Function],
          "requestFocus": [Function],
        }
      }
      id="test-panel"
    >
      <div
        id="test-panel"
      >
        Hello World
      </div>
    </Component>
  </withDisclosureManager(Component)>
</div>
`;

exports[`SlidePanelManager should disclose content in SlidePanel 1`] = `
<SlidePanelManager
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  level={2}
  panelBehavior="overlay"
>
  <withDisclosureManager(DisclosureManager)
    render={[Function]}
    supportedDisclosureTypes={
      [
        "panel",
      ]
    }
  >
    <DisclosureManager
      render={[Function]}
      supportedDisclosureTypes={
        [
          "panel",
        ]
      }
    >
      <InjectIntl(SlidePanel)
        fill={true}
        intl={
          {
            "defaultFormats": {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": {},
            "formatters": {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": null,
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
        isOpen={true}
        mainContent={
          <Context.Provider
            value={
              DisclosureManagerDelegateInstance {
                "disclose": [Function],
              }
            }
          >
            <withDisclosureManager(Component)
              id="test"
            />
          </Context.Provider>
        }
        panelBehavior="overlay"
        panelContent={
          <ContentContainer
            fill={true}
            header={<React.Fragment />}
            setFocusOnContainer={false}
          >
            <SlideGroup
              focusRef={
                <div
                  aria-hidden="false"
                  aria-label="Terra.slidePanel.defaultPanelLabel"
                  class="panel"
                  role="region"
                  tabindex="-1"
                >
                  <span
                    class="visually-hidden-text"
                  >
                    Terra.slidePanel.defaultPanelLabel
                  </span>
                  <div
                    class="content-container-fill"
                  >
                    <div
                      class="header"
                    />
                    <div
                      class="main"
                    >
                      <div
                        class="scroll normalizer"
                      >
                        <div
                          class="slide-group"
                        >
                          <div
                            class="slide"
                          >
                            <span
                              aria-hidden="true"
                              aria-live="polite"
                              class="visually-hidden-text"
                            />
                            <div
                              class="slide-shadow"
                            />
                            <div
                              id="test-panel"
                            >
                              Hello World
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              }
              isAnimated={true}
              items={
                [
                  <Context.Provider
                    value={
                      {
                        "register": [Function],
                      }
                    }
                  >
                    <Context.Provider
                      value={
                        DisclosureManagerDelegateInstance {
                          "closeDisclosure": [Function],
                          "disclose": [Function],
                          "dismiss": [Function],
                          "maximize": [Function],
                          "registerDismissCheck": [Function],
                          "requestFocus": [Function],
                        }
                      }
                    >
                      <withDisclosureManager(Component)
                        id="test-panel"
                      />
                    </Context.Provider>
                  </Context.Provider>,
                ]
              }
            />
          </ContentContainer>
        }
        panelSize="large"
        setSlidePanelRef={[Function]}
      >
        <SlidePanel
          fill={true}
          intl={
            {
              "defaultFormats": {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": {},
              "formatters": {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": null,
              "now": [Function],
              "onError": [Function],
              "textComponent": "span",
              "timeZone": null,
            }
          }
          isOpen={true}
          mainContent={
            <Context.Provider
              value={
                DisclosureManagerDelegateInstance {
                  "disclose": [Function],
                }
              }
            >
              <withDisclosureManager(Component)
                id="test"
              />
            </Context.Provider>
          }
          panelBehavior="overlay"
          panelContent={
            <ContentContainer
              fill={true}
              header={<React.Fragment />}
              setFocusOnContainer={false}
            >
              <SlideGroup
                focusRef={
                  <div
                    aria-hidden="false"
                    aria-label="Terra.slidePanel.defaultPanelLabel"
                    class="panel"
                    role="region"
                    tabindex="-1"
                  >
                    <span
                      class="visually-hidden-text"
                    >
                      Terra.slidePanel.defaultPanelLabel
                    </span>
                    <div
                      class="content-container-fill"
                    >
                      <div
                        class="header"
                      />
                      <div
                        class="main"
                      >
                        <div
                          class="scroll normalizer"
                        >
                          <div
                            class="slide-group"
                          >
                            <div
                              class="slide"
                            >
                              <span
                                aria-hidden="true"
                                aria-live="polite"
                                class="visually-hidden-text"
                              />
                              <div
                                class="slide-shadow"
                              />
                              <div
                                id="test-panel"
                              >
                                Hello World
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                }
                isAnimated={true}
                items={
                  [
                    <Context.Provider
                      value={
                        {
                          "register": [Function],
                        }
                      }
                    >
                      <Context.Provider
                        value={
                          DisclosureManagerDelegateInstance {
                            "closeDisclosure": [Function],
                            "disclose": [Function],
                            "dismiss": [Function],
                            "maximize": [Function],
                            "registerDismissCheck": [Function],
                            "requestFocus": [Function],
                          }
                        }
                      >
                        <withDisclosureManager(Component)
                          id="test-panel"
                        />
                      </Context.Provider>
                    </Context.Provider>,
                  ]
                }
              />
            </ContentContainer>
          }
          panelPosition="end"
          panelSize="large"
          setSlidePanelRef={[Function]}
        >
          <div
            className="slide-panel is-open fill"
            data-slide-panel-panel-behavior="overlay"
            data-slide-panel-panel-position="end"
            data-slide-panel-panel-size="large"
          >
            <div
              aria-describedby="detail-panel-warning-00000000-0000-0000-0000-000000000000"
              aria-hidden="false"
              className="main"
              key="main"
              role="main"
              tabIndex="-1"
            >
              <VisuallyHiddenText
                id="detail-panel-warning-00000000-0000-0000-0000-000000000000"
                tabIndex="-1"
                text="Terra.slidePanel.discloseWarning"
              >
                <span
                  className="visually-hidden-text"
                  id="detail-panel-warning-00000000-0000-0000-0000-000000000000"
                  tabIndex="-1"
                >
                  Terra.slidePanel.discloseWarning
                </span>
              </VisuallyHiddenText>
              <withDisclosureManager(Component)
                id="test"
              >
                <Component
                  disclosureManager={
                    DisclosureManagerDelegateInstance {
                      "disclose": [Function],
                    }
                  }
                  id="test"
                >
                  <div
                    id="test"
                  >
                    Hello World
                  </div>
                </Component>
              </withDisclosureManager(Component)>
            </div>
            <div
              aria-hidden="false"
              aria-label="Terra.slidePanel.defaultPanelLabel"
              className="panel"
              key="panel"
              role="region"
              tabIndex="-1"
            >
              <VisuallyHiddenText
                text="Terra.slidePanel.defaultPanelLabel"
              >
                <span
                  className="visually-hidden-text"
                >
                  Terra.slidePanel.defaultPanelLabel
                </span>
              </VisuallyHiddenText>
              <ContentContainer
                fill={true}
                header={<React.Fragment />}
                setFocusOnContainer={false}
              >
                <div
                  className="content-container-fill"
                >
                  <div
                    className="header"
                  />
                  <div
                    className="main"
                  >
                    <Scroll
                      className="normalizer"
                    >
                      <div
                        className="scroll normalizer"
                      >
                        <SlideGroup
                          focusRef={
                            <div
                              aria-hidden="false"
                              aria-label="Terra.slidePanel.defaultPanelLabel"
                              class="panel"
                              role="region"
                              tabindex="-1"
                            >
                              <span
                                class="visually-hidden-text"
                              >
                                Terra.slidePanel.defaultPanelLabel
                              </span>
                              <div
                                class="content-container-fill"
                              >
                                <div
                                  class="header"
                                />
                                <div
                                  class="main"
                                >
                                  <div
                                    class="scroll normalizer"
                                  >
                                    <div
                                      class="slide-group"
                                    >
                                      <div
                                        class="slide"
                                      >
                                        <span
                                          aria-hidden="true"
                                          aria-live="polite"
                                          class="visually-hidden-text"
                                        />
                                        <div
                                          class="slide-shadow"
                                        />
                                        <div
                                          id="test-panel"
                                        >
                                          Hello World
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          }
                          isAnimated={true}
                          items={
                            [
                              <Context.Provider
                                value={
                                  {
                                    "register": [Function],
                                  }
                                }
                              >
                                <Context.Provider
                                  value={
                                    DisclosureManagerDelegateInstance {
                                      "closeDisclosure": [Function],
                                      "disclose": [Function],
                                      "dismiss": [Function],
                                      "maximize": [Function],
                                      "registerDismissCheck": [Function],
                                      "requestFocus": [Function],
                                    }
                                  }
                                >
                                  <withDisclosureManager(Component)
                                    id="test-panel"
                                  />
                                </Context.Provider>
                              </Context.Provider>,
                            ]
                          }
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            className="slide-group"
                            component="div"
                            key="DISCLOSE_KEY"
                          >
                            <div
                              className="slide-group"
                            >
                              <CSSTransition
                                classNames={
                                  {
                                    "enter": "enter",
                                    "enterActive": "enter-active",
                                    "exit": "exit",
                                    "exitActive": "exit-active",
                                  }
                                }
                                enter={true}
                                exit={true}
                                id="shmmoop"
                                in={true}
                                key=".$DISCLOSE_KEY"
                                onEntered={[Function]}
                                onExit={[Function]}
                                onExited={[Function]}
                                timeout={300}
                              >
                                <Transition
                                  appear={false}
                                  enter={true}
                                  exit={true}
                                  id="shmmoop"
                                  in={true}
                                  mountOnEnter={false}
                                  onEnter={[Function]}
                                  onEntered={[Function]}
                                  onEntering={[Function]}
                                  onExit={[Function]}
                                  onExited={[Function]}
                                  onExiting={[Function]}
                                  timeout={300}
                                  unmountOnExit={false}
                                >
                                  <Slide
                                    focusRef={
                                      <div
                                        aria-hidden="false"
                                        aria-label="Terra.slidePanel.defaultPanelLabel"
                                        class="panel"
                                        role="region"
                                        tabindex="-1"
                                      >
                                        <span
                                          class="visually-hidden-text"
                                        >
                                          Terra.slidePanel.defaultPanelLabel
                                        </span>
                                        <div
                                          class="content-container-fill"
                                        >
                                          <div
                                            class="header"
                                          />
                                          <div
                                            class="main"
                                          >
                                            <div
                                              class="scroll normalizer"
                                            >
                                              <div
                                                class="slide-group"
                                              >
                                                <div
                                                  class="slide"
                                                >
                                                  <span
                                                    aria-hidden="true"
                                                    aria-live="polite"
                                                    class="visually-hidden-text"
                                                  />
                                                  <div
                                                    class="slide-shadow"
                                                  />
                                                  <div
                                                    id="test-panel"
                                                  >
                                                    Hello World
                                                  </div>
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    }
                                    id="shmmoop"
                                    isHidden={false}
                                    isNested={false}
                                  >
                                    <div
                                      aria-hidden={null}
                                      className="slide"
                                      onClick={[Function]}
                                      onKeyUp={[Function]}
                                    >
                                      <VisuallyHiddenText
                                        aria-hidden={true}
                                        aria-live="polite"
                                      >
                                        <span
                                          aria-hidden={true}
                                          aria-live="polite"
                                          className="visually-hidden-text"
                                        />
                                      </VisuallyHiddenText>
                                      <div
                                        className="slide-shadow"
                                      />
                                      <withDisclosureManager(Component)
                                        id="test-panel"
                                      >
                                        <Component
                                          disclosureManager={
                                            DisclosureManagerDelegateInstance {
                                              "closeDisclosure": [Function],
                                              "disclose": [Function],
                                              "dismiss": [Function],
                                              "maximize": [Function],
                                              "registerDismissCheck": [Function],
                                              "requestFocus": [Function],
                                            }
                                          }
                                          id="test-panel"
                                        >
                                          <div
                                            id="test-panel"
                                          >
                                            Hello World
                                          </div>
                                        </Component>
                                      </withDisclosureManager(Component)>
                                    </div>
                                  </Slide>
                                </Transition>
                              </CSSTransition>
                            </div>
                          </TransitionGroup>
                        </SlideGroup>
                      </div>
                    </Scroll>
                  </div>
                </div>
              </ContentContainer>
            </div>
          </div>
        </SlidePanel>
      </InjectIntl(SlidePanel)>
    </DisclosureManager>
  </withDisclosureManager(DisclosureManager)>
</SlidePanelManager>
`;

exports[`SlidePanelManager should render a SlidePanelManager with level three header element and title 1`] = `
<SlidePanelManager
  className="test"
  id="my-slide-panel-manager"
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  level={3}
  panelBehavior="overlay"
>
  <withDisclosureManager(DisclosureManager)
    render={[Function]}
    supportedDisclosureTypes={
      [
        "panel",
      ]
    }
  >
    <DisclosureManager
      render={[Function]}
      supportedDisclosureTypes={
        [
          "panel",
        ]
      }
    >
      <InjectIntl(SlidePanel)
        className="test"
        fill={true}
        id="my-slide-panel-manager"
        intl={
          {
            "defaultFormats": {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": {},
            "formatters": {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": null,
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
        isOpen={false}
        mainContent={
          <Context.Provider
            value={
              DisclosureManagerDelegateInstance {
                "disclose": [Function],
              }
            }
          >
            <withDisclosureManager(Component) />
          </Context.Provider>
        }
        panelBehavior="overlay"
        panelContent={
          <ContentContainer
            fill={true}
            header={<React.Fragment />}
            setFocusOnContainer={false}
          >
            <SlideGroup
              isAnimated={true}
              items={[]}
            />
          </ContentContainer>
        }
        setSlidePanelRef={[Function]}
      >
        <SlidePanel
          className="test"
          fill={true}
          id="my-slide-panel-manager"
          intl={
            {
              "defaultFormats": {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": {},
              "formatters": {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": null,
              "now": [Function],
              "onError": [Function],
              "textComponent": "span",
              "timeZone": null,
            }
          }
          isOpen={false}
          mainContent={
            <Context.Provider
              value={
                DisclosureManagerDelegateInstance {
                  "disclose": [Function],
                }
              }
            >
              <withDisclosureManager(Component) />
            </Context.Provider>
          }
          panelBehavior="overlay"
          panelContent={
            <ContentContainer
              fill={true}
              header={<React.Fragment />}
              setFocusOnContainer={false}
            >
              <SlideGroup
                isAnimated={true}
                items={[]}
              />
            </ContentContainer>
          }
          panelPosition="end"
          panelSize="small"
          setSlidePanelRef={[Function]}
        >
          <div
            className="slide-panel fill test"
            data-slide-panel-panel-behavior="overlay"
            data-slide-panel-panel-position="end"
            data-slide-panel-panel-size="small"
            id="my-slide-panel-manager"
          >
            <div
              aria-describedby="detail-panel-warning-00000000-0000-0000-0000-000000000000"
              aria-hidden="false"
              className="main"
              key="main"
              role="main"
              tabIndex="-1"
            >
              <VisuallyHiddenText
                id="detail-panel-warning-00000000-0000-0000-0000-000000000000"
                tabIndex="-1"
                text="Terra.slidePanel.discloseWarning"
              >
                <span
                  className="visually-hidden-text"
                  id="detail-panel-warning-00000000-0000-0000-0000-000000000000"
                  tabIndex="-1"
                >
                  Terra.slidePanel.discloseWarning
                </span>
              </VisuallyHiddenText>
              <withDisclosureManager(Component)>
                <Component
                  disclosureManager={
                    DisclosureManagerDelegateInstance {
                      "disclose": [Function],
                    }
                  }
                >
                  <div>
                    Hello World
                  </div>
                </Component>
              </withDisclosureManager(Component)>
            </div>
            <div
              aria-hidden="true"
              aria-label="Terra.slidePanel.defaultPanelLabel"
              className="panel"
              key="panel"
              role="region"
              tabIndex="-1"
            >
              <VisuallyHiddenText
                text="Terra.slidePanel.defaultPanelLabel"
              >
                <span
                  className="visually-hidden-text"
                >
                  Terra.slidePanel.defaultPanelLabel
                </span>
              </VisuallyHiddenText>
              <ContentContainer
                fill={true}
                header={<React.Fragment />}
                setFocusOnContainer={false}
              >
                <div
                  className="content-container-fill"
                >
                  <div
                    className="header"
                  />
                  <div
                    className="main"
                  >
                    <Scroll
                      className="normalizer"
                    >
                      <div
                        className="scroll normalizer"
                      >
                        <SlideGroup
                          isAnimated={true}
                          items={[]}
                        />
                      </div>
                    </Scroll>
                  </div>
                </div>
              </ContentContainer>
            </div>
          </div>
        </SlidePanel>
      </InjectIntl(SlidePanel)>
    </DisclosureManager>
  </withDisclosureManager(DisclosureManager)>
</SlidePanelManager>
`;

exports[`SlidePanelManager should render the SlidePanelManager with custom props 1`] = `
<SlidePanelManager
  className="test"
  id="my-slide-panel-manager"
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  level={2}
  panelBehavior="overlay"
>
  <withDisclosureManager(DisclosureManager)
    render={[Function]}
    supportedDisclosureTypes={
      [
        "panel",
      ]
    }
  >
    <DisclosureManager
      render={[Function]}
      supportedDisclosureTypes={
        [
          "panel",
        ]
      }
    >
      <InjectIntl(SlidePanel)
        className="test"
        fill={true}
        id="my-slide-panel-manager"
        intl={
          {
            "defaultFormats": {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": {},
            "formatters": {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": null,
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
        isOpen={false}
        mainContent={
          <Context.Provider
            value={
              DisclosureManagerDelegateInstance {
                "disclose": [Function],
              }
            }
          >
            <withDisclosureManager(Component) />
          </Context.Provider>
        }
        panelBehavior="overlay"
        panelContent={
          <ContentContainer
            fill={true}
            header={<React.Fragment />}
            setFocusOnContainer={false}
          >
            <SlideGroup
              isAnimated={true}
              items={[]}
            />
          </ContentContainer>
        }
        setSlidePanelRef={[Function]}
      >
        <SlidePanel
          className="test"
          fill={true}
          id="my-slide-panel-manager"
          intl={
            {
              "defaultFormats": {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": {},
              "formatters": {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": null,
              "now": [Function],
              "onError": [Function],
              "textComponent": "span",
              "timeZone": null,
            }
          }
          isOpen={false}
          mainContent={
            <Context.Provider
              value={
                DisclosureManagerDelegateInstance {
                  "disclose": [Function],
                }
              }
            >
              <withDisclosureManager(Component) />
            </Context.Provider>
          }
          panelBehavior="overlay"
          panelContent={
            <ContentContainer
              fill={true}
              header={<React.Fragment />}
              setFocusOnContainer={false}
            >
              <SlideGroup
                isAnimated={true}
                items={[]}
              />
            </ContentContainer>
          }
          panelPosition="end"
          panelSize="small"
          setSlidePanelRef={[Function]}
        >
          <div
            className="slide-panel fill test"
            data-slide-panel-panel-behavior="overlay"
            data-slide-panel-panel-position="end"
            data-slide-panel-panel-size="small"
            id="my-slide-panel-manager"
          >
            <div
              aria-describedby="detail-panel-warning-00000000-0000-0000-0000-000000000000"
              aria-hidden="false"
              className="main"
              key="main"
              role="main"
              tabIndex="-1"
            >
              <VisuallyHiddenText
                id="detail-panel-warning-00000000-0000-0000-0000-000000000000"
                tabIndex="-1"
                text="Terra.slidePanel.discloseWarning"
              >
                <span
                  className="visually-hidden-text"
                  id="detail-panel-warning-00000000-0000-0000-0000-000000000000"
                  tabIndex="-1"
                >
                  Terra.slidePanel.discloseWarning
                </span>
              </VisuallyHiddenText>
              <withDisclosureManager(Component)>
                <Component
                  disclosureManager={
                    DisclosureManagerDelegateInstance {
                      "disclose": [Function],
                    }
                  }
                >
                  <div>
                    Hello World
                  </div>
                </Component>
              </withDisclosureManager(Component)>
            </div>
            <div
              aria-hidden="true"
              aria-label="Terra.slidePanel.defaultPanelLabel"
              className="panel"
              key="panel"
              role="region"
              tabIndex="-1"
            >
              <VisuallyHiddenText
                text="Terra.slidePanel.defaultPanelLabel"
              >
                <span
                  className="visually-hidden-text"
                >
                  Terra.slidePanel.defaultPanelLabel
                </span>
              </VisuallyHiddenText>
              <ContentContainer
                fill={true}
                header={<React.Fragment />}
                setFocusOnContainer={false}
              >
                <div
                  className="content-container-fill"
                >
                  <div
                    className="header"
                  />
                  <div
                    className="main"
                  >
                    <Scroll
                      className="normalizer"
                    >
                      <div
                        className="scroll normalizer"
                      >
                        <SlideGroup
                          isAnimated={true}
                          items={[]}
                        />
                      </div>
                    </Scroll>
                  </div>
                </div>
              </ContentContainer>
            </div>
          </div>
        </SlidePanel>
      </InjectIntl(SlidePanel)>
    </DisclosureManager>
  </withDisclosureManager(DisclosureManager)>
</SlidePanelManager>
`;

exports[`SlidePanelManager should render the SlidePanelManager with defaults 1`] = `
<SlidePanelManager
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  level={2}
  panelBehavior="overlay"
>
  <withDisclosureManager(DisclosureManager)
    render={[Function]}
    supportedDisclosureTypes={
      [
        "panel",
      ]
    }
  >
    <DisclosureManager
      render={[Function]}
      supportedDisclosureTypes={
        [
          "panel",
        ]
      }
    >
      <InjectIntl(SlidePanel)
        fill={true}
        intl={
          {
            "defaultFormats": {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": {},
            "formatters": {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": null,
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
        isOpen={false}
        mainContent={
          <Context.Provider
            value={
              DisclosureManagerDelegateInstance {
                "disclose": [Function],
              }
            }
          >
            <withDisclosureManager(Component) />
          </Context.Provider>
        }
        panelBehavior="overlay"
        panelContent={
          <ContentContainer
            fill={true}
            header={<React.Fragment />}
            setFocusOnContainer={false}
          >
            <SlideGroup
              isAnimated={true}
              items={[]}
            />
          </ContentContainer>
        }
        setSlidePanelRef={[Function]}
      >
        <SlidePanel
          fill={true}
          intl={
            {
              "defaultFormats": {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": {},
              "formatters": {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": null,
              "now": [Function],
              "onError": [Function],
              "textComponent": "span",
              "timeZone": null,
            }
          }
          isOpen={false}
          mainContent={
            <Context.Provider
              value={
                DisclosureManagerDelegateInstance {
                  "disclose": [Function],
                }
              }
            >
              <withDisclosureManager(Component) />
            </Context.Provider>
          }
          panelBehavior="overlay"
          panelContent={
            <ContentContainer
              fill={true}
              header={<React.Fragment />}
              setFocusOnContainer={false}
            >
              <SlideGroup
                isAnimated={true}
                items={[]}
              />
            </ContentContainer>
          }
          panelPosition="end"
          panelSize="small"
          setSlidePanelRef={[Function]}
        >
          <div
            className="slide-panel fill"
            data-slide-panel-panel-behavior="overlay"
            data-slide-panel-panel-position="end"
            data-slide-panel-panel-size="small"
          >
            <div
              aria-describedby="detail-panel-warning-00000000-0000-0000-0000-000000000000"
              aria-hidden="false"
              className="main"
              key="main"
              role="main"
              tabIndex="-1"
            >
              <VisuallyHiddenText
                id="detail-panel-warning-00000000-0000-0000-0000-000000000000"
                tabIndex="-1"
                text="Terra.slidePanel.discloseWarning"
              >
                <span
                  className="visually-hidden-text"
                  id="detail-panel-warning-00000000-0000-0000-0000-000000000000"
                  tabIndex="-1"
                >
                  Terra.slidePanel.discloseWarning
                </span>
              </VisuallyHiddenText>
              <withDisclosureManager(Component)>
                <Component
                  disclosureManager={
                    DisclosureManagerDelegateInstance {
                      "disclose": [Function],
                    }
                  }
                >
                  <div>
                    Hello World
                  </div>
                </Component>
              </withDisclosureManager(Component)>
            </div>
            <div
              aria-hidden="true"
              aria-label="Terra.slidePanel.defaultPanelLabel"
              className="panel"
              key="panel"
              role="region"
              tabIndex="-1"
            >
              <VisuallyHiddenText
                text="Terra.slidePanel.defaultPanelLabel"
              >
                <span
                  className="visually-hidden-text"
                >
                  Terra.slidePanel.defaultPanelLabel
                </span>
              </VisuallyHiddenText>
              <ContentContainer
                fill={true}
                header={<React.Fragment />}
                setFocusOnContainer={false}
              >
                <div
                  className="content-container-fill"
                >
                  <div
                    className="header"
                  />
                  <div
                    className="main"
                  >
                    <Scroll
                      className="normalizer"
                    >
                      <div
                        className="scroll normalizer"
                      >
                        <SlideGroup
                          isAnimated={true}
                          items={[]}
                        />
                      </div>
                    </Scroll>
                  </div>
                </div>
              </ContentContainer>
            </div>
          </div>
        </SlidePanel>
      </InjectIntl(SlidePanel)>
    </DisclosureManager>
  </withDisclosureManager(DisclosureManager)>
</SlidePanelManager>
`;

exports[`SlidePanelManager should render the SlidePanelManager with squish override 1`] = `
<SlidePanelManager
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  level={2}
  panelBehavior="squish"
>
  <withDisclosureManager(DisclosureManager)
    render={[Function]}
    supportedDisclosureTypes={
      [
        "panel",
      ]
    }
  >
    <DisclosureManager
      render={[Function]}
      supportedDisclosureTypes={
        [
          "panel",
        ]
      }
    >
      <InjectIntl(SlidePanel)
        fill={true}
        intl={
          {
            "defaultFormats": {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": {},
            "formatters": {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": null,
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
        isOpen={false}
        mainContent={
          <Context.Provider
            value={
              DisclosureManagerDelegateInstance {
                "disclose": [Function],
              }
            }
          >
            <withDisclosureManager(Component) />
          </Context.Provider>
        }
        panelBehavior="squish"
        panelContent={
          <ContentContainer
            fill={true}
            header={<React.Fragment />}
            setFocusOnContainer={false}
          >
            <SlideGroup
              isAnimated={true}
              items={[]}
            />
          </ContentContainer>
        }
        setSlidePanelRef={[Function]}
      >
        <SlidePanel
          fill={true}
          intl={
            {
              "defaultFormats": {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": {},
              "formatters": {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": null,
              "now": [Function],
              "onError": [Function],
              "textComponent": "span",
              "timeZone": null,
            }
          }
          isOpen={false}
          mainContent={
            <Context.Provider
              value={
                DisclosureManagerDelegateInstance {
                  "disclose": [Function],
                }
              }
            >
              <withDisclosureManager(Component) />
            </Context.Provider>
          }
          panelBehavior="squish"
          panelContent={
            <ContentContainer
              fill={true}
              header={<React.Fragment />}
              setFocusOnContainer={false}
            >
              <SlideGroup
                isAnimated={true}
                items={[]}
              />
            </ContentContainer>
          }
          panelPosition="end"
          panelSize="small"
          setSlidePanelRef={[Function]}
        >
          <div
            className="slide-panel fill"
            data-slide-panel-panel-behavior="squish"
            data-slide-panel-panel-position="end"
            data-slide-panel-panel-size="small"
          >
            <div
              aria-describedby="detail-panel-warning-00000000-0000-0000-0000-000000000000"
              aria-hidden="false"
              className="main"
              key="main"
              role="main"
              tabIndex="-1"
            >
              <VisuallyHiddenText
                id="detail-panel-warning-00000000-0000-0000-0000-000000000000"
                tabIndex="-1"
                text="Terra.slidePanel.discloseWarning"
              >
                <span
                  className="visually-hidden-text"
                  id="detail-panel-warning-00000000-0000-0000-0000-000000000000"
                  tabIndex="-1"
                >
                  Terra.slidePanel.discloseWarning
                </span>
              </VisuallyHiddenText>
              <withDisclosureManager(Component)>
                <Component
                  disclosureManager={
                    DisclosureManagerDelegateInstance {
                      "disclose": [Function],
                    }
                  }
                >
                  <div>
                    Hello World
                  </div>
                </Component>
              </withDisclosureManager(Component)>
            </div>
            <div
              aria-hidden="true"
              aria-label="Terra.slidePanel.defaultPanelLabel"
              className="panel"
              key="panel"
              role="region"
              tabIndex="-1"
            >
              <VisuallyHiddenText
                text="Terra.slidePanel.defaultPanelLabel"
              >
                <span
                  className="visually-hidden-text"
                >
                  Terra.slidePanel.defaultPanelLabel
                </span>
              </VisuallyHiddenText>
              <ContentContainer
                fill={true}
                header={<React.Fragment />}
                setFocusOnContainer={false}
              >
                <div
                  className="content-container-fill"
                >
                  <div
                    className="header"
                  />
                  <div
                    className="main"
                  >
                    <Scroll
                      className="normalizer"
                    >
                      <div
                        className="scroll normalizer"
                      >
                        <SlideGroup
                          isAnimated={true}
                          items={[]}
                        />
                      </div>
                    </Scroll>
                  </div>
                </div>
              </ContentContainer>
            </div>
          </div>
        </SlidePanel>
      </InjectIntl(SlidePanel)>
    </DisclosureManager>
  </withDisclosureManager(DisclosureManager)>
</SlidePanelManager>
`;
