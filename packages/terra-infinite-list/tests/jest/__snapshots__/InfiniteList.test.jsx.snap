// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InfiniteList should render a default component 1`] = `
<InfiniteList
  ariaLabel="Infinite List"
  dividerStyle="none"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isFinishedLoading={false}
  paddingStyle="none"
  role="none"
/>
`;

exports[`InfiniteList should render with initial children 1`] = `
<InfiniteList
  ariaLabel="Infinite List"
  dividerStyle="none"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isFinishedLoading={true}
  paddingStyle="none"
  role="none"
>
  <ListItem
    hasChevron={false}
    isSelectable={false}
    isSelected={false}
    key="item-1"
  >
    <div
      className="item"
    >
      item 1
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={false}
    isSelected={false}
    key="item-2"
  >
    <div
      className="item"
    >
      item 2
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={false}
    isSelected={false}
    key="item-3"
  >
    <div
      className="item"
    >
      item 3
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={false}
    isSelected={false}
    key="item-4"
  >
    <div
      className="item"
    >
      item 4
    </div>
  </ListItem>
</InfiniteList>
`;

exports[`InfiniteList should render with list props 1`] = `
<InfiniteList
  ariaLabel="Infinite List"
  dividerStyle="standard"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isFinishedLoading={true}
  paddingStyle="standard"
  progressiveLoadingMessage="Loading allergies..."
  role="listbox"
>
  <ListItem
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-1"
  >
    <div
      className="item"
    >
      item 1
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={true}
    isSelected={true}
    key="item-2"
  >
    <div
      className="item"
    >
      item 2
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-3"
  >
    <div
      className="item"
    >
      item 3
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-4"
  >
    <div
      className="item"
    >
      item 4
    </div>
  </ListItem>
</InfiniteList>
`;

exports[`InfiniteList should render with list with style props 1`] = `
<InfiniteList
  ariaLabel="Infinite List"
  dividerStyle="standard"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isFinishedLoading={true}
  paddingStyle="standard"
  role="listbox"
>
  <ListItem
    className="item1"
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-1"
  >
    <div
      className="item"
    >
      item 1
    </div>
  </ListItem>
  <ListItem
    className="item2"
    hasChevron={false}
    isSelectable={true}
    isSelected={true}
    key="item-2"
  >
    <div
      className="item"
    >
      item 2
    </div>
  </ListItem>
  <ListItem
    className="item3"
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-3"
  >
    <div
      className="item"
    >
      item 3
    </div>
  </ListItem>
  <ListItem
    className="item4"
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-4"
  >
    <div
      className="item"
    >
      item 4
    </div>
  </ListItem>
</InfiniteList>
`;

exports[`InfiniteList should render with no children and loading 1`] = `
<InfiniteList
  ariaLabel="Infinite List"
  dividerStyle="none"
  initialLoadingIndicator={
    <div
      className="initialLoadingIndicator"
    />
  }
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isFinishedLoading={false}
  paddingStyle="none"
  progressiveLoadingIndicator={
    <div
      className="progressiveLoadingIndicator"
    />
  }
  role="none"
/>
`;
