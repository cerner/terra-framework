// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ModalManager should disclose content in Modal 1`] = `
<ModalManager>
  <withDisclosureManager(DisclosureManager)
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "modal",
      ]
    }
    trapNestedDisclosureRequests={true}
  >
    <DisclosureManager
      render={[Function]}
      supportedDisclosureTypes={
        Array [
          "modal",
        ]
      }
      trapNestedDisclosureRequests={true}
    >
      <div
        className="container"
      >
        <withDisclosureManager(Component)
          id="test"
        >
          <Component
            disclosureManager={
              DisclosureManagerDelegateInstance {
                "disclose": [Function],
              }
            }
            id="test"
          >
            <button
              id="test"
              type="button"
            >
              Hello World
            </button>
          </Component>
        </withDisclosureManager(Component)>
        <AbstractModal
          ariaLabel="Modal"
          classNameModal="modal-manager height-870 width-1280"
          classNameOverlay={null}
          closeOnEsc={true}
          closeOnOutsideClick={false}
          isFocused={true}
          isFullscreen={false}
          isOpen={true}
          onRequestClose={[Function]}
          role="dialog"
          rootSelector="#root"
          zIndex="6000"
        >
          <Portal
            isOpened={true}
          >
            <Portal
              containerInfo={
                <div>
                  <div>
                    <div
                      class="overlay layer-6000"
                    />
                    <div
                      aria-label="Modal"
                      aria-modal="true"
                      class="abstract-modal layer-6000 modal-manager height-870 width-1280"
                      role="dialog"
                      tabindex="0"
                    >
                      <div
                        class="slide-group"
                      >
                        <div
                          class="slide"
                        >
                          <div
                            class="slide-shadow"
                          />
                          <button
                            type="button"
                          >
                            Hello World
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              }
            >
              <ModalContent
                aria-modal="true"
                ariaLabel="Modal"
                classNameModal="modal-manager height-870 width-1280"
                classNameOverlay={null}
                closeOnOutsideClick={false}
                isFocused={true}
                isFullscreen={false}
                isScrollable={false}
                onRequestClose={[Function]}
                role="dialog"
                zIndex="6000"
              >
                <FocusTrap
                  _createFocusTrap={[Function]}
                  active={true}
                  focusTrapOptions={
                    Object {
                      "escapeDeactivates": false,
                      "fallbackFocus": [Function],
                    }
                  }
                  paused={false}
                  tag="div"
                >
                  <div>
                    <ModalOverlay
                      className={null}
                      onClick={null}
                      zIndex="6000"
                    >
                      <div
                        className="overlay layer-6000"
                        onClick={null}
                      />
                    </ModalOverlay>
                    <div
                      aria-label="Modal"
                      aria-modal="true"
                      className="abstract-modal layer-6000 modal-manager height-870 width-1280"
                      role="dialog"
                      tabIndex="0"
                    >
                      <SlideGroup
                        isAnimated={true}
                        items={
                          Array [
                            <Context.Provider
                              value={
                                DisclosureManagerDelegateInstance {
                                  "closeDisclosure": [Function],
                                  "disclose": [Function],
                                  "dismiss": [Function],
                                  "maximize": [Function],
                                  "registerDismissCheck": [Function],
                                  "requestFocus": [Function],
                                }
                              }
                            >
                              <withDisclosureManager(Component) />
                            </Context.Provider>,
                          ]
                        }
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          className="slide-group"
                          component="div"
                          key="DISCLOSE_KEY"
                        >
                          <div
                            className="slide-group"
                          >
                            <CSSTransition
                              classNames={
                                Object {
                                  "enter": "enter",
                                  "enterActive": "enter-active",
                                  "exit": "exit",
                                  "exitActive": "exit-active",
                                }
                              }
                              enter={true}
                              exit={true}
                              id="shmmoop"
                              in={true}
                              key=".$DISCLOSE_KEY"
                              onEntered={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              timeout={300}
                            >
                              <Transition
                                appear={false}
                                enter={true}
                                exit={true}
                                id="shmmoop"
                                in={true}
                                mountOnEnter={false}
                                onEnter={[Function]}
                                onEntered={[Function]}
                                onEntering={[Function]}
                                onExit={[Function]}
                                onExited={[Function]}
                                onExiting={[Function]}
                                timeout={300}
                                unmountOnExit={false}
                              >
                                <Slide
                                  id="shmmoop"
                                  isHidden={false}
                                >
                                  <div
                                    aria-hidden={null}
                                    className="slide"
                                  >
                                    <div
                                      className="slide-shadow"
                                    />
                                    <withDisclosureManager(Component)>
                                      <Component
                                        disclosureManager={
                                          DisclosureManagerDelegateInstance {
                                            "closeDisclosure": [Function],
                                            "disclose": [Function],
                                            "dismiss": [Function],
                                            "maximize": [Function],
                                            "registerDismissCheck": [Function],
                                            "requestFocus": [Function],
                                          }
                                        }
                                      >
                                        <button
                                          type="button"
                                        >
                                          Hello World
                                        </button>
                                      </Component>
                                    </withDisclosureManager(Component)>
                                  </div>
                                </Slide>
                              </Transition>
                            </CSSTransition>
                          </div>
                        </TransitionGroup>
                      </SlideGroup>
                    </div>
                  </div>
                </FocusTrap>
              </ModalContent>
            </Portal>
          </Portal>
        </AbstractModal>
      </div>
    </DisclosureManager>
  </withDisclosureManager(DisclosureManager)>
</ModalManager>
`;

exports[`ModalManager should render the ModalManager with custom props 1`] = `
<ModalManager
  className="test"
  id="my-modal-manager"
>
  <withDisclosureManager(DisclosureManager)
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "modal",
      ]
    }
    trapNestedDisclosureRequests={true}
  >
    <DisclosureManager
      render={[Function]}
      supportedDisclosureTypes={
        Array [
          "modal",
        ]
      }
      trapNestedDisclosureRequests={true}
    >
      <div
        className="container test"
        id="my-modal-manager"
      >
        <withDisclosureManager(Component)>
          <Component
            disclosureManager={
              DisclosureManagerDelegateInstance {
                "disclose": [Function],
              }
            }
          >
            <button
              type="button"
            >
              Hello World
            </button>
          </Component>
        </withDisclosureManager(Component)>
        <AbstractModal
          ariaLabel="Modal"
          classNameModal="modal-manager"
          classNameOverlay={null}
          closeOnEsc={true}
          closeOnOutsideClick={false}
          isFocused={false}
          isFullscreen={false}
          isOpen={false}
          onRequestClose={[Function]}
          role="dialog"
          rootSelector="#root"
          zIndex="6000"
        />
      </div>
    </DisclosureManager>
  </withDisclosureManager(DisclosureManager)>
</ModalManager>
`;

exports[`ModalManager should render the ModalManager with defaults 1`] = `
<ModalManager>
  <withDisclosureManager(DisclosureManager)
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "modal",
      ]
    }
    trapNestedDisclosureRequests={true}
  >
    <DisclosureManager
      render={[Function]}
      supportedDisclosureTypes={
        Array [
          "modal",
        ]
      }
      trapNestedDisclosureRequests={true}
    >
      <div
        className="container"
      >
        <withDisclosureManager(Component)>
          <Component
            disclosureManager={
              DisclosureManagerDelegateInstance {
                "disclose": [Function],
              }
            }
          >
            <button
              type="button"
            >
              Hello World
            </button>
          </Component>
        </withDisclosureManager(Component)>
        <AbstractModal
          ariaLabel="Modal"
          classNameModal="modal-manager"
          classNameOverlay={null}
          closeOnEsc={true}
          closeOnOutsideClick={false}
          isFocused={false}
          isFullscreen={false}
          isOpen={false}
          onRequestClose={[Function]}
          role="dialog"
          rootSelector="#root"
          zIndex="6000"
        />
      </div>
    </DisclosureManager>
  </withDisclosureManager(DisclosureManager)>
</ModalManager>
`;
