// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ModalManager should disclose content in Modal 1`] = `
<ModalManager>
  <DisclosureManager
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "modal",
      ]
    }
  >
    <div
      className="container"
    >
      <TestContainer
        app={
          AppDelegateInstance {
            "disclose": [Function],
          }
        }
        key=".0"
      >
        <div>
          Hello World
        </div>
      </TestContainer>
      <AbstractModal
        ariaLabel="Modal"
        classNameModal="modal-manager height-870 width-1280"
        classNameOverlay={null}
        closeOnEsc={true}
        closeOnOutsideClick={false}
        isFocused={true}
        isFullscreen={false}
        isOpen={true}
        onRequestClose={[Function]}
        role="document"
        zIndex="6000"
      >
        <Portal
          isOpened={true}
        >
          <ModalContent
            ariaLabel="Modal"
            classNameModal="modal-manager height-870 width-1280"
            classNameOverlay={null}
            closeOnOutsideClick={false}
            isFocused={true}
            isFullscreen={false}
            isScrollable={false}
            onRequestClose={[Function]}
            role="document"
            zIndex="6000"
          >
            <FocusTrap
              _createFocusTrap={[Function]}
              active={true}
              focusTrapOptions={Object {}}
              paused={false}
              tag="div"
            >
              <div>
                <ModalOverlay
                  className={null}
                  onClick={null}
                  zIndex="6000"
                >
                  <div
                    className="overlay layer-6000"
                    onClick={null}
                  />
                </ModalOverlay>
                <div
                  aria-label="Modal"
                  className="abstract-modal layer-6000 modal-manager height-870 width-1280"
                  role="document"
                  tabIndex="0"
                >
                  <SlideGroup
                    isAnimated={true}
                    items={
                      Array [
                        <TestContainer
                          app={
                            AppDelegateInstance {
                              "closeDisclosure": [Function],
                              "disclose": [Function],
                              "dismiss": [Function],
                              "maximize": [Function],
                              "registerDismissCheck": [Function],
                              "requestFocus": [Function],
                            }
                          }
                        />,
                      ]
                    }
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      className="slide-group"
                      component="div"
                      key="DISCLOSE_KEY"
                    >
                      <div
                        className="slide-group"
                      >
                        <CSSTransition
                          classNames={
                            Object {
                              "enter": "enter",
                              "enterActive": "enter-active",
                              "exit": "exit",
                              "exitActive": "exit-active",
                            }
                          }
                          enter={true}
                          exit={true}
                          id="shmmoop"
                          in={true}
                          key=".$DISCLOSE_KEY"
                          onEntered={[Function]}
                          onExit={[Function]}
                          onExited={[Function]}
                          timeout={300}
                        >
                          <Transition
                            appear={false}
                            enter={true}
                            exit={true}
                            id="shmmoop"
                            in={true}
                            mountOnEnter={false}
                            onEnter={[Function]}
                            onEntered={[Function]}
                            onEntering={[Function]}
                            onExit={[Function]}
                            onExited={[Function]}
                            onExiting={[Function]}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Slide
                              id="shmmoop"
                              isHidden={false}
                            >
                              <div
                                aria-hidden={null}
                                className="slide"
                              >
                                <div
                                  className="slide-shadow"
                                />
                                <TestContainer
                                  app={
                                    AppDelegateInstance {
                                      "closeDisclosure": [Function],
                                      "disclose": [Function],
                                      "dismiss": [Function],
                                      "maximize": [Function],
                                      "registerDismissCheck": [Function],
                                      "requestFocus": [Function],
                                    }
                                  }
                                  key="DISCLOSE_KEY"
                                >
                                  <div>
                                    Hello World
                                  </div>
                                </TestContainer>
                              </div>
                            </Slide>
                          </Transition>
                        </CSSTransition>
                      </div>
                    </TransitionGroup>
                  </SlideGroup>
                </div>
              </div>
            </FocusTrap>
          </ModalContent>
        </Portal>
      </AbstractModal>
    </div>
  </DisclosureManager>
</ModalManager>
`;

exports[`ModalManager should render the ModalManager with custom props 1`] = `
<ModalManager
  className="test"
  id="my-modal-manager"
>
  <DisclosureManager
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "modal",
      ]
    }
  >
    <div
      className="container test"
      id="my-modal-manager"
    >
      <TestContainer
        app={
          AppDelegateInstance {
            "disclose": [Function],
          }
        }
        key=".0"
      >
        <div>
          Hello World
        </div>
      </TestContainer>
      <AbstractModal
        ariaLabel="Modal"
        classNameModal="modal-manager"
        classNameOverlay={null}
        closeOnEsc={true}
        closeOnOutsideClick={false}
        isFocused={true}
        isFullscreen={false}
        isOpen={false}
        onRequestClose={[Function]}
        role="document"
        zIndex="6000"
      />
    </div>
  </DisclosureManager>
</ModalManager>
`;

exports[`ModalManager should render the ModalManager with defaults 1`] = `
<ModalManager>
  <DisclosureManager
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "modal",
      ]
    }
  >
    <div
      className="container"
    >
      <TestContainer
        app={
          AppDelegateInstance {
            "disclose": [Function],
          }
        }
        key=".0"
      >
        <div>
          Hello World
        </div>
      </TestContainer>
      <AbstractModal
        ariaLabel="Modal"
        classNameModal="modal-manager"
        classNameOverlay={null}
        closeOnEsc={true}
        closeOnOutsideClick={false}
        isFocused={true}
        isFullscreen={false}
        isOpen={false}
        onRequestClose={[Function]}
        role="document"
        zIndex="6000"
      />
    </div>
  </DisclosureManager>
</ModalManager>
`;
