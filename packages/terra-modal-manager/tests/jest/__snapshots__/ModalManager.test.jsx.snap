// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ModalManager should disclose content in Modal 1`] = `
<ModalManager
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <withDisclosureManager(DisclosureManager)
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "modal",
      ]
    }
    trapNestedDisclosureRequests={true}
  >
    <DisclosureManager
      render={[Function]}
      supportedDisclosureTypes={
        Array [
          "modal",
        ]
      }
      trapNestedDisclosureRequests={true}
    >
      <div
        className="container"
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": null,
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
      >
        <withDisclosureManager(Component)
          id="test"
        >
          <Component
            disclosureManager={
              DisclosureManagerDelegateInstance {
                "disclose": [Function],
              }
            }
            id="test"
          >
            <button
              id="test"
              type="button"
            >
              Hello World
            </button>
          </Component>
        </withDisclosureManager(Component)>
        <AbstractModal
          ariaLabel="Modal"
          classNameModal="modal-manager height-870 width-1280"
          classNameOverlay={null}
          closeOnEsc={true}
          closeOnOutsideClick={false}
          isFullscreen={false}
          isOpen={true}
          onRequestClose={[Function]}
          role="dialog"
          rootSelector="#root"
          zIndex="6000"
        >
          <Portal
            isOpened={true}
          >
            <Portal
              containerInfo={
                <div>
                  <div
                    class="overlay layer-6000"
                  />
                  <div
                    aria-label="Modal"
                    aria-modal="true"
                    class="abstract-modal layer-6000 modal-manager height-870 width-1280"
                    role="dialog"
                    tabindex="0"
                  >
                    <span
                      class="visually-hidden-text"
                      data-terra-abstract-modal-begin="true"
                      tabindex="-1"
                    >
                      Terra.AbstractModal.BeginModalDialog
                    </span>
                    <div
                      class="content-container-fill"
                    >
                      <div
                        class="header"
                      />
                      <div
                        class="main"
                      >
                        <div
                          class="scroll normalizer"
                        >
                          <div
                            class="slide-group"
                          >
                            <div
                              class="slide"
                            >
                              <div
                                class="slide-shadow"
                              />
                              <button
                                id="test-modal"
                                type="button"
                              >
                                Hello World
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <span
                      class="visually-hidden-text"
                    >
                      Terra.AbstractModal.EndModalDialog
                    </span>
                  </div>
                </div>
              }
            >
              <ForwardRef
                aria-modal="true"
                ariaLabel="Modal"
                classNameModal="modal-manager height-870 width-1280"
                classNameOverlay={null}
                closeOnOutsideClick={false}
                isFullscreen={false}
                isScrollable={false}
                onRequestClose={[Function]}
                role="dialog"
                rootSelector="#root"
                zIndex="6000"
              >
                <ModalOverlay
                  className={null}
                  onClick={null}
                  zIndex="6000"
                >
                  <div
                    className="overlay layer-6000"
                    onClick={null}
                  />
                </ModalOverlay>
                <div
                  aria-label="Modal"
                  aria-modal="true"
                  className="abstract-modal layer-6000 modal-manager height-870 width-1280"
                  role="dialog"
                  tabIndex="0"
                >
                  <FormattedMessage
                    id="Terra.AbstractModal.BeginModalDialog"
                    values={Object {}}
                  >
                    <VisuallyHiddenText
                      data-terra-abstract-modal-begin={true}
                      tabIndex="-1"
                      text="Terra.AbstractModal.BeginModalDialog"
                    >
                      <span
                        className="visually-hidden-text"
                        data-terra-abstract-modal-begin={true}
                        tabIndex="-1"
                      >
                        Terra.AbstractModal.BeginModalDialog
                      </span>
                    </VisuallyHiddenText>
                  </FormattedMessage>
                  <ContentContainer
                    fill={true}
                    header={<React.Fragment />}
                  >
                    <div
                      className="content-container-fill"
                    >
                      <div
                        className="header"
                      />
                      <div
                        className="main"
                      >
                        <Scroll
                          className="normalizer"
                        >
                          <div
                            className="scroll normalizer"
                          >
                            <SlideGroup
                              isAnimated={true}
                              items={
                                Array [
                                  <Context.Provider
                                    value={
                                      Object {
                                        "register": [Function],
                                      }
                                    }
                                  >
                                    <Context.Provider
                                      value={
                                        DisclosureManagerDelegateInstance {
                                          "closeDisclosure": [Function],
                                          "disclose": [Function],
                                          "dismiss": [Function],
                                          "maximize": [Function],
                                          "registerDismissCheck": [Function],
                                          "requestFocus": [Function],
                                        }
                                      }
                                    >
                                      <withDisclosureManager(Component)
                                        id="test-modal"
                                      />
                                    </Context.Provider>
                                  </Context.Provider>,
                                ]
                              }
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                className="slide-group"
                                component="div"
                                key="DISCLOSE_KEY"
                              >
                                <div
                                  className="slide-group"
                                >
                                  <CSSTransition
                                    classNames={
                                      Object {
                                        "enter": "enter",
                                        "enterActive": "enter-active",
                                        "exit": "exit",
                                        "exitActive": "exit-active",
                                      }
                                    }
                                    enter={true}
                                    exit={true}
                                    id="shmmoop"
                                    in={true}
                                    key=".$DISCLOSE_KEY"
                                    onEntered={[Function]}
                                    onExit={[Function]}
                                    onExited={[Function]}
                                    timeout={300}
                                  >
                                    <Transition
                                      appear={false}
                                      enter={true}
                                      exit={true}
                                      id="shmmoop"
                                      in={true}
                                      mountOnEnter={false}
                                      onEnter={[Function]}
                                      onEntered={[Function]}
                                      onEntering={[Function]}
                                      onExit={[Function]}
                                      onExited={[Function]}
                                      onExiting={[Function]}
                                      timeout={300}
                                      unmountOnExit={false}
                                    >
                                      <Slide
                                        id="shmmoop"
                                        isHidden={false}
                                      >
                                        <div
                                          aria-hidden={null}
                                          className="slide"
                                        >
                                          <div
                                            className="slide-shadow"
                                          />
                                          <withDisclosureManager(Component)
                                            id="test-modal"
                                          >
                                            <Component
                                              disclosureManager={
                                                DisclosureManagerDelegateInstance {
                                                  "closeDisclosure": [Function],
                                                  "disclose": [Function],
                                                  "dismiss": [Function],
                                                  "maximize": [Function],
                                                  "registerDismissCheck": [Function],
                                                  "requestFocus": [Function],
                                                }
                                              }
                                              id="test-modal"
                                            >
                                              <button
                                                id="test-modal"
                                                type="button"
                                              >
                                                Hello World
                                              </button>
                                            </Component>
                                          </withDisclosureManager(Component)>
                                        </div>
                                      </Slide>
                                    </Transition>
                                  </CSSTransition>
                                </div>
                              </TransitionGroup>
                            </SlideGroup>
                          </div>
                        </Scroll>
                      </div>
                    </div>
                  </ContentContainer>
                  <FormattedMessage
                    id="Terra.AbstractModal.EndModalDialog"
                    values={Object {}}
                  >
                    <VisuallyHiddenText
                      text="Terra.AbstractModal.EndModalDialog"
                    >
                      <span
                        className="visually-hidden-text"
                      >
                        Terra.AbstractModal.EndModalDialog
                      </span>
                    </VisuallyHiddenText>
                  </FormattedMessage>
                </div>
              </ForwardRef>
            </Portal>
          </Portal>
        </AbstractModal>
      </div>
    </DisclosureManager>
  </withDisclosureManager(DisclosureManager)>
</ModalManager>
`;

exports[`ModalManager should disclose content in Modal wrapped by disclose container 1`] = `
<div
  id="disclosure-container"
>
  <withDisclosureManager(Component)
    id="test-modal"
  >
    <Component
      disclosureManager={
        DisclosureManagerDelegateInstance {
          "closeDisclosure": [Function],
          "disclose": [Function],
          "dismiss": [Function],
          "maximize": [Function],
          "registerDismissCheck": [Function],
          "requestFocus": [Function],
        }
      }
      id="test-modal"
    >
      <button
        id="test-modal"
        type="button"
      >
        Hello World
      </button>
    </Component>
  </withDisclosureManager(Component)>
</div>
`;

exports[`ModalManager should render the ModalManager with custom props 1`] = `
<ModalManager
  className="test"
  id="my-modal-manager"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <withDisclosureManager(DisclosureManager)
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "modal",
      ]
    }
    trapNestedDisclosureRequests={true}
  >
    <DisclosureManager
      render={[Function]}
      supportedDisclosureTypes={
        Array [
          "modal",
        ]
      }
      trapNestedDisclosureRequests={true}
    >
      <div
        className="container test"
        id="my-modal-manager"
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": null,
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
      >
        <withDisclosureManager(Component)>
          <Component
            disclosureManager={
              DisclosureManagerDelegateInstance {
                "disclose": [Function],
              }
            }
          >
            <button
              type="button"
            >
              Hello World
            </button>
          </Component>
        </withDisclosureManager(Component)>
        <AbstractModal
          ariaLabel="Modal"
          classNameModal="modal-manager"
          classNameOverlay={null}
          closeOnEsc={true}
          closeOnOutsideClick={false}
          isFullscreen={false}
          isOpen={false}
          onRequestClose={[Function]}
          role="dialog"
          rootSelector="#root"
          zIndex="6000"
        />
      </div>
    </DisclosureManager>
  </withDisclosureManager(DisclosureManager)>
</ModalManager>
`;

exports[`ModalManager should render the ModalManager with defaults 1`] = `
<ModalManager
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <withDisclosureManager(DisclosureManager)
    render={[Function]}
    supportedDisclosureTypes={
      Array [
        "modal",
      ]
    }
    trapNestedDisclosureRequests={true}
  >
    <DisclosureManager
      render={[Function]}
      supportedDisclosureTypes={
        Array [
          "modal",
        ]
      }
      trapNestedDisclosureRequests={true}
    >
      <div
        className="container"
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": null,
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
      >
        <withDisclosureManager(Component)>
          <Component
            disclosureManager={
              DisclosureManagerDelegateInstance {
                "disclose": [Function],
              }
            }
          >
            <button
              type="button"
            >
              Hello World
            </button>
          </Component>
        </withDisclosureManager(Component)>
        <AbstractModal
          ariaLabel="Modal"
          classNameModal="modal-manager"
          classNameOverlay={null}
          closeOnEsc={true}
          closeOnOutsideClick={false}
          isFullscreen={false}
          isOpen={false}
          onRequestClose={[Function]}
          role="dialog"
          rootSelector="#root"
          zIndex="6000"
        />
      </div>
    </DisclosureManager>
  </withDisclosureManager(DisclosureManager)>
</ModalManager>
`;
