// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`correctly applies the theme context className 1`] = `
<ContextProvider
  value={
    Object {
      "className": "orion-fusion-theme",
      "name": undefined,
    }
  }
>
  <injectIntl(DateTimePicker)
    initialTimeZone="America/Chicago"
    name="date-time-input"
  />
</ContextProvider>
`;

exports[`should render a date time picker with a default date and time 1`] = `
<DateTimePicker
  disabled={false}
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  required={false}
  showSeconds={false}
  timeVariant="24-hour"
  value="2017-04-01T10:30"
/>
`;

exports[`should render a date time picker with disabled dates 1`] = `
<DateTimePicker
  disabled={false}
  excludeDates={
    Array [
      "2017-04-01",
    ]
  }
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  required={false}
  showSeconds={false}
  timeVariant="24-hour"
/>
`;

exports[`should render a date time picker with filtered dates 1`] = `
<DateTimePicker
  disabled={false}
  filterDate={[Function]}
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  required={false}
  showSeconds={false}
  timeVariant="24-hour"
/>
`;

exports[`should render a date time picker with included dates 1`] = `
<DateTimePicker
  disabled={false}
  includeDates={
    Array [
      "2017-04-01",
    ]
  }
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  required={false}
  showSeconds={false}
  timeVariant="24-hour"
/>
`;

exports[`should render a date time picker with min and max dates 1`] = `
<DateTimePicker
  disabled={false}
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2017-04-01"
  minDate="2017-04-10"
  name="date-time-input"
  required={false}
  showSeconds={false}
  timeVariant="24-hour"
/>
`;

exports[`should render a date time picker with onBlur 1`] = `
<DateTimePicker
  disabled={false}
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  onBlur={[Function]}
  required={false}
  showSeconds={false}
  timeVariant="24-hour"
/>
`;

exports[`should render a date time picker with onChange 1`] = `
<DateTimePicker
  disabled={false}
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  onChange={[Function]}
  required={false}
  showSeconds={false}
  timeVariant="24-hour"
/>
`;

exports[`should render a date time picker with onChangeRaw 1`] = `
<DateTimePicker
  disabled={false}
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  onChangeRaw={[Function]}
  required={false}
  showSeconds={false}
  timeVariant="24-hour"
/>
`;

exports[`should render a date time picker with the seconds field enabled 1`] = `
<DateTimePicker
  disabled={false}
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  required={false}
  showSeconds={true}
  timeVariant="24-hour"
/>
`;

exports[`should render a default date time picker 1`] = `
<DateTimePicker
  disabled={false}
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  required={false}
  showSeconds={false}
  timeVariant="24-hour"
/>
`;

exports[`should render a default date time picker with custom date input attributes 1`] = `
<DateTimePicker
  dateInputAttributes={
    Object {
      "id": "terra-date-input",
    }
  }
  disabled={false}
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  required={false}
  showSeconds={false}
  timeVariant="24-hour"
/>
`;

exports[`should render a default date time picker with custom time input attributes 1`] = `
<DateTimePicker
  disabled={false}
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  required={false}
  showSeconds={false}
  timeInputAttributes={
    Object {
      "id": "terra-time-input",
    }
  }
  timeVariant="24-hour"
/>
`;

exports[`should render a disabled date time picker 1`] = `
<DateTimePicker
  disabled={true}
  initialTimeZone="America/Chicago"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  maxDate="2100-12-31"
  minDate="1900-01-01"
  name="date-time-input"
  required={false}
  showSeconds={false}
  timeVariant="24-hour"
/>
`;

exports[`should render with a default timeVariant if variant is not specified 1`] = `
<injectIntl(DateTimePicker)
  initialTimeZone="America/Chicago"
  name="date-time-input"
  value="2017-04-01T10:30"
>
  <DateTimePicker
    disabled={false}
    initialTimeZone="America/Chicago"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isIncomplete={false}
    isInvalid={false}
    isInvalidMeridiem={false}
    maxDate="2100-12-31"
    minDate="1900-01-01"
    name="date-time-input"
    required={false}
    showSeconds={false}
    timeVariant="24-hour"
    value="2017-04-01T10:30"
  >
    <div
      className="date-time-picker"
      intl={
        Object {
          "$t": [Function],
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "defaultRichTextElements": undefined,
          "fallbackOnEmptyString": true,
          "formatDate": [Function],
          "formatDateTimeRange": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatListToParts": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "onError": [Function],
          "onWarn": [Function],
          "textComponent": Symbol(react.fragment),
          "timeZone": undefined,
          "wrapRichTextChunksInFragment": undefined,
        }
      }
    >
      <input
        data-terra-date-time-input-hidden={true}
        name="date-time-input"
        type="hidden"
        value="2017-04-01T10:30:00-05:00"
      />
      <div
        className="date-facade"
      >
        <injectIntl(DatePicker)
          disableButtonFocusOnClose={true}
          disabled={false}
          initialTimeZone="America/Chicago"
          isDefaultDateAcceptable={true}
          isIncomplete={false}
          isInvalid={false}
          maxDate="2100-12-31"
          minDate="1900-01-01"
          name="input"
          onBlur={[Function]}
          onCalendarButtonClick={[Function]}
          onChange={[Function]}
          onChangeRaw={[Function]}
          onFocus={[Function]}
          onSelect={[Function]}
          required={false}
          selectedDate="2017-04-01"
          value="2017-04-01"
        >
          <DatePicker
            disableButtonFocusOnClose={true}
            disabled={false}
            initialTimeZone="America/Chicago"
            intl={
              Object {
                "$t": [Function],
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "defaultRichTextElements": undefined,
                "fallbackOnEmptyString": true,
                "formatDate": [Function],
                "formatDateTimeRange": [Function],
                "formatDateToParts": [Function],
                "formatDisplayName": [Function],
                "formatList": [Function],
                "formatListToParts": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatNumberToParts": [Function],
                "formatPlural": [Function],
                "formatRelativeTime": [Function],
                "formatTime": [Function],
                "formatTimeToParts": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getDisplayNames": [Function],
                  "getListFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralRules": [Function],
                  "getRelativeTimeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "onError": [Function],
                "onWarn": [Function],
                "textComponent": Symbol(react.fragment),
                "timeZone": undefined,
                "wrapRichTextChunksInFragment": undefined,
              }
            }
            isDefaultDateAcceptable={true}
            isIncomplete={false}
            isInline={false}
            isInvalid={false}
            maxDate="2100-12-31"
            minDate="1900-01-01"
            name="input"
            onBlur={[Function]}
            onCalendarButtonClick={[Function]}
            onChange={[Function]}
            onChangeRaw={[Function]}
            onFocus={[Function]}
            onSelect={[Function]}
            required={false}
            selectedDate="2017-04-01"
            useExternalFormatMask={false}
            value="2017-04-01"
          >
            <div
              className="date-picker"
            >
              <ResponsiveElement
                onChange={[Function]}
                responsiveTo="window"
              >
                <injectIntl(DatePicker)
                  allowSameDay={true}
                  customInput={
                    <injectIntl(DatePickerInput)
                      buttonRefCallback={[Function]}
                      initialTimeZone="America/Chicago"
                      isIncomplete={false}
                      isInvalid={false}
                      onButtonFocus={[Function]}
                      onCalendarButtonClick={[Function]}
                      required={false}
                      shouldShowPicker={false}
                      useExternalFormatMask={false}
                    />
                  }
                  customInputRef="firstInputRefCallback"
                  dateFormat="MM/DD/YYYY"
                  dateFormatCalendar=" "
                  disabled={false}
                  dropdownMode="select"
                  filterDate={[Function]}
                  fixedHeight={true}
                  initialTimeZone="America/Chicago"
                  inline={false}
                  isDefaultDateAcceptable={true}
                  locale="en"
                  maxDate={"2100-12-31T06:00:00.000Z"}
                  minDate={"1900-01-01T06:00:00.000Z"}
                  name="input"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onChangeRaw={[Function]}
                  onClickOutside={[Function]}
                  onFocus={[Function]}
                  onSelect={[Function]}
                  preventOpenOnFocus={true}
                  required={false}
                  selected={"2017-04-01T05:00:00.000Z"}
                  showMonthDropdown={true}
                  showYearDropdown={true}
                  todayButton="Terra.datePicker.today"
                  value="04/01/2017"
                  withPortal={false}
                >
                  <DatePicker
                    allowSameDay={true}
                    customInput={
                      <injectIntl(DatePickerInput)
                        buttonRefCallback={[Function]}
                        initialTimeZone="America/Chicago"
                        isIncomplete={false}
                        isInvalid={false}
                        onButtonFocus={[Function]}
                        onCalendarButtonClick={[Function]}
                        required={false}
                        shouldShowPicker={false}
                        useExternalFormatMask={false}
                      />
                    }
                    customInputRef="firstInputRefCallback"
                    dateFormat="MM/DD/YYYY"
                    dateFormatCalendar=" "
                    disabled={false}
                    disabledKeyboardNavigation={false}
                    dropdownMode="select"
                    filterDate={[Function]}
                    fixedHeight={true}
                    initialTimeZone="America/Chicago"
                    inline={false}
                    intl={
                      Object {
                        "$t": [Function],
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "defaultRichTextElements": undefined,
                        "fallbackOnEmptyString": true,
                        "formatDate": [Function],
                        "formatDateTimeRange": [Function],
                        "formatDateToParts": [Function],
                        "formatDisplayName": [Function],
                        "formatList": [Function],
                        "formatListToParts": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatNumberToParts": [Function],
                        "formatPlural": [Function],
                        "formatRelativeTime": [Function],
                        "formatTime": [Function],
                        "formatTimeToParts": [Function],
                        "formats": Object {},
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getDisplayNames": [Function],
                          "getListFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralRules": [Function],
                          "getRelativeTimeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": null,
                        "onError": [Function],
                        "onWarn": [Function],
                        "textComponent": Symbol(react.fragment),
                        "timeZone": undefined,
                        "wrapRichTextChunksInFragment": undefined,
                      }
                    }
                    isDefaultDateAcceptable={true}
                    locale="en"
                    maxDate={"2100-12-31T06:00:00.000Z"}
                    minDate={"1900-01-01T06:00:00.000Z"}
                    monthsShown={1}
                    name="input"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onChangeRaw={[Function]}
                    onClickOutside={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onMonthChange={[Function]}
                    onSelect={[Function]}
                    preventOpenOnFocus={true}
                    required={false}
                    selected={"2017-04-01T05:00:00.000Z"}
                    shouldCloseOnSelect={true}
                    showMonthDropdown={true}
                    showYearDropdown={true}
                    todayButton="Terra.datePicker.today"
                    value="04/01/2017"
                    withPortal={false}
                  >
                    <div
                      className="react-datepicker-input-container"
                    >
                      <injectIntl(DatePickerInput)
                        buttonRefCallback={[Function]}
                        className=""
                        disabled={false}
                        firstInputRefCallback={[Function]}
                        initialTimeZone="America/Chicago"
                        isIncomplete={false}
                        isInvalid={false}
                        name="input"
                        onBlur={[Function]}
                        onButtonFocus={[Function]}
                        onCalendarButtonClick={[Function]}
                        onChange={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        required={false}
                        shouldShowPicker={false}
                        useExternalFormatMask={false}
                        value="04/01/2017"
                      >
                        <DatePickerInput
                          buttonRefCallback={[Function]}
                          className=""
                          disabled={false}
                          firstInputRefCallback={[Function]}
                          initialTimeZone="America/Chicago"
                          intl={
                            Object {
                              "$t": [Function],
                              "defaultFormats": Object {},
                              "defaultLocale": "en",
                              "defaultRichTextElements": undefined,
                              "fallbackOnEmptyString": true,
                              "formatDate": [Function],
                              "formatDateTimeRange": [Function],
                              "formatDateToParts": [Function],
                              "formatDisplayName": [Function],
                              "formatList": [Function],
                              "formatListToParts": [Function],
                              "formatMessage": [Function],
                              "formatNumber": [Function],
                              "formatNumberToParts": [Function],
                              "formatPlural": [Function],
                              "formatRelativeTime": [Function],
                              "formatTime": [Function],
                              "formatTimeToParts": [Function],
                              "formats": Object {},
                              "formatters": Object {
                                "getDateTimeFormat": [Function],
                                "getDisplayNames": [Function],
                                "getListFormat": [Function],
                                "getMessageFormat": [Function],
                                "getNumberFormat": [Function],
                                "getPluralRules": [Function],
                                "getRelativeTimeFormat": [Function],
                              },
                              "locale": "en",
                              "messages": null,
                              "onError": [Function],
                              "onWarn": [Function],
                              "textComponent": Symbol(react.fragment),
                              "timeZone": undefined,
                              "wrapRichTextChunksInFragment": undefined,
                            }
                          }
                          isIncomplete={false}
                          isInvalid={false}
                          name="input"
                          onBlur={[Function]}
                          onButtonFocus={[Function]}
                          onCalendarButtonClick={[Function]}
                          onChange={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          required={false}
                          shouldShowPicker={false}
                          useExternalFormatMask={false}
                          value="04/01/2017"
                        >
                          <div
                            className=""
                          >
                            <div
                              className="date-input-container"
                            >
                              <div
                                className="date-input"
                                disabled={false}
                              >
                                <input
                                  data-terra-date-input-hidden={true}
                                  name="input"
                                  type="hidden"
                                  value="2017-04-01"
                                />
                                <VisuallyHiddenText
                                  text="Terra.datePicker.date, Saturday, April 1, 2017"
                                >
                                  <span
                                    className="visually-hidden-text"
                                  >
                                    Terra.datePicker.date, Saturday, April 1, 2017
                                  </span>
                                </VisuallyHiddenText>
                                <DateInputLayout
                                  dateFormatOrder="MDY"
                                  day={
                                    <Input
                                      aria-describedby="terra-date-picker-description-format-86a31d7d-f38b-4e0c-b3c5-f2ffda5cf82d"
                                      aria-label="Terra.datePicker.dayLabel"
                                      aria-required={false}
                                      className="date-input-day"
                                      disabled={false}
                                      isIncomplete={false}
                                      isInvalid={false}
                                      maxLength="2"
                                      name="terra-date-day-input"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      pattern="\\\\d*"
                                      refCallback={[Function]}
                                      required={false}
                                      size="2"
                                      type="text"
                                      value="01"
                                    />
                                  }
                                  month={
                                    <Input
                                      aria-describedby="terra-date-picker-description-format-86a31d7d-f38b-4e0c-b3c5-f2ffda5cf82d"
                                      aria-label="Terra.datePicker.monthLabel"
                                      aria-required={false}
                                      className="date-input-month"
                                      disabled={false}
                                      isIncomplete={false}
                                      isInvalid={false}
                                      maxLength="2"
                                      name="terra-date-month-input"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      pattern="\\\\d*"
                                      refCallback={[Function]}
                                      required={false}
                                      size="2"
                                      type="text"
                                      value="04"
                                    />
                                  }
                                  separator={
                                    <span
                                      className="date-spacer"
                                    >
                                      /
                                    </span>
                                  }
                                  year={
                                    <Input
                                      aria-describedby="terra-date-picker-description-format-86a31d7d-f38b-4e0c-b3c5-f2ffda5cf82d"
                                      aria-label="Terra.datePicker.yearLabel"
                                      aria-required={false}
                                      className="date-input-year"
                                      disabled={false}
                                      isIncomplete={false}
                                      isInvalid={false}
                                      maxLength="4"
                                      name="terra-date-year-input"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      pattern="\\\\d*"
                                      refCallback={[Function]}
                                      required={false}
                                      size="4"
                                      type="text"
                                      value="2017"
                                    />
                                  }
                                >
                                  <Input
                                    aria-describedby="terra-date-picker-description-format-86a31d7d-f38b-4e0c-b3c5-f2ffda5cf82d"
                                    aria-label="Terra.datePicker.monthLabel"
                                    aria-required={false}
                                    className="date-input-month"
                                    disabled={false}
                                    isIncomplete={false}
                                    isInvalid={false}
                                    maxLength="2"
                                    name="terra-date-month-input"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    pattern="\\\\d*"
                                    refCallback={[Function]}
                                    required={false}
                                    size="2"
                                    type="text"
                                    value="04"
                                  >
                                    <input
                                      aria-describedby="terra-date-picker-description-format-86a31d7d-f38b-4e0c-b3c5-f2ffda5cf82d"
                                      aria-label="Terra.datePicker.monthLabel"
                                      aria-required={false}
                                      className="form-input date-input-month"
                                      disabled={false}
                                      maxLength="2"
                                      name="terra-date-month-input"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      pattern="\\\\d*"
                                      required={false}
                                      size="2"
                                      type="text"
                                      value="04"
                                    />
                                  </Input>
                                  <span
                                    className="date-spacer"
                                  >
                                    /
                                  </span>
                                  <Input
                                    aria-describedby="terra-date-picker-description-format-86a31d7d-f38b-4e0c-b3c5-f2ffda5cf82d"
                                    aria-label="Terra.datePicker.dayLabel"
                                    aria-required={false}
                                    className="date-input-day"
                                    disabled={false}
                                    isIncomplete={false}
                                    isInvalid={false}
                                    maxLength="2"
                                    name="terra-date-day-input"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    pattern="\\\\d*"
                                    refCallback={[Function]}
                                    required={false}
                                    size="2"
                                    type="text"
                                    value="01"
                                  >
                                    <input
                                      aria-describedby="terra-date-picker-description-format-86a31d7d-f38b-4e0c-b3c5-f2ffda5cf82d"
                                      aria-label="Terra.datePicker.dayLabel"
                                      aria-required={false}
                                      className="form-input date-input-day"
                                      disabled={false}
                                      maxLength="2"
                                      name="terra-date-day-input"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      pattern="\\\\d*"
                                      required={false}
                                      size="2"
                                      type="text"
                                      value="01"
                                    />
                                  </Input>
                                  <span
                                    className="date-spacer"
                                  >
                                    /
                                  </span>
                                  <Input
                                    aria-describedby="terra-date-picker-description-format-86a31d7d-f38b-4e0c-b3c5-f2ffda5cf82d"
                                    aria-label="Terra.datePicker.yearLabel"
                                    aria-required={false}
                                    className="date-input-year"
                                    disabled={false}
                                    isIncomplete={false}
                                    isInvalid={false}
                                    maxLength="4"
                                    name="terra-date-year-input"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    pattern="\\\\d*"
                                    refCallback={[Function]}
                                    required={false}
                                    size="4"
                                    type="text"
                                    value="2017"
                                  >
                                    <input
                                      aria-describedby="terra-date-picker-description-format-86a31d7d-f38b-4e0c-b3c5-f2ffda5cf82d"
                                      aria-label="Terra.datePicker.yearLabel"
                                      aria-required={false}
                                      className="form-input date-input-year"
                                      disabled={false}
                                      maxLength="4"
                                      name="terra-date-year-input"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      pattern="\\\\d*"
                                      required={false}
                                      size="4"
                                      type="text"
                                      value="2017"
                                    />
                                  </Input>
                                </DateInputLayout>
                              </div>
                              <Button
                                className="button"
                                data-terra-open-calendar-button={true}
                                icon={
                                  <IconCalendar
                                    viewBox="0 0 48 48"
                                    xmlns="http://www.w3.org/2000/svg"
                                  />
                                }
                                isBlock={false}
                                isCompact={true}
                                isDisabled={false}
                                isIconOnly={true}
                                isReversed={false}
                                onBlur={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                refCallback={[Function]}
                                text="Terra.datePicker.openCalendar"
                                type="button"
                                variant="neutral"
                              >
                                <button
                                  aria-disabled={false}
                                  aria-label="Terra.datePicker.openCalendar"
                                  className="button neutral compact button"
                                  data-terra-open-calendar-button={true}
                                  disabled={false}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  title="Terra.datePicker.openCalendar"
                                  type="button"
                                >
                                  <span
                                    className="button-label icon-only"
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <IconCalendar
                                        className="icon-svg"
                                        viewBox="0 0 48 48"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <IconBase
                                          ariaLabel={null}
                                          className="icon-svg"
                                          focusable="false"
                                          height="1em"
                                          isBidi={false}
                                          isSpin={false}
                                          viewBox="0 0 48 48"
                                          width="1em"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <svg
                                            aria-hidden="true"
                                            className="tui-Icon icon icon-svg"
                                            focusable="false"
                                            height="1em"
                                            viewBox="0 0 48 48"
                                            width="1em"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <path
                                              d="M43 6h-4V2.2C39 1 38 0 36.8 0h-1.7C33.9.1 33 1 33 2.2V6H15V2.2C15 1 14 0 12.8 0h-1.7C9.9.1 9 1 9 2.2V6H5c-1.1 0-2 .9-2 2v38c0 1.1.9 2 2 2h24c1.3-.1 2.5-.6 3.4-1.4l11.2-11.1c.8-.9 1.3-2.1 1.4-3.4V8c0-1.1-.9-2-2-2zM6 21h36v10H30c-1.1 0-2 .9-2 2v12H6V21zm25 22.8V34h9.8L31 43.8z"
                                            />
                                          </svg>
                                        </IconBase>
                                      </IconCalendar>
                                    </span>
                                  </span>
                                </button>
                              </Button>
                            </div>
                            <div
                              aria-label="Terra.datePicker.dateFormatLabel Terra.datePicker.dateFormat"
                              className="format-text"
                              id="terra-date-picker-description-format-86a31d7d-f38b-4e0c-b3c5-f2ffda5cf82d"
                            >
                              (Terra.datePicker.dateFormat)
                            </div>
                          </div>
                        </DatePickerInput>
                      </injectIntl(DatePickerInput)>
                    </div>
                  </DatePicker>
                </injectIntl(DatePicker)>
              </ResponsiveElement>
            </div>
          </DatePicker>
        </injectIntl(DatePicker)>
      </div>
      <div
        className="time-facade"
      >
        <injectIntl(TimeInput)
          atMaxDate={false}
          atMinDate={false}
          disabled={false}
          isIncomplete={false}
          isInvalid={false}
          isInvalidMeridiem={false}
          name="input"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          refCallback={[Function]}
          required={false}
          showSeconds={false}
          value="10:30"
          variant="24-hour"
        >
          <TimeInput
            atMaxDate={false}
            atMinDate={false}
            disabled={false}
            hourAttributes={Object {}}
            inputAttributes={
              Object {
                "disabled": false,
                "isInvalid": false,
                "required": false,
              }
            }
            intl={
              Object {
                "$t": [Function],
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "defaultRichTextElements": undefined,
                "fallbackOnEmptyString": true,
                "formatDate": [Function],
                "formatDateTimeRange": [Function],
                "formatDateToParts": [Function],
                "formatDisplayName": [Function],
                "formatList": [Function],
                "formatListToParts": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatNumberToParts": [Function],
                "formatPlural": [Function],
                "formatRelativeTime": [Function],
                "formatTime": [Function],
                "formatTimeToParts": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getDisplayNames": [Function],
                  "getListFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralRules": [Function],
                  "getRelativeTimeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "onError": [Function],
                "onWarn": [Function],
                "textComponent": Symbol(react.fragment),
                "timeZone": undefined,
                "wrapRichTextChunksInFragment": undefined,
              }
            }
            isIncomplete={false}
            isInvalid={false}
            isInvalidMeridiem={false}
            minuteAttributes={Object {}}
            name="input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            refCallback={[Function]}
            required={false}
            secondAttributes={Object {}}
            showSeconds={false}
            value="10:30"
            variant="24-hour"
          >
            <div
              className="time-input-container"
            >
              <div
                aria-label="Terra.timeInput.a11yLabelDefault"
                className="time-input"
                role="group"
              >
                <AccessibleValue
                  readThis="Terra.timeInput.labeledTextValue"
                  value="Terra.timeInput.textValueTwentyFourHourMinute"
                >
                  <VisuallyHiddenText
                    aria-hidden={false}
                    text="Terra.timeInput.labeledTextValue"
                  >
                    <span
                      aria-hidden={false}
                      className="visually-hidden-text"
                    >
                      Terra.timeInput.labeledTextValue
                    </span>
                  </VisuallyHiddenText>
                </AccessibleValue>
                <input
                  name="input"
                  type="hidden"
                  value="T10:30"
                />
                <AccessibleInput
                  className="time-input-hour"
                  description="Terra.timeInput.hourDescriptionTwentyFour"
                  disabled={false}
                  isInvalid={false}
                  label="Terra.timeInput.hourLabel"
                  maxLength="2"
                  name="terra-time-hour-input"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  pattern="\\\\d*"
                  refCallback={[Function]}
                  required={false}
                  showIsInvalid={false}
                  size="2"
                  type="text"
                  value="10"
                >
                  <VisuallyHiddenText
                    id="032fb53b-f7ae-42a7-b590-37db36f3144c-label"
                    text="Terra.timeInput.hourLabel"
                  >
                    <span
                      className="visually-hidden-text"
                      id="032fb53b-f7ae-42a7-b590-37db36f3144c-label"
                    >
                      Terra.timeInput.hourLabel
                    </span>
                  </VisuallyHiddenText>
                  <Input
                    aria-describedby="032fb53b-f7ae-42a7-b590-37db36f3144c-description"
                    aria-disabled={false}
                    aria-invalid={false}
                    aria-labelledby="032fb53b-f7ae-42a7-b590-37db36f3144c-label"
                    className="time-input-hour"
                    disabled={false}
                    isIncomplete={false}
                    isInvalid={false}
                    maxLength="2"
                    name="terra-time-hour-input"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    pattern="\\\\d*"
                    refCallback={[Function]}
                    required={false}
                    size="2"
                    type="text"
                    value="10"
                  >
                    <input
                      aria-describedby="032fb53b-f7ae-42a7-b590-37db36f3144c-description"
                      aria-disabled={false}
                      aria-invalid={false}
                      aria-labelledby="032fb53b-f7ae-42a7-b590-37db36f3144c-label"
                      className="form-input time-input-hour"
                      disabled={false}
                      maxLength="2"
                      name="terra-time-hour-input"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      pattern="\\\\d*"
                      required={false}
                      size="2"
                      type="text"
                      value="10"
                    />
                  </Input>
                  <VisuallyHiddenText
                    id="032fb53b-f7ae-42a7-b590-37db36f3144c-description"
                    text="Terra.timeInput.hourDescriptionTwentyFour"
                  >
                    <span
                      className="visually-hidden-text"
                      id="032fb53b-f7ae-42a7-b590-37db36f3144c-description"
                    >
                      Terra.timeInput.hourDescriptionTwentyFour
                    </span>
                  </VisuallyHiddenText>
                </AccessibleInput>
                <injectIntl(TimeSpacer)
                  className="time-spacer"
                >
                  <TimeSpacer
                    className="time-spacer"
                    intl={
                      Object {
                        "$t": [Function],
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "defaultRichTextElements": undefined,
                        "fallbackOnEmptyString": true,
                        "formatDate": [Function],
                        "formatDateTimeRange": [Function],
                        "formatDateToParts": [Function],
                        "formatDisplayName": [Function],
                        "formatList": [Function],
                        "formatListToParts": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatNumberToParts": [Function],
                        "formatPlural": [Function],
                        "formatRelativeTime": [Function],
                        "formatTime": [Function],
                        "formatTimeToParts": [Function],
                        "formats": Object {},
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getDisplayNames": [Function],
                          "getListFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralRules": [Function],
                          "getRelativeTimeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": null,
                        "onError": [Function],
                        "onWarn": [Function],
                        "textComponent": Symbol(react.fragment),
                        "timeZone": undefined,
                        "wrapRichTextChunksInFragment": undefined,
                      }
                    }
                  >
                    <span
                      aria-hidden={true}
                      className="time-spacer"
                    >
                      Terra.timeInput.timeSpacer
                    </span>
                  </TimeSpacer>
                </injectIntl(TimeSpacer)>
                <AccessibleInput
                  className="time-input-minute"
                  description="Terra.timeInput.descriptionMinute"
                  disabled={false}
                  isInvalid={false}
                  label="Terra.timeInput.minutes"
                  maxLength="2"
                  name="terra-time-minute-input"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  pattern="\\\\d*"
                  refCallback={[Function]}
                  required={false}
                  showIsInvalid={false}
                  size="2"
                  type="text"
                  value="30"
                >
                  <VisuallyHiddenText
                    id="2d2c295b-d218-4c1c-b47c-0d3e2a9a00a5-label"
                    text="Terra.timeInput.minutes"
                  >
                    <span
                      className="visually-hidden-text"
                      id="2d2c295b-d218-4c1c-b47c-0d3e2a9a00a5-label"
                    >
                      Terra.timeInput.minutes
                    </span>
                  </VisuallyHiddenText>
                  <Input
                    aria-describedby="2d2c295b-d218-4c1c-b47c-0d3e2a9a00a5-description"
                    aria-disabled={false}
                    aria-invalid={false}
                    aria-labelledby="2d2c295b-d218-4c1c-b47c-0d3e2a9a00a5-label"
                    className="time-input-minute"
                    disabled={false}
                    isIncomplete={false}
                    isInvalid={false}
                    maxLength="2"
                    name="terra-time-minute-input"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    pattern="\\\\d*"
                    refCallback={[Function]}
                    required={false}
                    size="2"
                    type="text"
                    value="30"
                  >
                    <input
                      aria-describedby="2d2c295b-d218-4c1c-b47c-0d3e2a9a00a5-description"
                      aria-disabled={false}
                      aria-invalid={false}
                      aria-labelledby="2d2c295b-d218-4c1c-b47c-0d3e2a9a00a5-label"
                      className="form-input time-input-minute"
                      disabled={false}
                      maxLength="2"
                      name="terra-time-minute-input"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      pattern="\\\\d*"
                      required={false}
                      size="2"
                      type="text"
                      value="30"
                    />
                  </Input>
                  <VisuallyHiddenText
                    id="2d2c295b-d218-4c1c-b47c-0d3e2a9a00a5-description"
                    text="Terra.timeInput.descriptionMinute"
                  >
                    <span
                      className="visually-hidden-text"
                      id="2d2c295b-d218-4c1c-b47c-0d3e2a9a00a5-description"
                    >
                      Terra.timeInput.descriptionMinute
                    </span>
                  </VisuallyHiddenText>
                </AccessibleInput>
              </div>
              <div
                aria-hidden={true}
                className="format-text"
              >
                Terra.timeInput.maskHourMinute
              </div>
            </div>
          </TimeInput>
        </injectIntl(TimeInput)>
      </div>
    </div>
  </DateTimePicker>
</injectIntl(DateTimePicker)>
`;
