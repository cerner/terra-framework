// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NavigationLayout should render a NavigationLayout with defaulted components and forward relevant config 1`] = `
<Layout
  header={
    <NavigationLayoutContent
      navigationLayoutRoutes={
        [
          {
            "componentClass": [Function],
            "componentProps": {
              "type": "header",
            },
            "parentPaths": [],
            "path": "/",
            "refuseRoutingStackNavigation": undefined,
          },
        ]
      }
      navigationLayoutSize="medium"
    />
  }
  menu={
    <NavigationLayoutContent
      navigationLayoutRoutes={
        [
          {
            "componentClass": [Function],
            "componentProps": {
              "type": "menu",
            },
            "parentPaths": [],
            "path": "/",
            "refuseRoutingStackNavigation": undefined,
          },
        ]
      }
      navigationLayoutSize="medium"
      stackNavigationIsEnabled={true}
    />
  }
>
  <NavigationLayoutContent
    navigationLayoutRoutes={
      [
        {
          "componentClass": [Function],
          "componentProps": {
            "type": "content",
          },
          "parentPaths": [],
          "path": "/",
          "refuseRoutingStackNavigation": undefined,
        },
      ]
    }
    navigationLayoutSize="medium"
    redirectPath="/"
  />
</Layout>
`;

exports[`NavigationLayout should render a NavigationLayout with provided components 1`] = `
<Layout
  header={
    <Header
      navigationLayoutRoutes={[]}
      navigationLayoutSize="medium"
    />
  }
  menu={
    <Menu
      navigationLayoutRoutes={[]}
      navigationLayoutSize="medium"
    />
  }
>
  <Content
    navigationLayoutRoutes={[]}
    navigationLayoutSize="medium"
  />
</Layout>
`;

exports[`NavigationLayout should render a NavigationLayout with provided components and forward relevant config 1`] = `
<Layout
  header={
    <Header
      navigationLayoutRoutes={
        [
          {
            "componentClass": [Function],
            "componentProps": {
              "type": "header",
            },
            "parentPaths": [],
            "path": "/",
            "refuseRoutingStackNavigation": undefined,
          },
        ]
      }
      navigationLayoutSize="medium"
    />
  }
  menu={
    <Menu
      navigationLayoutRoutes={
        [
          {
            "componentClass": [Function],
            "componentProps": {
              "type": "menu",
            },
            "parentPaths": [],
            "path": "/",
            "refuseRoutingStackNavigation": undefined,
          },
        ]
      }
      navigationLayoutSize="medium"
    />
  }
>
  <Content
    navigationLayoutRoutes={
      [
        {
          "componentClass": [Function],
          "componentProps": {
            "type": "content",
          },
          "parentPaths": [],
          "path": "/",
          "refuseRoutingStackNavigation": undefined,
        },
      ]
    }
    navigationLayoutSize="medium"
  />
</Layout>
`;

exports[`NavigationLayout should render a NavigationLayout with provided menu text 1`] = `
<Layout
  header={
    <NavigationLayoutContent
      navigationLayoutRoutes={[]}
      navigationLayoutSize="medium"
    />
  }
  menu={null}
  menuText="TEST MENU TEXT"
>
  <NavigationLayoutContent
    navigationLayoutRoutes={[]}
    navigationLayoutSize="medium"
  />
</Layout>
`;

exports[`NavigationLayout should render a NavigationLayout without menu if location does not match config entry 1`] = `
<Layout
  header={
    <NavigationLayoutContent
      navigationLayoutRoutes={
        [
          {
            "componentClass": [Function],
            "componentProps": {
              "type": "header",
            },
            "parentPaths": [],
            "path": "/",
            "refuseRoutingStackNavigation": undefined,
          },
        ]
      }
      navigationLayoutSize="medium"
    />
  }
  menu={null}
>
  <NavigationLayoutContent
    navigationLayoutRoutes={
      [
        {
          "componentClass": [Function],
          "componentProps": {
            "type": "content",
          },
          "parentPaths": [],
          "path": "/",
          "refuseRoutingStackNavigation": undefined,
        },
      ]
    }
    navigationLayoutSize="medium"
    redirectPath="/"
  />
</Layout>
`;

exports[`NavigationLayout should render a default NavigationLayout 1`] = `
<Layout
  header={
    <NavigationLayoutContent
      navigationLayoutRoutes={[]}
      navigationLayoutSize="medium"
    />
  }
  menu={null}
>
  <NavigationLayoutContent
    navigationLayoutRoutes={[]}
    navigationLayoutSize="medium"
  />
</Layout>
`;
