// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ApplicationNavigation should render default element 1`] = `
<div
  className="application-navigation"
>
  <div
    aria-hidden={true}
    className="drawer-menu-container"
    style={
      Object {
        "display": "none",
      }
    }
  />
  <div
    className="content-layout"
  >
    <InjectIntl(Header)
      notifications={Object {}}
      onSelectNavigationItem={[Function]}
      onSelectSkipToContent={[Function]}
      onSelectUtilityButton={[Function]}
      utilityButtonPopupAnchorRef={
        Object {
          "current": undefined,
        }
      }
      utilityItems={Array []}
    />
    <main
      aria-labelledby={null}
      className="main-container"
      role="main"
      tabIndex="-1"
    />
    <Overlay
      backgroundStyle="clear"
      className="overlay"
      isOpen={false}
      isRelativeToContainer={true}
      isScrollable={false}
      onRequestClose={[Function]}
      rootSelector="#root"
      zIndex="6000"
    />
  </div>
  <Popup
    attachmentBehavior="push"
    boundingRef={null}
    classNameArrow={null}
    classNameContent={null}
    classNameOverlay={null}
    contentAttachment="top right"
    contentHeight="auto"
    contentWidth="320"
    isArrowDisplayed={true}
    isContentFocusDisabled={true}
    isHeaderDisabled={true}
    isOpen={false}
    onRequestClose={[Function]}
    popupContentRole="dialog"
    targetAttachment="bottom center"
    targetRef={[Function]}
  >
    <InjectIntl(UtilityMenu)
      utilityItems={Array []}
    />
  </Popup>
</div>
`;

exports[`ApplicationNavigation should render with prop data at large breakpoint 1`] = `
<div
  className="application-navigation"
>
  <div
    aria-hidden={true}
    className="drawer-menu-container"
    style={
      Object {
        "display": "none",
      }
    }
  />
  <div
    className="content-layout"
  >
    <InjectIntl(Header)
      activeBreakpoint="large"
      activeNavigationItemKey="my-test-key"
      extensionItems={
        Array [
          Object {
            "icon": <span>
              my icon
            </span>,
            "key": "my-test-key-1",
            "text": "test-text-1",
          },
        ]
      }
      hero={
        <div>
          my test hero
        </div>
      }
      navigationItems={
        Array [
          Object {
            "key": "my-test-key",
            "text": "test-text",
          },
        ]
      }
      navigationRenderFunction={[MockFunction]}
      notifications={
        Object {
          "my-test-key-1": 3,
        }
      }
      onSelectExtensionItem={[MockFunction]}
      onSelectHelp={[MockFunction]}
      onSelectLogout={[MockFunction]}
      onSelectNavigationItem={[Function]}
      onSelectSettings={[MockFunction]}
      onSelectSkipToContent={[Function]}
      onSelectUtilityButton={[Function]}
      titleConfig={
        Object {
          "title": "test-title",
        }
      }
      userConfig={
        Object {
          "detail": "user-detail",
          "imageSrc": "user-src",
          "initials": "user-initials",
          "name": "user-name",
        }
      }
      utilityButtonPopupAnchorRef={
        Object {
          "current": undefined,
        }
      }
      utilityItems={
        Array [
          Object {
            "icon": <span>
              my icon
            </span>,
            "key": "my-test-key-2",
            "text": "test-text-2",
          },
        ]
      }
    />
    <main
      aria-labelledby="main-inner-title"
      className="main-container"
      role="main"
      tabIndex="-1"
    >
      <VisuallyHiddenText
        aria-hidden={true}
        id="main-inner-title"
        text="test-text"
      />
      <div>
        test child content
      </div>
    </main>
    <Overlay
      backgroundStyle="clear"
      className="overlay"
      isOpen={false}
      isRelativeToContainer={true}
      isScrollable={false}
      onRequestClose={[Function]}
      rootSelector="#root"
      zIndex="6000"
    />
  </div>
  <Popup
    attachmentBehavior="push"
    boundingRef={null}
    classNameArrow={null}
    classNameContent={null}
    classNameOverlay={null}
    contentAttachment="top right"
    contentHeight="auto"
    contentWidth="320"
    isArrowDisplayed={true}
    isContentFocusDisabled={true}
    isHeaderDisabled={true}
    isOpen={false}
    onRequestClose={[Function]}
    popupContentRole="dialog"
    targetAttachment="bottom center"
    targetRef={[Function]}
  >
    <InjectIntl(UtilityMenu)
      hero={
        <div>
          my test hero
        </div>
      }
      onSelectHelp={[Function]}
      onSelectLogout={[Function]}
      onSelectSettings={[Function]}
      onSelectUtilityItem={[Function]}
      userConfig={
        Object {
          "detail": "user-detail",
          "imageSrc": "user-src",
          "initials": "user-initials",
          "name": "user-name",
        }
      }
      utilityItems={
        Array [
          Object {
            "icon": <span>
              my icon
            </span>,
            "key": "my-test-key-2",
            "text": "test-text-2",
          },
        ]
      }
    />
  </Popup>
</div>
`;

exports[`ApplicationNavigation should render with prop data at medium breakpoint 1`] = `
<div
  className="application-navigation"
>
  <div
    aria-hidden={true}
    className="drawer-menu-container"
    style={
      Object {
        "display": "none",
      }
    }
  >
    <FocusTrap
      _createFocusTrap={[Function]}
      active={false}
      className="drawer-menu-focus-trap-container"
      focusTrapOptions={
        Object {
          "clickOutsideDeactivates": true,
          "escapeDeactivates": true,
          "returnFocusOnDeactivate": false,
        }
      }
      paused={false}
    >
      <InjectIntl(DrawerMenu)
        activeNavigationItemKey="my-test-key"
        hero={
          <div>
            my test hero
          </div>
        }
        navigationItems={
          Array [
            Object {
              "key": "my-test-key",
              "text": "test-text",
            },
          ]
        }
        notifications={
          Object {
            "my-test-key-1": 3,
          }
        }
        onSelectHelp={[Function]}
        onSelectLogout={[Function]}
        onSelectNavigationItem={[Function]}
        onSelectSettings={[Function]}
        onSelectUtilityItem={[Function]}
        titleConfig={
          Object {
            "title": "test-title",
          }
        }
        userConfig={
          Object {
            "detail": "user-detail",
            "imageSrc": "user-src",
            "initials": "user-initials",
            "name": "user-name",
          }
        }
        utilityItems={
          Array [
            Object {
              "icon": <span>
                my icon
              </span>,
              "key": "my-test-key-2",
              "text": "test-text-2",
            },
          ]
        }
      />
    </FocusTrap>
  </div>
  <div
    className="content-layout"
  >
    <InjectIntl(CompactHeader)
      activeBreakpoint="medium"
      activeNavigationItemKey="my-test-key"
      extensionItems={
        Array [
          Object {
            "icon": <span>
              my icon
            </span>,
            "key": "my-test-key-1",
            "text": "test-text-1",
          },
        ]
      }
      hero={
        <div>
          my test hero
        </div>
      }
      isDrawerMenuOpen={false}
      navigationItems={
        Array [
          Object {
            "key": "my-test-key",
            "text": "test-text",
          },
        ]
      }
      notifications={
        Object {
          "my-test-key-1": 3,
        }
      }
      onSelectExtensionItem={[MockFunction]}
      onSelectHelp={[MockFunction]}
      onSelectLogout={[MockFunction]}
      onSelectMenuButton={[Function]}
      onSelectNavigationItem={[Function]}
      onSelectSettings={[MockFunction]}
      onSelectSkipToContent={[Function]}
      onSelectUtilityItem={[MockFunction]}
      titleConfig={
        Object {
          "title": "test-title",
        }
      }
      userConfig={
        Object {
          "detail": "user-detail",
          "imageSrc": "user-src",
          "initials": "user-initials",
          "name": "user-name",
        }
      }
      utilityItems={
        Array [
          Object {
            "icon": <span>
              my icon
            </span>,
            "key": "my-test-key-2",
            "text": "test-text-2",
          },
        ]
      }
    />
    <main
      aria-labelledby="main-inner-title"
      className="main-container"
      role="main"
      tabIndex="-1"
    >
      <VisuallyHiddenText
        aria-hidden={true}
        id="main-inner-title"
        text="test-text"
      />
      <div>
        test child content
      </div>
    </main>
    <Overlay
      backgroundStyle="clear"
      className="overlay"
      isOpen={false}
      isRelativeToContainer={true}
      isScrollable={false}
      onRequestClose={[Function]}
      rootSelector="#root"
      zIndex="6000"
    />
  </div>
  <Popup
    attachmentBehavior="push"
    boundingRef={null}
    classNameArrow={null}
    classNameContent={null}
    classNameOverlay={null}
    contentAttachment="top right"
    contentHeight="auto"
    contentWidth="320"
    isArrowDisplayed={true}
    isContentFocusDisabled={true}
    isHeaderDisabled={true}
    isOpen={false}
    onRequestClose={[Function]}
    popupContentRole="dialog"
    targetAttachment="bottom center"
    targetRef={[Function]}
  >
    <InjectIntl(UtilityMenu)
      hero={
        <div>
          my test hero
        </div>
      }
      onSelectHelp={[Function]}
      onSelectLogout={[Function]}
      onSelectSettings={[Function]}
      onSelectUtilityItem={[Function]}
      userConfig={
        Object {
          "detail": "user-detail",
          "imageSrc": "user-src",
          "initials": "user-initials",
          "name": "user-name",
        }
      }
      utilityItems={
        Array [
          Object {
            "icon": <span>
              my icon
            </span>,
            "key": "my-test-key-2",
            "text": "test-text-2",
          },
        ]
      }
    />
  </Popup>
</div>
`;
