// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header should render default element 1`] = `
<InjectIntl(Header)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <Header
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    utilityItems={Array []}
  >
    <header
      className="header"
      role="banner"
    >
      <button
        className="skip-content-button"
        role="link"
        type="button"
      >
        Terra.applicationNavigation.header.skipToContentTitle
      </button>
      <div
        className="title-container"
      />
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)>
          <Tabs
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={Array []}
            notifications={Object {}}
          >
            <Tab
              aria-hidden="true"
              isPlaceholder={true}
              tabKey=""
              text="W"
            >
              <div
                aria-hidden={true}
                aria-label="W"
                className="tab is-placeholder"
                data-focus-styles-enabled={true}
                onBlur={[Function]}
                onMouseDown={[Function]}
                role="link"
                tabIndex="0"
                type="button"
              >
                <div
                  aria-hidden={true}
                  className="tab-inner"
                >
                  <span
                    aria-hidden={true}
                    className="tab-label"
                  >
                    W
                  </span>
                </div>
              </div>
            </Tab>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      />
    </header>
  </Header>
</InjectIntl(Header)>
`;

exports[`Header should render title element 1`] = `
<InjectIntl(Header)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  titleConfig={
    Object {
      "element": <img
        alt="test"
        id="test-image"
      />,
      "title": "test-title",
    }
  }
>
  <Header
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    titleConfig={
      Object {
        "element": <img
          alt="test"
          id="test-image"
        />,
        "title": "test-title",
      }
    }
    utilityItems={Array []}
  >
    <header
      className="header"
      role="banner"
    >
      <button
        className="skip-content-button"
        role="link"
        type="button"
      >
        Terra.applicationNavigation.header.skipToContentTitle
      </button>
      <div
        className="title-container"
      >
        <div
          className="title-element"
          title="test-title"
        >
          <img
            alt="test"
            id="test-image"
          />
        </div>
      </div>
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)>
          <Tabs
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={Array []}
            notifications={Object {}}
          >
            <Tab
              aria-hidden="true"
              isPlaceholder={true}
              tabKey=""
              text="W"
            >
              <div
                aria-hidden={true}
                aria-label="W"
                className="tab is-placeholder"
                data-focus-styles-enabled={true}
                onBlur={[Function]}
                onMouseDown={[Function]}
                role="link"
                tabIndex="0"
                type="button"
              >
                <div
                  aria-hidden={true}
                  className="tab-inner"
                >
                  <span
                    aria-hidden={true}
                    className="tab-label"
                  >
                    W
                  </span>
                </div>
              </div>
            </Tab>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      />
    </header>
  </Header>
</InjectIntl(Header)>
`;

exports[`Header should render with function callbacks 1`] = `
<InjectIntl(Header)
  activeNavigationItemKey="test-text"
  extensionItems={
    Array [
      Object {
        "icon": <span>
          my icon
        </span>,
        "key": "my-test-key-1",
        "text": "test-text-1",
      },
    ]
  }
  hero={
    <div>
      my test hero
    </div>
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  navigationItems={
    Array [
      Object {
        "key": "my-test-key",
        "text": "test-text",
      },
    ]
  }
  navigationRenderFunction={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "hasCount": false,
            "isActive": false,
            "notificationCount": 0,
            "text": "test-text",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  notifications={
    Object {
      "my-test-key-1": 3,
    }
  }
  onSelectExtensionItem={[MockFunction]}
  onSelectNavigationItem={[MockFunction]}
  onSelectUtilityButton={[MockFunction]}
  titleConfig={
    Object {
      "title": "test-title",
    }
  }
  userConfig={
    Object {
      "detail": "user-detail",
      "imageSrc": "user-src",
      "initials": "user-initials",
      "name": "user-name",
    }
  }
  utilityButtonPopupAnchorRef={
    Object {
      "current": <span
        class="popup-anchor"
      />,
    }
  }
>
  <Header
    activeNavigationItemKey="test-text"
    extensionItems={
      Array [
        Object {
          "icon": <span>
            my icon
          </span>,
          "key": "my-test-key-1",
          "text": "test-text-1",
        },
      ]
    }
    hero={
      <div>
        my test hero
      </div>
    }
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    navigationItems={
      Array [
        Object {
          "key": "my-test-key",
          "text": "test-text",
        },
      ]
    }
    navigationRenderFunction={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "hasCount": false,
              "isActive": false,
              "notificationCount": 0,
              "text": "test-text",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    notifications={
      Object {
        "my-test-key-1": 3,
      }
    }
    onSelectExtensionItem={[MockFunction]}
    onSelectNavigationItem={[MockFunction]}
    onSelectUtilityButton={[MockFunction]}
    titleConfig={
      Object {
        "title": "test-title",
      }
    }
    userConfig={
      Object {
        "detail": "user-detail",
        "imageSrc": "user-src",
        "initials": "user-initials",
        "name": "user-name",
      }
    }
    utilityButtonPopupAnchorRef={
      Object {
        "current": <span
          class="popup-anchor"
        />,
      }
    }
    utilityItems={Array []}
  >
    <header
      className="header"
      role="banner"
    >
      <button
        className="skip-content-button"
        role="link"
        type="button"
      >
        Terra.applicationNavigation.header.skipToContentTitle
      </button>
      <div
        className="title-container"
      >
        <div
          className="title"
          title="test-title"
        >
          test-title
        </div>
      </div>
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)
          activeTabKey="test-text"
          navigationItems={
            Array [
              Object {
                "key": "my-test-key",
                "text": "test-text",
              },
            ]
          }
          navigationRenderFunction={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "hasCount": false,
                    "isActive": false,
                    "notificationCount": 0,
                    "text": "test-text",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          notifications={
            Object {
              "my-test-key-1": 3,
            }
          }
          onTabSelect={[MockFunction]}
        >
          <Tabs
            activeTabKey="test-text"
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={
              Array [
                Object {
                  "key": "my-test-key",
                  "text": "test-text",
                },
              ]
            }
            navigationRenderFunction={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "hasCount": false,
                      "isActive": false,
                      "notificationCount": 0,
                      "text": "test-text",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            notifications={
              Object {
                "my-test-key-1": 3,
              }
            }
            onTabSelect={[MockFunction]}
          >
            <nav
              className="tabs-container is-calculating"
            >
              <Tab
                hasCount={false}
                isActive={false}
                key="my-test-key"
                notificationCount={0}
                onTabSelect={[Function]}
                render={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "hasCount": false,
                          "isActive": false,
                          "notificationCount": 0,
                          "text": "test-text",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  }
                }
                tabRef={
                  Object {
                    "current": <div
                      aria-current="false"
                      aria-label="test-text"
                      class="tab"
                      data-focus-styles-enabled="true"
                      role="link"
                      tabindex="0"
                      type="button"
                    />,
                  }
                }
                text="test-text"
              >
                <div
                  aria-current={false}
                  aria-label="test-text"
                  className="tab"
                  data-focus-styles-enabled={true}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  role="link"
                  tabIndex="0"
                  type="button"
                />
              </Tab>
              <InjectIntl(TabRollup)
                data-application-tabs-more={true}
                hasChildNotifications={false}
                hasCount={false}
                innerRef={
                  Object {
                    "current": <div
                      class="tab-rollup-label"
                      id="terra-navigation-link-Terra.applicationNavigation.tabs.rollupButtonTitle"
                    >
                      <span
                        class="tab-rollup-text"
                      >
                        Terra.applicationNavigation.tabs.rollupButtonTitle
                      </span>
                      <svg
                        aria-hidden="true"
                        class="tui-Icon icon is-bidi tab-rollup-icon"
                        focusable="false"
                        height="1em"
                        viewBox="0 0 48 48"
                        width="1em"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M48 12L24 36 0 12h48z"
                        />
                      </svg>
                    </div>,
                  }
                }
                isPulsed={false}
                isSelected={false}
                onTabSelect={[Function]}
                tabRef={
                  Object {
                    "current": <div
                      aria-current="false"
                      aria-haspopup="true"
                      aria-label="Terra.applicationNavigation.tabs.rollupButtonDescription"
                      class="tab-rollup"
                      data-focus-styles-enabled="true"
                      role="button"
                      tabindex="0"
                      type="button"
                    >
                      <div
                        aria-hidden="true"
                        class="tab-inner"
                        data-tab-menu-inner="true"
                      >
                        <div
                          class="tab-rollup-label"
                          id="terra-navigation-link-Terra.applicationNavigation.tabs.rollupButtonTitle"
                        >
                          <span
                            class="tab-rollup-text"
                          >
                            Terra.applicationNavigation.tabs.rollupButtonTitle
                          </span>
                          <svg
                            aria-hidden="true"
                            class="tui-Icon icon is-bidi tab-rollup-icon"
                            focusable="false"
                            height="1em"
                            viewBox="0 0 48 48"
                            width="1em"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M48 12L24 36 0 12h48z"
                            />
                          </svg>
                        </div>
                      </div>
                    </div>,
                  }
                }
                text="Terra.applicationNavigation.tabs.rollupButtonTitle"
              >
                <TabRollup
                  data-application-tabs-more={true}
                  hasChildNotifications={false}
                  hasCount={false}
                  innerRef={
                    Object {
                      "current": <div
                        class="tab-rollup-label"
                        id="terra-navigation-link-Terra.applicationNavigation.tabs.rollupButtonTitle"
                      >
                        <span
                          class="tab-rollup-text"
                        >
                          Terra.applicationNavigation.tabs.rollupButtonTitle
                        </span>
                        <svg
                          aria-hidden="true"
                          class="tui-Icon icon is-bidi tab-rollup-icon"
                          focusable="false"
                          height="1em"
                          viewBox="0 0 48 48"
                          width="1em"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M48 12L24 36 0 12h48z"
                          />
                        </svg>
                      </div>,
                    }
                  }
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "formatDate": [Function],
                      "formatHTMLMessage": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatPlural": [Function],
                      "formatRelative": [Function],
                      "formatTime": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralFormat": [Function],
                        "getRelativeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": null,
                      "now": [Function],
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": null,
                    }
                  }
                  isPulsed={false}
                  isSelected={false}
                  onTabSelect={[Function]}
                  tabRef={
                    Object {
                      "current": <div
                        aria-current="false"
                        aria-haspopup="true"
                        aria-label="Terra.applicationNavigation.tabs.rollupButtonDescription"
                        class="tab-rollup"
                        data-focus-styles-enabled="true"
                        role="button"
                        tabindex="0"
                        type="button"
                      >
                        <div
                          aria-hidden="true"
                          class="tab-inner"
                          data-tab-menu-inner="true"
                        >
                          <div
                            class="tab-rollup-label"
                            id="terra-navigation-link-Terra.applicationNavigation.tabs.rollupButtonTitle"
                          >
                            <span
                              class="tab-rollup-text"
                            >
                              Terra.applicationNavigation.tabs.rollupButtonTitle
                            </span>
                            <svg
                              aria-hidden="true"
                              class="tui-Icon icon is-bidi tab-rollup-icon"
                              focusable="false"
                              height="1em"
                              viewBox="0 0 48 48"
                              width="1em"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M48 12L24 36 0 12h48z"
                              />
                            </svg>
                          </div>
                        </div>
                      </div>,
                    }
                  }
                  text="Terra.applicationNavigation.tabs.rollupButtonTitle"
                >
                  <div
                    aria-current={false}
                    aria-haspopup={true}
                    aria-label="Terra.applicationNavigation.tabs.rollupButtonDescription"
                    className="tab-rollup"
                    data-focus-styles-enabled={true}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    onMouseDown={[Function]}
                    role="button"
                    tabIndex="0"
                    type="button"
                  >
                    <div
                      aria-hidden={true}
                      className="tab-inner"
                      data-tab-menu-inner={true}
                    >
                      <div
                        className="tab-rollup-label"
                        id="terra-navigation-link-Terra.applicationNavigation.tabs.rollupButtonTitle"
                      >
                        <span
                          className="tab-rollup-text"
                        >
                          Terra.applicationNavigation.tabs.rollupButtonTitle
                        </span>
                        <IconCaretDown
                          className="tab-rollup-icon"
                          isBidi={true}
                          viewBox="0 0 48 48"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <IconBase
                            ariaLabel={null}
                            className="tab-rollup-icon"
                            focusable="false"
                            height="1em"
                            isBidi={true}
                            isSpin={false}
                            viewBox="0 0 48 48"
                            width="1em"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <svg
                              aria-hidden="true"
                              className="tui-Icon icon is-bidi tab-rollup-icon"
                              focusable="false"
                              height="1em"
                              viewBox="0 0 48 48"
                              width="1em"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M48 12L24 36 0 12h48z"
                              />
                            </svg>
                          </IconBase>
                        </IconCaretDown>
                      </div>
                    </div>
                  </div>
                </TabRollup>
              </InjectIntl(TabRollup)>
            </nav>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      >
        <InjectIntl(Extensions)
          extensionItems={
            Array [
              Object {
                "icon": <span>
                  my icon
                </span>,
                "key": "my-test-key-1",
                "text": "test-text-1",
              },
            ]
          }
          notifications={
            Object {
              "my-test-key-1": 3,
            }
          }
          onSelect={[MockFunction]}
        >
          <Extensions
            activeBreakpoint=""
            extensionItems={
              Array [
                Object {
                  "icon": <span>
                    my icon
                  </span>,
                  "key": "my-test-key-1",
                  "text": "test-text-1",
                },
              ]
            }
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            notifications={
              Object {
                "my-test-key-1": 3,
              }
            }
            onSelect={[MockFunction]}
          >
            <div
              className="extensions-row"
            >
              <Extension
                icon={
                  <span>
                    my icon
                  </span>
                }
                key="my-test-key-1"
                notificationCount={3}
                onSelect={[Function]}
                text="test-text-1"
              >
                <div
                  aria-label="test-text-1 3"
                  className="extension"
                  data-focus-styles-enabled={true}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  role="button"
                  tabIndex="0"
                >
                  <div
                    aria-hidden={true}
                    className="extension-inner"
                  >
                    <div
                      className="extension-image"
                      title="test-text-1"
                    >
                      <span>
                        my icon
                      </span>
                    </div>
                    <ExtensionCount
                      className="extension-count"
                      value={3}
                    >
                      <div
                        aria-label={3}
                        className="count extension-count"
                      >
                        3
                      </div>
                    </ExtensionCount>
                  </div>
                </div>
              </Extension>
            </div>
            <Popup
              attachmentBehavior="auto"
              boundingRef={null}
              classNameArrow={null}
              classNameContent={null}
              classNameOverlay={null}
              contentAttachment="top center"
              contentHeight="auto"
              contentWidth="320"
              isArrowDisplayed={true}
              isContentFocusDisabled={true}
              isHeaderDisabled={false}
              isOpen={false}
              onRequestClose={[Function]}
              popupContentRole="dialog"
              targetRef={[Function]}
            />
          </Extensions>
        </InjectIntl(Extensions)>
      </div>
      <div
        className="utilities-container"
      >
        <InjectIntl(UtilityMenuHeaderButton)
          onClick={[MockFunction]}
          popupAnchorRef={
            Object {
              "current": <span
                class="popup-anchor"
              />,
            }
          }
          userConfig={
            Object {
              "detail": "user-detail",
              "imageSrc": "user-src",
              "initials": "user-initials",
              "name": "user-name",
            }
          }
        >
          <UtilityMenuHeaderButton
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            onClick={[MockFunction]}
            popupAnchorRef={
              Object {
                "current": <span
                  class="popup-anchor"
                />,
              }
            }
            userConfig={
              Object {
                "detail": "user-detail",
                "imageSrc": "user-src",
                "initials": "user-initials",
                "name": "user-name",
              }
            }
          >
            <div
              aria-haspopup={true}
              aria-label="Terra.applicationNavigation.header.utilityButtonTitleUser"
              className="utility-button"
              data-application-header-utility={true}
              data-focus-styles-enabled={true}
              onBlur={[Function]}
              onClick={[MockFunction]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              role="button"
              tabIndex="0"
            >
              <div
                className="image"
              >
                <Avatar
                  alt="user-name"
                  className="avatar"
                  color="auto"
                  image="user-src"
                  initials="user-initials"
                  isAriaHidden={false}
                  isDeceased={false}
                >
                  <div
                    className="avatar three image avatar"
                  >
                    <Image
                      alt="user-name"
                      className="image"
                      fit="cover"
                      isFluid={false}
                      onError={[Function]}
                      placeholder={
                        <span
                          alt="user-name"
                          aria-hidden={false}
                          aria-label="user-name"
                          className="icon user"
                          role="img"
                        />
                      }
                      src="user-src"
                      variant="default"
                    >
                      <img
                        alt="user-name"
                        className="image cover default hidden image"
                        onError={[Function]}
                        onLoad={[Function]}
                        src="user-src"
                      />
                      <span
                        alt="user-name"
                        aria-hidden={false}
                        aria-label="user-name"
                        className="icon user"
                        role="img"
                      />
                    </Image>
                  </div>
                </Avatar>
              </div>
              <div
                className="title"
              >
                user-name
              </div>
              <IconCaretDown
                className="caret-icon"
                isBidi={true}
                viewBox="0 0 48 48"
                xmlns="http://www.w3.org/2000/svg"
              >
                <IconBase
                  ariaLabel={null}
                  className="caret-icon"
                  focusable="false"
                  height="1em"
                  isBidi={true}
                  isSpin={false}
                  viewBox="0 0 48 48"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden="true"
                    className="tui-Icon icon is-bidi caret-icon"
                    focusable="false"
                    height="1em"
                    viewBox="0 0 48 48"
                    width="1em"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M48 12L24 36 0 12h48z"
                    />
                  </svg>
                </IconBase>
              </IconCaretDown>
              <span
                className="popup-anchor"
              />
            </div>
          </UtilityMenuHeaderButton>
        </InjectIntl(UtilityMenuHeaderButton)>
      </div>
    </header>
  </Header>
</InjectIntl(Header)>
`;

exports[`Header should render with skip callback 1`] = `
<InjectIntl(Header)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onSelectSkipToContent={[MockFunction]}
>
  <Header
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    onSelectSkipToContent={[MockFunction]}
    utilityItems={Array []}
  >
    <header
      className="header"
      role="banner"
    >
      <button
        className="skip-content-button"
        onClick={[MockFunction]}
        role="link"
        type="button"
      >
        Terra.applicationNavigation.header.skipToContentTitle
      </button>
      <div
        className="title-container"
      />
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)>
          <Tabs
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={Array []}
            notifications={Object {}}
          >
            <Tab
              aria-hidden="true"
              isPlaceholder={true}
              tabKey=""
              text="W"
            >
              <div
                aria-hidden={true}
                aria-label="W"
                className="tab is-placeholder"
                data-focus-styles-enabled={true}
                onBlur={[Function]}
                onMouseDown={[Function]}
                role="link"
                tabIndex="0"
                type="button"
              >
                <div
                  aria-hidden={true}
                  className="tab-inner"
                >
                  <span
                    aria-hidden={true}
                    className="tab-label"
                  >
                    W
                  </span>
                </div>
              </div>
            </Tab>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      />
    </header>
  </Header>
</InjectIntl(Header)>
`;
