// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header should render default element 1`] = `
<InjectIntl(Header)
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <Header
    intl={
      {
        "defaultFormats": {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": {},
        "formatters": {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    utilityItems={[]}
  >
    <header
      className="header"
      role="banner"
    >
      <button
        className="skip-content-button"
        role="link"
        type="button"
      >
        Terra.applicationNavigation.header.skipToContentTitle
      </button>
      <div
        className="title-container"
      />
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)>
          <Tabs
            intl={
              {
                "defaultFormats": {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": {},
                "formatters": {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={[]}
            notifications={{}}
          >
            <Tab
              aria-hidden="true"
              isPlaceholder={true}
              tabKey=""
              text="W"
            >
              <div
                aria-hidden={true}
                aria-label="W"
                className="tab is-placeholder"
                data-focus-styles-enabled={true}
                onBlur={[Function]}
                onMouseDown={[Function]}
                role="link"
                tabIndex="0"
                type="button"
              >
                <div
                  aria-hidden={true}
                  className="tab-inner"
                >
                  <span
                    aria-hidden={true}
                    className="tab-label"
                  >
                    W
                  </span>
                </div>
              </div>
            </Tab>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      />
    </header>
  </Header>
</InjectIntl(Header)>
`;

exports[`Header should render title element 1`] = `
<InjectIntl(Header)
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  titleConfig={
    {
      "element": <img
        alt="test"
        id="test-image"
      />,
      "title": "test-title",
    }
  }
>
  <Header
    intl={
      {
        "defaultFormats": {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": {},
        "formatters": {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    titleConfig={
      {
        "element": <img
          alt="test"
          id="test-image"
        />,
        "title": "test-title",
      }
    }
    utilityItems={[]}
  >
    <header
      className="header"
      role="banner"
    >
      <button
        className="skip-content-button"
        role="link"
        type="button"
      >
        Terra.applicationNavigation.header.skipToContentTitle
      </button>
      <div
        className="title-container"
      >
        <div
          className="title-element"
          title="test-title"
        >
          <img
            alt="test"
            id="test-image"
          />
        </div>
      </div>
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)>
          <Tabs
            intl={
              {
                "defaultFormats": {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": {},
                "formatters": {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={[]}
            notifications={{}}
          >
            <Tab
              aria-hidden="true"
              isPlaceholder={true}
              tabKey=""
              text="W"
            >
              <div
                aria-hidden={true}
                aria-label="W"
                className="tab is-placeholder"
                data-focus-styles-enabled={true}
                onBlur={[Function]}
                onMouseDown={[Function]}
                role="link"
                tabIndex="0"
                type="button"
              >
                <div
                  aria-hidden={true}
                  className="tab-inner"
                >
                  <span
                    aria-hidden={true}
                    className="tab-label"
                  >
                    W
                  </span>
                </div>
              </div>
            </Tab>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      />
    </header>
  </Header>
</InjectIntl(Header)>
`;

exports[`Header should render with function callbacks 1`] = `
<InjectIntl(Header)
  activeNavigationItemKey="test-text"
  extensionItems={
    [
      {
        "icon": <span>
          my icon
        </span>,
        "key": "my-test-key-1",
        "text": "test-text-1",
      },
    ]
  }
  hero={
    <div>
      my test hero
    </div>
  }
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  navigationItems={
    [
      {
        "key": "my-test-key",
        "text": "test-text",
      },
    ]
  }
  navigationRenderFunction={
    [MockFunction] {
      "calls": [
        [
          {
            "hasCount": true,
            "isActive": false,
            "notificationCount": undefined,
            "text": "test-text",
          },
        ],
        [
          {
            "hasCount": true,
            "isActive": false,
            "notificationCount": undefined,
            "text": "test-text",
          },
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  notifications={
    {
      "my-test-key-1": 3,
    }
  }
  onSelectExtensionItem={[MockFunction]}
  onSelectNavigationItem={[MockFunction]}
  onSelectUtilityButton={[MockFunction]}
  titleConfig={
    {
      "title": "test-title",
    }
  }
  userConfig={
    {
      "detail": "user-detail",
      "imageSrc": "user-src",
      "initials": "user-initials",
      "name": "user-name",
    }
  }
  utilityButtonPopupAnchorRef={
    {
      "current": <span
        class="popup-anchor"
      />,
    }
  }
>
  <Header
    activeNavigationItemKey="test-text"
    extensionItems={
      [
        {
          "icon": <span>
            my icon
          </span>,
          "key": "my-test-key-1",
          "text": "test-text-1",
        },
      ]
    }
    hero={
      <div>
        my test hero
      </div>
    }
    intl={
      {
        "defaultFormats": {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": {},
        "formatters": {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    navigationItems={
      [
        {
          "key": "my-test-key",
          "text": "test-text",
        },
      ]
    }
    navigationRenderFunction={
      [MockFunction] {
        "calls": [
          [
            {
              "hasCount": true,
              "isActive": false,
              "notificationCount": undefined,
              "text": "test-text",
            },
          ],
          [
            {
              "hasCount": true,
              "isActive": false,
              "notificationCount": undefined,
              "text": "test-text",
            },
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": undefined,
          },
          {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    notifications={
      {
        "my-test-key-1": 3,
      }
    }
    onSelectExtensionItem={[MockFunction]}
    onSelectNavigationItem={[MockFunction]}
    onSelectUtilityButton={[MockFunction]}
    titleConfig={
      {
        "title": "test-title",
      }
    }
    userConfig={
      {
        "detail": "user-detail",
        "imageSrc": "user-src",
        "initials": "user-initials",
        "name": "user-name",
      }
    }
    utilityButtonPopupAnchorRef={
      {
        "current": <span
          class="popup-anchor"
        />,
      }
    }
    utilityItems={[]}
  >
    <header
      className="header"
      role="banner"
    >
      <button
        className="skip-content-button"
        role="link"
        type="button"
      >
        Terra.applicationNavigation.header.skipToContentTitle
      </button>
      <div
        className="title-container"
      >
        <div
          className="title"
          title="test-title"
        >
          test-title
        </div>
      </div>
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)
          activeTabKey="test-text"
          navigationItems={
            [
              {
                "key": "my-test-key",
                "text": "test-text",
              },
            ]
          }
          navigationRenderFunction={
            [MockFunction] {
              "calls": [
                [
                  {
                    "hasCount": true,
                    "isActive": false,
                    "notificationCount": undefined,
                    "text": "test-text",
                  },
                ],
                [
                  {
                    "hasCount": true,
                    "isActive": false,
                    "notificationCount": undefined,
                    "text": "test-text",
                  },
                ],
              ],
              "results": [
                {
                  "type": "return",
                  "value": undefined,
                },
                {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          notifications={
            {
              "my-test-key-1": 3,
            }
          }
          onTabSelect={[MockFunction]}
        >
          <Tabs
            activeTabKey="test-text"
            intl={
              {
                "defaultFormats": {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": {},
                "formatters": {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={
              [
                {
                  "key": "my-test-key",
                  "text": "test-text",
                },
              ]
            }
            navigationRenderFunction={
              [MockFunction] {
                "calls": [
                  [
                    {
                      "hasCount": true,
                      "isActive": false,
                      "notificationCount": undefined,
                      "text": "test-text",
                    },
                  ],
                  [
                    {
                      "hasCount": true,
                      "isActive": false,
                      "notificationCount": undefined,
                      "text": "test-text",
                    },
                  ],
                ],
                "results": [
                  {
                    "type": "return",
                    "value": undefined,
                  },
                  {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            notifications={
              {
                "my-test-key-1": 3,
              }
            }
            onTabSelect={[MockFunction]}
          >
            <nav
              className="tabs-container is-calculating"
            >
              <Tab
                hasCount={true}
                isActive={false}
                key="my-test-key"
                onTabSelect={[Function]}
                render={
                  [MockFunction] {
                    "calls": [
                      [
                        {
                          "hasCount": true,
                          "isActive": false,
                          "notificationCount": undefined,
                          "text": "test-text",
                        },
                      ],
                      [
                        {
                          "hasCount": true,
                          "isActive": false,
                          "notificationCount": undefined,
                          "text": "test-text",
                        },
                      ],
                    ],
                    "results": [
                      {
                        "type": "return",
                        "value": undefined,
                      },
                      {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  }
                }
                tabRef={
                  {
                    "current": <div
                      aria-current="false"
                      aria-label="test-text"
                      class="tab"
                      data-focus-styles-enabled="true"
                      role="link"
                      tabindex="0"
                      type="button"
                    />,
                  }
                }
                text="test-text"
              >
                <div
                  aria-current={false}
                  aria-label="test-text"
                  className="tab"
                  data-focus-styles-enabled={true}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  role="link"
                  tabIndex="0"
                  type="button"
                />
              </Tab>
            </nav>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      >
        <InjectIntl(Extensions)
          extensionItems={
            [
              {
                "icon": <span>
                  my icon
                </span>,
                "key": "my-test-key-1",
                "text": "test-text-1",
              },
            ]
          }
          notifications={
            {
              "my-test-key-1": 3,
            }
          }
          onSelect={[MockFunction]}
        >
          <Extensions
            activeBreakpoint=""
            extensionItems={
              [
                {
                  "icon": <span>
                    my icon
                  </span>,
                  "key": "my-test-key-1",
                  "text": "test-text-1",
                },
              ]
            }
            intl={
              {
                "defaultFormats": {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": {},
                "formatters": {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            notifications={
              {
                "my-test-key-1": 3,
              }
            }
            onSelect={[MockFunction]}
          >
            <div
              className="extensions-row"
            >
              <Extension
                icon={
                  <span>
                    my icon
                  </span>
                }
                key="my-test-key-1"
                notificationCount={3}
                onSelect={[Function]}
                text="test-text-1"
              >
                <div
                  aria-label="test-text-1 3"
                  className="extension"
                  data-focus-styles-enabled={true}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  role="button"
                  tabIndex="0"
                >
                  <div
                    aria-hidden={true}
                    className="extension-inner"
                  >
                    <div
                      className="extension-image"
                      title="test-text-1"
                    >
                      <span>
                        my icon
                      </span>
                    </div>
                    <ExtensionCount
                      className="extension-count"
                      value={3}
                    >
                      <div
                        aria-label={3}
                        className="count extension-count"
                      >
                        3
                      </div>
                    </ExtensionCount>
                  </div>
                </div>
              </Extension>
            </div>
            <Popup
              attachmentBehavior="auto"
              boundingRef={null}
              classNameArrow={null}
              classNameContent={null}
              classNameOverlay={null}
              contentAttachment="top center"
              contentHeight="auto"
              contentWidth="320"
              isArrowDisplayed={true}
              isContentFocusDisabled={true}
              isHeaderDisabled={false}
              isMenu={false}
              isOpen={false}
              onRequestClose={[Function]}
              popupContentRole="dialog"
              targetRef={[Function]}
            />
          </Extensions>
        </InjectIntl(Extensions)>
      </div>
      <div
        className="utilities-container"
      >
        <InjectIntl(UtilityMenuHeaderButton)
          onClick={[MockFunction]}
          popupAnchorRef={
            {
              "current": <span
                class="popup-anchor"
              />,
            }
          }
          userConfig={
            {
              "detail": "user-detail",
              "imageSrc": "user-src",
              "initials": "user-initials",
              "name": "user-name",
            }
          }
        >
          <UtilityMenuHeaderButton
            intl={
              {
                "defaultFormats": {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": {},
                "formatters": {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            onClick={[MockFunction]}
            popupAnchorRef={
              {
                "current": <span
                  class="popup-anchor"
                />,
              }
            }
            userConfig={
              {
                "detail": "user-detail",
                "imageSrc": "user-src",
                "initials": "user-initials",
                "name": "user-name",
              }
            }
          >
            <div
              aria-haspopup={true}
              aria-label="Terra.applicationNavigation.header.utilityButtonTitleUser"
              className="utility-button"
              data-application-header-utility={true}
              data-focus-styles-enabled={true}
              onBlur={[Function]}
              onClick={[MockFunction]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              role="button"
              tabIndex="0"
            >
              <div
                className="image"
              >
                <InjectIntl(Avatar)
                  alt="user-name"
                  className="avatar"
                  image="user-src"
                  initials="user-initials"
                  isAriaHidden={true}
                >
                  <Avatar
                    alt="user-name"
                    className="avatar"
                    color="auto"
                    image="user-src"
                    initials="user-initials"
                    intl={
                      {
                        "defaultFormats": {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatHTMLMessage": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatPlural": [Function],
                        "formatRelative": [Function],
                        "formatTime": [Function],
                        "formats": {},
                        "formatters": {
                          "getDateTimeFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralFormat": [Function],
                          "getRelativeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": null,
                        "now": [Function],
                        "onError": [Function],
                        "textComponent": "span",
                        "timeZone": null,
                      }
                    }
                    isAriaHidden={true}
                    isDeceased={false}
                  >
                    <div
                      className="avatar three image avatar"
                    >
                      <Image
                        alt="user-name"
                        className="image"
                        fit="cover"
                        isFluid={false}
                        onError={[Function]}
                        placeholder={
                          <span
                            alt="user-name"
                            aria-hidden={true}
                            aria-label="user-name"
                            className="initials"
                            role="img"
                          >
                            US
                          </span>
                        }
                        src="user-src"
                        variant="default"
                      >
                        <img
                          alt="user-name"
                          className="image cover default hidden image"
                          onError={[Function]}
                          onLoad={[Function]}
                          src="user-src"
                        />
                        <span
                          alt="user-name"
                          aria-hidden={true}
                          aria-label="user-name"
                          className="initials"
                          role="img"
                        >
                          US
                        </span>
                      </Image>
                    </div>
                  </Avatar>
                </InjectIntl(Avatar)>
              </div>
              <div
                className="title"
              >
                user-name
              </div>
              <IconCaretDown
                className="caret-icon"
                viewBox="0 0 48 48"
                xmlns="http://www.w3.org/2000/svg"
              >
                <IconBase
                  className="caret-icon"
                  focusable="false"
                  height="1em"
                  isBidi={false}
                  isSpin={false}
                  viewBox="0 0 48 48"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    className="tui-Icon icon caret-icon"
                    focusable="false"
                    height="1em"
                    role="presentation"
                    viewBox="0 0 48 48"
                    width="1em"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M48 12 24 36 0 12h48z"
                    />
                  </svg>
                </IconBase>
              </IconCaretDown>
              <span
                className="popup-anchor"
              />
            </div>
          </UtilityMenuHeaderButton>
        </InjectIntl(UtilityMenuHeaderButton)>
      </div>
    </header>
  </Header>
</InjectIntl(Header)>
`;

exports[`Header should render with navigation and extension item ids 1`] = `
<InjectIntl(Header)
  activeNavigationItemKey="test-text"
  extensionItems={
    [
      {
        "icon": <span>
          my icon
        </span>,
        "key": "my-test-key-1",
        "text": "test-text-1",
      },
    ]
  }
  hero={
    <div>
      my test hero
    </div>
  }
  id="test-application"
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  navigationItems={
    [
      {
        "key": "my-test-key",
        "text": "test-text",
      },
    ]
  }
  navigationRenderFunction={
    [MockFunction] {
      "calls": [
        [
          {
            "hasCount": true,
            "isActive": false,
            "notificationCount": undefined,
            "text": "test-text",
          },
        ],
        [
          {
            "hasCount": true,
            "isActive": false,
            "notificationCount": undefined,
            "text": "test-text",
          },
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  notifications={
    {
      "my-test-key-1": 3,
    }
  }
  onSelectExtensionItem={[MockFunction]}
  onSelectNavigationItem={[MockFunction]}
  onSelectUtilityButton={[MockFunction]}
  titleConfig={
    {
      "title": "test-title",
    }
  }
  userConfig={
    {
      "detail": "user-detail",
      "imageSrc": "user-src",
      "initials": "user-initials",
      "name": "user-name",
    }
  }
  utilityButtonPopupAnchorRef={
    {
      "current": <span
        class="popup-anchor"
      />,
    }
  }
>
  <Header
    activeNavigationItemKey="test-text"
    extensionItems={
      [
        {
          "icon": <span>
            my icon
          </span>,
          "key": "my-test-key-1",
          "text": "test-text-1",
        },
      ]
    }
    hero={
      <div>
        my test hero
      </div>
    }
    id="test-application"
    intl={
      {
        "defaultFormats": {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": {},
        "formatters": {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    navigationItems={
      [
        {
          "key": "my-test-key",
          "text": "test-text",
        },
      ]
    }
    navigationRenderFunction={
      [MockFunction] {
        "calls": [
          [
            {
              "hasCount": true,
              "isActive": false,
              "notificationCount": undefined,
              "text": "test-text",
            },
          ],
          [
            {
              "hasCount": true,
              "isActive": false,
              "notificationCount": undefined,
              "text": "test-text",
            },
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": undefined,
          },
          {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    notifications={
      {
        "my-test-key-1": 3,
      }
    }
    onSelectExtensionItem={[MockFunction]}
    onSelectNavigationItem={[MockFunction]}
    onSelectUtilityButton={[MockFunction]}
    titleConfig={
      {
        "title": "test-title",
      }
    }
    userConfig={
      {
        "detail": "user-detail",
        "imageSrc": "user-src",
        "initials": "user-initials",
        "name": "user-name",
      }
    }
    utilityButtonPopupAnchorRef={
      {
        "current": <span
          class="popup-anchor"
        />,
      }
    }
    utilityItems={[]}
  >
    <header
      className="header"
      role="banner"
    >
      <button
        className="skip-content-button"
        role="link"
        type="button"
      >
        Terra.applicationNavigation.header.skipToContentTitle
      </button>
      <div
        className="title-container"
      >
        <div
          className="title"
          title="test-title"
        >
          test-title
        </div>
      </div>
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)
          activeTabKey="test-text"
          id="test-application"
          navigationItems={
            [
              {
                "key": "my-test-key",
                "text": "test-text",
              },
            ]
          }
          navigationRenderFunction={
            [MockFunction] {
              "calls": [
                [
                  {
                    "hasCount": true,
                    "isActive": false,
                    "notificationCount": undefined,
                    "text": "test-text",
                  },
                ],
                [
                  {
                    "hasCount": true,
                    "isActive": false,
                    "notificationCount": undefined,
                    "text": "test-text",
                  },
                ],
              ],
              "results": [
                {
                  "type": "return",
                  "value": undefined,
                },
                {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          notifications={
            {
              "my-test-key-1": 3,
            }
          }
          onTabSelect={[MockFunction]}
        >
          <Tabs
            activeTabKey="test-text"
            id="test-application"
            intl={
              {
                "defaultFormats": {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": {},
                "formatters": {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={
              [
                {
                  "key": "my-test-key",
                  "text": "test-text",
                },
              ]
            }
            navigationRenderFunction={
              [MockFunction] {
                "calls": [
                  [
                    {
                      "hasCount": true,
                      "isActive": false,
                      "notificationCount": undefined,
                      "text": "test-text",
                    },
                  ],
                  [
                    {
                      "hasCount": true,
                      "isActive": false,
                      "notificationCount": undefined,
                      "text": "test-text",
                    },
                  ],
                ],
                "results": [
                  {
                    "type": "return",
                    "value": undefined,
                  },
                  {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            notifications={
              {
                "my-test-key-1": 3,
              }
            }
            onTabSelect={[MockFunction]}
          >
            <nav
              className="tabs-container is-calculating"
            >
              <Tab
                hasCount={true}
                id="test-application-NavigationItem-my-test-key"
                isActive={false}
                key="my-test-key"
                onTabSelect={[Function]}
                render={
                  [MockFunction] {
                    "calls": [
                      [
                        {
                          "hasCount": true,
                          "isActive": false,
                          "notificationCount": undefined,
                          "text": "test-text",
                        },
                      ],
                      [
                        {
                          "hasCount": true,
                          "isActive": false,
                          "notificationCount": undefined,
                          "text": "test-text",
                        },
                      ],
                    ],
                    "results": [
                      {
                        "type": "return",
                        "value": undefined,
                      },
                      {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  }
                }
                tabRef={
                  {
                    "current": <div
                      aria-current="false"
                      aria-label="test-text"
                      class="tab"
                      data-focus-styles-enabled="true"
                      role="link"
                      tabindex="0"
                      type="button"
                    />,
                  }
                }
                text="test-text"
              >
                <div
                  aria-current={false}
                  aria-label="test-text"
                  className="tab"
                  data-focus-styles-enabled={true}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  role="link"
                  tabIndex="0"
                  type="button"
                />
              </Tab>
            </nav>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      >
        <InjectIntl(Extensions)
          extensionItems={
            [
              {
                "icon": <span>
                  my icon
                </span>,
                "key": "my-test-key-1",
                "text": "test-text-1",
              },
            ]
          }
          id="test-application"
          notifications={
            {
              "my-test-key-1": 3,
            }
          }
          onSelect={[MockFunction]}
        >
          <Extensions
            activeBreakpoint=""
            extensionItems={
              [
                {
                  "icon": <span>
                    my icon
                  </span>,
                  "key": "my-test-key-1",
                  "text": "test-text-1",
                },
              ]
            }
            id="test-application"
            intl={
              {
                "defaultFormats": {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": {},
                "formatters": {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            notifications={
              {
                "my-test-key-1": 3,
              }
            }
            onSelect={[MockFunction]}
          >
            <div
              className="extensions-row"
            >
              <Extension
                icon={
                  <span>
                    my icon
                  </span>
                }
                id="test-application-ExtensionItem-my-test-key-1"
                key="my-test-key-1"
                notificationCount={3}
                onSelect={[Function]}
                text="test-text-1"
              >
                <div
                  aria-label="test-text-1 3"
                  className="extension"
                  data-focus-styles-enabled={true}
                  id="test-application-ExtensionItem-my-test-key-1"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  role="button"
                  tabIndex="0"
                >
                  <div
                    aria-hidden={true}
                    className="extension-inner"
                  >
                    <div
                      className="extension-image"
                      title="test-text-1"
                    >
                      <span>
                        my icon
                      </span>
                    </div>
                    <ExtensionCount
                      className="extension-count"
                      value={3}
                    >
                      <div
                        aria-label={3}
                        className="count extension-count"
                      >
                        3
                      </div>
                    </ExtensionCount>
                  </div>
                </div>
              </Extension>
            </div>
            <Popup
              attachmentBehavior="auto"
              boundingRef={null}
              classNameArrow={null}
              classNameContent={null}
              classNameOverlay={null}
              contentAttachment="top center"
              contentHeight="auto"
              contentWidth="320"
              isArrowDisplayed={true}
              isContentFocusDisabled={true}
              isHeaderDisabled={false}
              isMenu={false}
              isOpen={false}
              onRequestClose={[Function]}
              popupContentRole="dialog"
              targetRef={[Function]}
            />
          </Extensions>
        </InjectIntl(Extensions)>
      </div>
      <div
        className="utilities-container"
      >
        <InjectIntl(UtilityMenuHeaderButton)
          id="test-application"
          onClick={[MockFunction]}
          popupAnchorRef={
            {
              "current": <span
                class="popup-anchor"
              />,
            }
          }
          userConfig={
            {
              "detail": "user-detail",
              "imageSrc": "user-src",
              "initials": "user-initials",
              "name": "user-name",
            }
          }
        >
          <UtilityMenuHeaderButton
            id="test-application"
            intl={
              {
                "defaultFormats": {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": {},
                "formatters": {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            onClick={[MockFunction]}
            popupAnchorRef={
              {
                "current": <span
                  class="popup-anchor"
                />,
              }
            }
            userConfig={
              {
                "detail": "user-detail",
                "imageSrc": "user-src",
                "initials": "user-initials",
                "name": "user-name",
              }
            }
          >
            <div
              aria-haspopup={true}
              aria-label="Terra.applicationNavigation.header.utilityButtonTitleUser"
              className="utility-button"
              data-application-header-utility={true}
              data-focus-styles-enabled={true}
              onBlur={[Function]}
              onClick={[MockFunction]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              role="button"
              tabIndex="0"
            >
              <div
                className="image"
              >
                <InjectIntl(Avatar)
                  alt="user-name"
                  className="avatar"
                  image="user-src"
                  initials="user-initials"
                  isAriaHidden={true}
                >
                  <Avatar
                    alt="user-name"
                    className="avatar"
                    color="auto"
                    image="user-src"
                    initials="user-initials"
                    intl={
                      {
                        "defaultFormats": {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatHTMLMessage": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatPlural": [Function],
                        "formatRelative": [Function],
                        "formatTime": [Function],
                        "formats": {},
                        "formatters": {
                          "getDateTimeFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralFormat": [Function],
                          "getRelativeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": null,
                        "now": [Function],
                        "onError": [Function],
                        "textComponent": "span",
                        "timeZone": null,
                      }
                    }
                    isAriaHidden={true}
                    isDeceased={false}
                  >
                    <div
                      className="avatar three image avatar"
                    >
                      <Image
                        alt="user-name"
                        className="image"
                        fit="cover"
                        isFluid={false}
                        onError={[Function]}
                        placeholder={
                          <span
                            alt="user-name"
                            aria-hidden={true}
                            aria-label="user-name"
                            className="initials"
                            role="img"
                          >
                            US
                          </span>
                        }
                        src="user-src"
                        variant="default"
                      >
                        <img
                          alt="user-name"
                          className="image cover default hidden image"
                          onError={[Function]}
                          onLoad={[Function]}
                          src="user-src"
                        />
                        <span
                          alt="user-name"
                          aria-hidden={true}
                          aria-label="user-name"
                          className="initials"
                          role="img"
                        >
                          US
                        </span>
                      </Image>
                    </div>
                  </Avatar>
                </InjectIntl(Avatar)>
              </div>
              <div
                className="title"
              >
                user-name
              </div>
              <IconCaretDown
                className="caret-icon"
                viewBox="0 0 48 48"
                xmlns="http://www.w3.org/2000/svg"
              >
                <IconBase
                  className="caret-icon"
                  focusable="false"
                  height="1em"
                  isBidi={false}
                  isSpin={false}
                  viewBox="0 0 48 48"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    className="tui-Icon icon caret-icon"
                    focusable="false"
                    height="1em"
                    role="presentation"
                    viewBox="0 0 48 48"
                    width="1em"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M48 12 24 36 0 12h48z"
                    />
                  </svg>
                </IconBase>
              </IconCaretDown>
              <span
                className="popup-anchor"
              />
            </div>
          </UtilityMenuHeaderButton>
        </InjectIntl(UtilityMenuHeaderButton)>
      </div>
    </header>
  </Header>
</InjectIntl(Header)>
`;

exports[`Header should render with skip callback 1`] = `
<InjectIntl(Header)
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onSelectSkipToContent={[MockFunction]}
>
  <Header
    intl={
      {
        "defaultFormats": {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": {},
        "formatters": {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    onSelectSkipToContent={[MockFunction]}
    utilityItems={[]}
  >
    <header
      className="header"
      role="banner"
    >
      <button
        className="skip-content-button"
        onClick={[MockFunction]}
        role="link"
        type="button"
      >
        Terra.applicationNavigation.header.skipToContentTitle
      </button>
      <div
        className="title-container"
      />
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)>
          <Tabs
            intl={
              {
                "defaultFormats": {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": {},
                "formatters": {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={[]}
            notifications={{}}
          >
            <Tab
              aria-hidden="true"
              isPlaceholder={true}
              tabKey=""
              text="W"
            >
              <div
                aria-hidden={true}
                aria-label="W"
                className="tab is-placeholder"
                data-focus-styles-enabled={true}
                onBlur={[Function]}
                onMouseDown={[Function]}
                role="link"
                tabIndex="0"
                type="button"
              >
                <div
                  aria-hidden={true}
                  className="tab-inner"
                >
                  <span
                    aria-hidden={true}
                    className="tab-label"
                  >
                    W
                  </span>
                </div>
              </div>
            </Tab>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      />
    </header>
  </Header>
</InjectIntl(Header)>
`;
