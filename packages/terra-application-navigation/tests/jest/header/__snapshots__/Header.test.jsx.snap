// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CompactHeader should render default element 1`] = `
<InjectIntl(Header)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <Header
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
  >
    <div
      className="header"
    >
      <button
        className="skip-content-button"
        type="button"
      >
        Terra.ApplicationHeaderLayout.SkipToContent
      </button>
      <div
        className="title-container"
      />
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)>
          <Tabs
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={Array []}
            notifications={Object {}}
          >
            <Tab
              aria-hidden="true"
              isPlaceholder={true}
              tabKey=""
              text="W"
            >
              <div
                aria-hidden={true}
                className="tab is-placeholder"
                data-item-show-focus={true}
                onBlur={[Function]}
                onKeyDown={[Function]}
                onMouseDown={[Function]}
                role="link"
                tabIndex="0"
                type="button"
              >
                <span
                  className="tab-inner"
                >
                  <span
                    className="tab-label"
                  >
                    W
                  </span>
                </span>
              </div>
            </Tab>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      />
      <div
        className="utilities-container"
      >
        <InjectIntl(UtilityMenuHeaderButton)
          onClick={[Function]}
          popupAnchorRef={
            Object {
              "current": <span
                class="popup-anchor"
              />,
            }
          }
        >
          <UtilityMenuHeaderButton
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            onClick={[Function]}
            popupAnchorRef={
              Object {
                "current": <span
                  class="popup-anchor"
                />,
              }
            }
          >
            <button
              aria-label="Terra.application.utility.button"
              className="utility-button"
              data-application-header-utility={true}
              data-item-show-focus={true}
              onBlur={[Function]}
              onClick={[Function]}
              onMouseDown={[Function]}
              type="button"
            >
              <span
                className="focus-me"
              >
                <IconKnurling
                  className="icon"
                  viewBox="0 0 48 48"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <IconBase
                    ariaLabel={null}
                    className="icon"
                    focusable="false"
                    height="1em"
                    isBidi={false}
                    isSpin={false}
                    viewBox="0 0 48 48"
                    width="1em"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <svg
                      aria-hidden="true"
                      className="tui-Icon icon icon"
                      focusable="false"
                      height="1em"
                      viewBox="0 0 48 48"
                      width="1em"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M15.4 18.5c3.1 0 5.5 2.5 5.6 5.5 0 3.1-2.5 5.5-5.5 5.6-3.1 0-5.5-2.5-5.6-5.5 0-3.1 2.4-5.6 5.5-5.6zm0-18.5c3.1 0 5.5 2.5 5.6 5.5 0 3.1-2.5 5.5-5.5 5.6-3.1 0-5.5-2.5-5.6-5.5 0-3.1 2.4-5.6 5.5-5.6zm0 36.9c3.1 0 5.5 2.5 5.6 5.5 0 3.1-2.5 5.5-5.5 5.6-3.1 0-5.5-2.5-5.6-5.5-.1-3.1 2.4-5.6 5.5-5.6zm17.2-18.4c3.1 0 5.5 2.5 5.5 5.5s-2.5 5.5-5.5 5.5-5.5-2.5-5.5-5.5 2.4-5.5 5.5-5.5zm0-18.5c3.1 0 5.5 2.5 5.5 5.5S35.6 11 32.6 11s-5.5-2.5-5.5-5.5S29.5 0 32.6 0zm0 36.9c3.1 0 5.5 2.5 5.5 5.5S35.7 48 32.6 48s-5.5-2.5-5.5-5.5c0-3.1 2.4-5.6 5.5-5.6z"
                      />
                    </svg>
                  </IconBase>
                </IconKnurling>
                <span
                  className="popup-anchor"
                />
              </span>
            </button>
          </UtilityMenuHeaderButton>
        </InjectIntl(UtilityMenuHeaderButton)>
      </div>
    </div>
  </Header>
</InjectIntl(Header)>
`;

exports[`CompactHeader should render with function callbacks 1`] = `
<InjectIntl(Header)
  activeNavigationItemKey="test-text"
  extensionItems={
    Array [
      Object {
        "icon": <span>
          my icon
        </span>,
        "key": "my-test-key-1",
        "text": "test-text-1",
      },
    ]
  }
  hero={
    <div>
      my test hero
    </div>
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  navigationItems={
    Array [
      Object {
        "key": "my-test-key",
        "text": "test-text",
      },
    ]
  }
  navigationRenderFunction={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "hasCount": false,
            "isActive": false,
            "notificationCount": 0,
            "text": "test-text",
          },
        ],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  notifications={
    Object {
      "my-test-key-1": 3,
    }
  }
  onSelectExtensionItem={[MockFunction]}
  onSelectHelp={[MockFunction]}
  onSelectLogout={[MockFunction]}
  onSelectNavigationItem={[MockFunction]}
  onSelectSettings={[MockFunction]}
  onSelectUtilityItem={[MockFunction]}
  userConfig={
    Object {
      "detail": "user-detail",
      "imageSrc": "user-src",
      "initials": "user-initials",
      "name": "user-name",
    }
  }
  utilityItems={
    Array [
      Object {
        "icon": <span>
          my icon
        </span>,
        "key": "my-test-key-2",
        "text": "test-text-2",
      },
    ]
  }
>
  <Header
    activeNavigationItemKey="test-text"
    extensionItems={
      Array [
        Object {
          "icon": <span>
            my icon
          </span>,
          "key": "my-test-key-1",
          "text": "test-text-1",
        },
      ]
    }
    hero={
      <div>
        my test hero
      </div>
    }
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    navigationItems={
      Array [
        Object {
          "key": "my-test-key",
          "text": "test-text",
        },
      ]
    }
    navigationRenderFunction={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "hasCount": false,
              "isActive": false,
              "notificationCount": 0,
              "text": "test-text",
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    notifications={
      Object {
        "my-test-key-1": 3,
      }
    }
    onSelectExtensionItem={[MockFunction]}
    onSelectHelp={[MockFunction]}
    onSelectLogout={[MockFunction]}
    onSelectNavigationItem={[MockFunction]}
    onSelectSettings={[MockFunction]}
    onSelectUtilityItem={[MockFunction]}
    userConfig={
      Object {
        "detail": "user-detail",
        "imageSrc": "user-src",
        "initials": "user-initials",
        "name": "user-name",
      }
    }
    utilityItems={
      Array [
        Object {
          "icon": <span>
            my icon
          </span>,
          "key": "my-test-key-2",
          "text": "test-text-2",
        },
      ]
    }
  >
    <div
      className="header"
    >
      <button
        className="skip-content-button"
        type="button"
      >
        Terra.ApplicationHeaderLayout.SkipToContent
      </button>
      <div
        className="title-container"
      />
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)
          activeTabKey="test-text"
          navigationItems={
            Array [
              Object {
                "key": "my-test-key",
                "text": "test-text",
              },
            ]
          }
          navigationRenderFunction={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "hasCount": false,
                    "isActive": false,
                    "notificationCount": 0,
                    "text": "test-text",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
          notifications={
            Object {
              "my-test-key-1": 3,
            }
          }
          onTabSelect={[MockFunction]}
        >
          <Tabs
            activeTabKey="test-text"
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={
              Array [
                Object {
                  "key": "my-test-key",
                  "text": "test-text",
                },
              ]
            }
            navigationRenderFunction={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "hasCount": false,
                      "isActive": false,
                      "notificationCount": 0,
                      "text": "test-text",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
            notifications={
              Object {
                "my-test-key-1": 3,
              }
            }
            onTabSelect={[MockFunction]}
          >
            <div
              className="tabs-wrapper"
            >
              <div
                className="tabs-container is-calculating"
                role="tablist"
              >
                <Tab
                  hasCount={false}
                  isActive={false}
                  key="my-test-key"
                  notificationCount={0}
                  onTabSelect={[Function]}
                  render={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "hasCount": false,
                            "isActive": false,
                            "notificationCount": 0,
                            "text": "test-text",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  tabRef={
                    Object {
                      "current": <div
                        aria-current="false"
                        class="tab"
                        data-item-show-focus="true"
                        role="link"
                        tabindex="0"
                        type="button"
                      />,
                    }
                  }
                  text="test-text"
                >
                  <div
                    aria-current={false}
                    className="tab"
                    data-item-show-focus={true}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    onMouseDown={[Function]}
                    role="link"
                    tabIndex="0"
                    type="button"
                  />
                </Tab>
                <TabRollup
                  data-application-tabs-more={true}
                  hasChildNotifications={false}
                  hasCount={false}
                  isIconOnly={false}
                  isPulsed={false}
                  isSelected={false}
                  onTabSelect={[Function]}
                  tabRef={
                    Object {
                      "current": <div
                        aria-current="false"
                        class="tab-rollup"
                        data-item-show-focus="true"
                        role="tab"
                        tabindex="0"
                      >
                        <div
                          class="tab-inner"
                          data-tab-menu-inner="true"
                        >
                          <div
                            class="tab-rollup-label"
                          >
                            <span
                              class="tab-rollup-text"
                            >
                              Terra.application.tabs.more
                            </span>
                            <svg
                              aria-hidden="true"
                              class="tui-Icon icon is-bidi tab-rollup-icon"
                              focusable="false"
                              height="1em"
                              viewBox="0 0 48 48"
                              width="1em"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M48 12L24 36 0 12h48z"
                              />
                            </svg>
                          </div>
                        </div>
                      </div>,
                    }
                  }
                  text="Terra.application.tabs.more"
                >
                  <div
                    aria-current={false}
                    className="tab-rollup"
                    data-item-show-focus={true}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    onMouseDown={[Function]}
                    role="tab"
                    tabIndex="0"
                  >
                    <div
                      className="tab-inner"
                      data-tab-menu-inner={true}
                    >
                      <div
                        className="tab-rollup-label"
                      >
                        <span
                          className="tab-rollup-text"
                        >
                          Terra.application.tabs.more
                        </span>
                        <IconCaretDown
                          className="tab-rollup-icon"
                          isBidi={true}
                          viewBox="0 0 48 48"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <IconBase
                            ariaLabel={null}
                            className="tab-rollup-icon"
                            focusable="false"
                            height="1em"
                            isBidi={true}
                            isSpin={false}
                            viewBox="0 0 48 48"
                            width="1em"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <svg
                              aria-hidden="true"
                              className="tui-Icon icon is-bidi tab-rollup-icon"
                              focusable="false"
                              height="1em"
                              viewBox="0 0 48 48"
                              width="1em"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M48 12L24 36 0 12h48z"
                              />
                            </svg>
                          </IconBase>
                        </IconCaretDown>
                      </div>
                    </div>
                  </div>
                </TabRollup>
                <div
                  className="divider-after-last-tab"
                />
              </div>
            </div>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      >
        <Extensions
          activeBreakpoint=""
          extensionItems={
            Array [
              Object {
                "icon": <span>
                  my icon
                </span>,
                "key": "my-test-key-1",
                "text": "test-text-1",
              },
            ]
          }
          notifications={
            Object {
              "my-test-key-1": 3,
            }
          }
          onSelect={[MockFunction]}
        >
          <Popup
            attachmentBehavior="auto"
            boundingRef={null}
            classNameArrow={null}
            classNameContent={null}
            classNameOverlay={null}
            contentAttachment="top center"
            contentHeight="auto"
            contentWidth="320"
            isArrowDisplayed={true}
            isContentFocusDisabled={false}
            isHeaderDisabled={false}
            isOpen={false}
            onRequestClose={[Function]}
            targetRef={[Function]}
          />
          <div
            className="extensions-row"
          >
            <Extension
              icon={
                <span>
                  my icon
                </span>
              }
              key="my-test-key-1"
              notificationCount={3}
              onRequestClose={[Function]}
              onSelect={[Function]}
              text="test-text-1"
            >
              <div
                aria-label="test-text-1"
                className="extension"
                data-item-show-focus={true}
                onBlur={[Function]}
                onClick={[Function]}
                onKeyDown={[Function]}
                onMouseDown={[Function]}
                role="button"
                tabIndex="0"
              >
                <div
                  className="extension-inner"
                >
                  <div
                    className="extension-image"
                  >
                    <span>
                      my icon
                    </span>
                  </div>
                  <ExtensionCount
                    className="extension-count"
                    value={3}
                  >
                    <div
                      className="count extension-count"
                    >
                      3
                    </div>
                  </ExtensionCount>
                </div>
              </div>
            </Extension>
          </div>
        </Extensions>
      </div>
      <div
        className="utilities-container"
      >
        <InjectIntl(UtilityMenuHeaderButton)
          onClick={[Function]}
          popupAnchorRef={
            Object {
              "current": <div
                class="popup-anchor"
              />,
            }
          }
          userConfig={
            Object {
              "detail": "user-detail",
              "imageSrc": "user-src",
              "initials": "user-initials",
              "name": "user-name",
            }
          }
        >
          <UtilityMenuHeaderButton
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            onClick={[Function]}
            popupAnchorRef={
              Object {
                "current": <div
                  class="popup-anchor"
                />,
              }
            }
            userConfig={
              Object {
                "detail": "user-detail",
                "imageSrc": "user-src",
                "initials": "user-initials",
                "name": "user-name",
              }
            }
          >
            <button
              aria-label="Terra.application.utility.button"
              className="utility-button"
              data-application-header-utility={true}
              data-item-show-focus={true}
              onBlur={[Function]}
              onClick={[Function]}
              onMouseDown={[Function]}
              type="button"
            >
              <span
                className="focus-me"
              >
                <Avatar
                  alt="user-name"
                  className="avatar"
                  color="auto"
                  image="user-src"
                  initials="user-initials"
                  isAriaHidden={false}
                  isDeceased={false}
                >
                  <div
                    className="avatar three image avatar"
                  >
                    <Image
                      alt="user-name"
                      className="image"
                      isFluid={false}
                      onError={[Function]}
                      placeholder={
                        <span
                          alt="user-name"
                          aria-hidden={false}
                          aria-label="user-name"
                          className="icon user"
                          role="img"
                        />
                      }
                      src="user-src"
                      variant="default"
                    >
                      <div>
                        <div
                          className="hidden"
                        >
                          <img
                            alt="user-name"
                            className="image default image"
                            onError={[Function]}
                            onLoad={[Function]}
                            src="user-src"
                          />
                        </div>
                        <div>
                          <span
                            alt="user-name"
                            aria-hidden={false}
                            aria-label="user-name"
                            className="icon user"
                            role="img"
                          />
                        </div>
                      </div>
                    </Image>
                  </div>
                </Avatar>
                <div
                  className="title"
                >
                  user-name
                </div>
                <IconCaretDown
                  className="icon"
                  isBidi={true}
                  viewBox="0 0 48 48"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <IconBase
                    ariaLabel={null}
                    className="icon"
                    focusable="false"
                    height="1em"
                    isBidi={true}
                    isSpin={false}
                    viewBox="0 0 48 48"
                    width="1em"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <svg
                      aria-hidden="true"
                      className="tui-Icon icon is-bidi icon"
                      focusable="false"
                      height="1em"
                      viewBox="0 0 48 48"
                      width="1em"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M48 12L24 36 0 12h48z"
                      />
                    </svg>
                  </IconBase>
                </IconCaretDown>
                <div
                  className="popup-anchor"
                />
              </span>
            </button>
          </UtilityMenuHeaderButton>
        </InjectIntl(UtilityMenuHeaderButton)>
      </div>
    </div>
  </Header>
</InjectIntl(Header)>
`;

exports[`CompactHeader should render with skip callback 1`] = `
<InjectIntl(Header)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onSelectSkipToContent={[MockFunction]}
>
  <Header
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    onSelectSkipToContent={[MockFunction]}
  >
    <div
      className="header"
    >
      <button
        className="skip-content-button"
        onClick={[MockFunction]}
        type="button"
      >
        Terra.ApplicationHeaderLayout.SkipToContent
      </button>
      <div
        className="title-container"
      />
      <div
        className="main-navigation-container"
      >
        <InjectIntl(Tabs)>
          <Tabs
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            navigationItems={Array []}
            notifications={Object {}}
          >
            <Tab
              aria-hidden="true"
              isPlaceholder={true}
              tabKey=""
              text="W"
            >
              <div
                aria-hidden={true}
                className="tab is-placeholder"
                data-item-show-focus={true}
                onBlur={[Function]}
                onKeyDown={[Function]}
                onMouseDown={[Function]}
                role="link"
                tabIndex="0"
                type="button"
              >
                <span
                  className="tab-inner"
                >
                  <span
                    className="tab-label"
                  >
                    W
                  </span>
                </span>
              </div>
            </Tab>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="extensions-container"
      />
      <div
        className="utilities-container"
      >
        <InjectIntl(UtilityMenuHeaderButton)
          onClick={[Function]}
          popupAnchorRef={
            Object {
              "current": <span
                class="popup-anchor"
              />,
            }
          }
        >
          <UtilityMenuHeaderButton
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            onClick={[Function]}
            popupAnchorRef={
              Object {
                "current": <span
                  class="popup-anchor"
                />,
              }
            }
          >
            <button
              aria-label="Terra.application.utility.button"
              className="utility-button"
              data-application-header-utility={true}
              data-item-show-focus={true}
              onBlur={[Function]}
              onClick={[Function]}
              onMouseDown={[Function]}
              type="button"
            >
              <span
                className="focus-me"
              >
                <IconKnurling
                  className="icon"
                  viewBox="0 0 48 48"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <IconBase
                    ariaLabel={null}
                    className="icon"
                    focusable="false"
                    height="1em"
                    isBidi={false}
                    isSpin={false}
                    viewBox="0 0 48 48"
                    width="1em"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <svg
                      aria-hidden="true"
                      className="tui-Icon icon icon"
                      focusable="false"
                      height="1em"
                      viewBox="0 0 48 48"
                      width="1em"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M15.4 18.5c3.1 0 5.5 2.5 5.6 5.5 0 3.1-2.5 5.5-5.5 5.6-3.1 0-5.5-2.5-5.6-5.5 0-3.1 2.4-5.6 5.5-5.6zm0-18.5c3.1 0 5.5 2.5 5.6 5.5 0 3.1-2.5 5.5-5.5 5.6-3.1 0-5.5-2.5-5.6-5.5 0-3.1 2.4-5.6 5.5-5.6zm0 36.9c3.1 0 5.5 2.5 5.6 5.5 0 3.1-2.5 5.5-5.5 5.6-3.1 0-5.5-2.5-5.6-5.5-.1-3.1 2.4-5.6 5.5-5.6zm17.2-18.4c3.1 0 5.5 2.5 5.5 5.5s-2.5 5.5-5.5 5.5-5.5-2.5-5.5-5.5 2.4-5.5 5.5-5.5zm0-18.5c3.1 0 5.5 2.5 5.5 5.5S35.6 11 32.6 11s-5.5-2.5-5.5-5.5S29.5 0 32.6 0zm0 36.9c3.1 0 5.5 2.5 5.5 5.5S35.7 48 32.6 48s-5.5-2.5-5.5-5.5c0-3.1 2.4-5.6 5.5-5.6z"
                      />
                    </svg>
                  </IconBase>
                </IconKnurling>
                <span
                  className="popup-anchor"
                />
              </span>
            </button>
          </UtilityMenuHeaderButton>
        </InjectIntl(UtilityMenuHeaderButton)>
      </div>
    </div>
  </Header>
</InjectIntl(Header)>
`;
