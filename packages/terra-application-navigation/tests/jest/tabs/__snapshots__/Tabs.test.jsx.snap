// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tabs should render default element 1`] = `
<InjectIntl(Tabs)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <Tabs
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    navigationItems={Array []}
    notifications={Object {}}
  >
    <Tab
      aria-hidden="true"
      isPlaceholder={true}
      tabKey=""
      text="W"
    >
      <div
        aria-hidden={true}
        aria-label="W"
        className="tab is-placeholder"
        data-focus-styles-enabled={true}
        onBlur={[Function]}
        onMouseDown={[Function]}
        role="link"
        tabIndex="0"
        type="button"
      >
        <div
          aria-hidden={true}
          className="tab-inner"
        >
          <span
            aria-hidden={true}
            className="tab-label"
          >
            W
          </span>
        </div>
      </div>
    </Tab>
  </Tabs>
</InjectIntl(Tabs)>
`;

exports[`Tabs should render prop data 1`] = `
<InjectIntl(Tabs)
  activeTabKey="my-test-key"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  navigationItems={
    Array [
      Object {
        "key": "my-test-key",
        "text": "test-text",
      },
    ]
  }
  navigationRenderFunction={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "hasCount": true,
            "isActive": true,
            "notificationCount": undefined,
            "text": "test-text",
          },
        ],
        Array [
          Object {
            "hasCount": true,
            "isActive": true,
            "notificationCount": undefined,
            "text": "test-text",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  notifications={
    Object {
      "myComponent": 3,
    }
  }
  onTabSelect={[MockFunction]}
>
  <Tabs
    activeTabKey="my-test-key"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    navigationItems={
      Array [
        Object {
          "key": "my-test-key",
          "text": "test-text",
        },
      ]
    }
    navigationRenderFunction={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "hasCount": true,
              "isActive": true,
              "notificationCount": undefined,
              "text": "test-text",
            },
          ],
          Array [
            Object {
              "hasCount": true,
              "isActive": true,
              "notificationCount": undefined,
              "text": "test-text",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    notifications={
      Object {
        "myComponent": 3,
      }
    }
    onTabSelect={[MockFunction]}
  >
    <nav
      className="tabs-container is-calculating"
    >
      <Tab
        hasCount={true}
        isActive={true}
        key="my-test-key"
        onTabSelect={[Function]}
        render={
          [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "hasCount": true,
                  "isActive": true,
                  "notificationCount": undefined,
                  "text": "test-text",
                },
              ],
              Array [
                Object {
                  "hasCount": true,
                  "isActive": true,
                  "notificationCount": undefined,
                  "text": "test-text",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        tabRef={
          Object {
            "current": <div
              aria-current="true"
              aria-label="test-text"
              class="tab is-disabled"
              data-focus-styles-enabled="true"
              role="link"
              tabindex="0"
              type="button"
            />,
          }
        }
        text="test-text"
      >
        <div
          aria-current={true}
          aria-label="test-text"
          className="tab is-disabled"
          data-focus-styles-enabled={true}
          onBlur={[Function]}
          onMouseDown={[Function]}
          role="link"
          tabIndex="0"
          type="button"
        />
      </Tab>
    </nav>
  </Tabs>
</InjectIntl(Tabs)>
`;

exports[`Tabs should render with hasCount set to true when notifications are set to 0 1`] = `
<InjectIntl(Tabs)
  activeTabKey="notification-test"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  navigationItems={
    Array [
      Object {
        "key": "notification-test",
        "text": "sample-text",
      },
    ]
  }
  navigationRenderFunction={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "hasCount": true,
            "isActive": true,
            "notificationCount": undefined,
            "text": "sample-text",
          },
        ],
        Array [
          Object {
            "hasCount": true,
            "isActive": true,
            "notificationCount": undefined,
            "text": "sample-text",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  notifications={
    Object {
      "myComponent": 0,
    }
  }
>
  <Tabs
    activeTabKey="notification-test"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    navigationItems={
      Array [
        Object {
          "key": "notification-test",
          "text": "sample-text",
        },
      ]
    }
    navigationRenderFunction={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "hasCount": true,
              "isActive": true,
              "notificationCount": undefined,
              "text": "sample-text",
            },
          ],
          Array [
            Object {
              "hasCount": true,
              "isActive": true,
              "notificationCount": undefined,
              "text": "sample-text",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    notifications={
      Object {
        "myComponent": 0,
      }
    }
  >
    <nav
      className="tabs-container is-calculating"
    >
      <Tab
        hasCount={true}
        isActive={true}
        key="notification-test"
        onTabSelect={null}
        render={
          [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "hasCount": true,
                  "isActive": true,
                  "notificationCount": undefined,
                  "text": "sample-text",
                },
              ],
              Array [
                Object {
                  "hasCount": true,
                  "isActive": true,
                  "notificationCount": undefined,
                  "text": "sample-text",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        tabRef={
          Object {
            "current": <div
              aria-current="true"
              aria-label="sample-text"
              class="tab is-disabled"
              data-focus-styles-enabled="true"
              role="link"
              tabindex="0"
              type="button"
            />,
          }
        }
        text="sample-text"
      >
        <div
          aria-current={true}
          aria-label="sample-text"
          className="tab is-disabled"
          data-focus-styles-enabled={true}
          onBlur={[Function]}
          onMouseDown={[Function]}
          role="link"
          tabIndex="0"
          type="button"
        />
      </Tab>
    </nav>
  </Tabs>
</InjectIntl(Tabs)>
`;
