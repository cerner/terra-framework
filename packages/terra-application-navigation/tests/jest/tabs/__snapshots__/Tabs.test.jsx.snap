// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tabs should render default element 1`] = `
<InjectIntl(Tabs)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <Tabs
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    navigationItems={Array []}
    notifications={Object {}}
  >
    <Tab
      aria-hidden="true"
      isPlaceholder={true}
      tabKey=""
      text="W"
    >
      <div
        aria-hidden={true}
        className="tab is-placeholder"
        data-item-show-focus={true}
        onBlur={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        role="link"
        tabIndex="0"
        type="button"
      >
        <span
          className="tab-inner"
        >
          <span
            className="tab-label"
          >
            W
          </span>
        </span>
      </div>
    </Tab>
  </Tabs>
</InjectIntl(Tabs)>
`;

exports[`Tabs should render prop data 1`] = `
<InjectIntl(Tabs)
  activeTabKey="my-test-key"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  navigationItems={
    Array [
      Object {
        "key": "my-test-key",
        "text": "test-text",
      },
    ]
  }
  navigationRenderFunction={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "hasCount": false,
            "isActive": true,
            "notificationCount": 0,
            "text": "test-text",
          },
        ],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  notifications={
    Object {
      "myComponent": 3,
    }
  }
  onTabSelect={[MockFunction]}
>
  <Tabs
    activeTabKey="my-test-key"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    navigationItems={
      Array [
        Object {
          "key": "my-test-key",
          "text": "test-text",
        },
      ]
    }
    navigationRenderFunction={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "hasCount": false,
              "isActive": true,
              "notificationCount": 0,
              "text": "test-text",
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    notifications={
      Object {
        "myComponent": 3,
      }
    }
    onTabSelect={[MockFunction]}
  >
    <div
      className="tabs-wrapper"
    >
      <div
        className="tabs-container is-calculating"
        role="tablist"
      >
        <Tab
          hasCount={false}
          isActive={true}
          key="my-test-key"
          notificationCount={0}
          onTabSelect={[Function]}
          render={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "hasCount": false,
                    "isActive": true,
                    "notificationCount": 0,
                    "text": "test-text",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
          tabRef={
            Object {
              "current": <div
                aria-current="true"
                class="tab is-disabled"
                data-item-show-focus="true"
                role="link"
                tabindex="0"
                type="button"
              />,
            }
          }
          text="test-text"
        >
          <div
            aria-current={true}
            className="tab is-disabled"
            data-item-show-focus={true}
            onBlur={[Function]}
            onClick={null}
            onKeyDown={null}
            onMouseDown={[Function]}
            role="link"
            tabIndex="0"
            type="button"
          />
        </Tab>
        <TabRollup
          data-application-tabs-more={true}
          hasChildNotifications={false}
          hasCount={false}
          isIconOnly={false}
          isPulsed={false}
          isSelected={false}
          onTabSelect={[Function]}
          tabRef={
            Object {
              "current": <div
                aria-current="false"
                class="tab-rollup"
                data-item-show-focus="true"
                role="tab"
                tabindex="0"
              >
                <div
                  class="tab-inner"
                  data-tab-menu-inner="true"
                >
                  <div
                    class="tab-rollup-label"
                  >
                    <span
                      class="tab-rollup-text"
                    >
                      Terra.application.tabs.more
                    </span>
                    <svg
                      aria-hidden="true"
                      class="tui-Icon icon is-bidi tab-rollup-icon"
                      focusable="false"
                      height="1em"
                      viewBox="0 0 48 48"
                      width="1em"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M48 12L24 36 0 12h48z"
                      />
                    </svg>
                  </div>
                </div>
              </div>,
            }
          }
          text="Terra.application.tabs.more"
        >
          <div
            aria-current={false}
            className="tab-rollup"
            data-item-show-focus={true}
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onMouseDown={[Function]}
            role="tab"
            tabIndex="0"
          >
            <div
              className="tab-inner"
              data-tab-menu-inner={true}
            >
              <div
                className="tab-rollup-label"
              >
                <span
                  className="tab-rollup-text"
                >
                  Terra.application.tabs.more
                </span>
                <IconCaretDown
                  className="tab-rollup-icon"
                  isBidi={true}
                  viewBox="0 0 48 48"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <IconBase
                    ariaLabel={null}
                    className="tab-rollup-icon"
                    focusable="false"
                    height="1em"
                    isBidi={true}
                    isSpin={false}
                    viewBox="0 0 48 48"
                    width="1em"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <svg
                      aria-hidden="true"
                      className="tui-Icon icon is-bidi tab-rollup-icon"
                      focusable="false"
                      height="1em"
                      viewBox="0 0 48 48"
                      width="1em"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M48 12L24 36 0 12h48z"
                      />
                    </svg>
                  </IconBase>
                </IconCaretDown>
              </div>
            </div>
          </div>
        </TabRollup>
        <div
          className="divider-after-last-tab"
        />
      </div>
    </div>
  </Tabs>
</InjectIntl(Tabs)>
`;
