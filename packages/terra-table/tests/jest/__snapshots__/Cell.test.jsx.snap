// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Cell renders a pinned cell 1`] = `
<InjectIntl(Cell)
  columnId="ColumnId"
  columnIndex={0}
  height="50px"
  isRowHeader={true}
  isSelected={false}
  key="key"
  onCellSelect={[Function]}
  rowId="RowID"
  rowIndex={1}
  tableId="test-table"
>
  <Cell
    columnId="ColumnId"
    columnIndex={0}
    height="50px"
    intl={
      {
        "defaultFormats": {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": {},
        "formatters": {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    isMasked={false}
    isRowHeader={true}
    isSelectable={false}
    isSelected={false}
    onCellSelect={[Function]}
    rowId="RowID"
    rowIndex={1}
    sectionId=""
    tableId="test-table"
  >
    <th
      className="cell pinned last-pinned-column"
      data-cell-column-id="ColumnId-undefined"
      headers="test-table-ColumnId-headerCell"
      id="test-table-rowheader-RowID"
      onKeyDown={[Function]}
      onMouseDown={[Function]}
      role="rowheader"
      scope="row"
      style={
        {
          "left": 0,
        }
      }
    >
      <div
        className="cell-content"
        style={
          {
            "height": "50px",
          }
        }
      >
        Pinned cell data
      </div>
    </th>
  </Cell>
</InjectIntl(Cell)>
`;

exports[`Cell verifies mask takes precedence when cell is masked, selectable and selected 1`] = `
<td
  aria-label="Some Label Here"
  aria-selected={true}
  className="cell masked"
  data-cell-column-id="ColumnId-undefined"
  headers="test-table-rowheader-RowID test-table-ColumnId-headerCell"
  onKeyDown={[Function]}
  onMouseDown={[Function]}
  style={
    {
      "left": null,
    }
  }
>
  <div
    className="cell-content"
    style={
      {
        "minHeight": undefined,
      }
    }
  >
    <span
      className="no-data-cell"
    >
      Terra.table.maskedCell
    </span>
  </div>
</td>
`;

exports[`Cell verifies that a cell has renders that masked label text, when provided 1`] = `
<td
  aria-label="Some Label Here"
  className="cell masked"
  data-cell-column-id="ColumnId-undefined"
  headers="test-table-rowheader-RowID test-table-ColumnId-headerCell"
  onKeyDown={[Function]}
  onMouseDown={[Function]}
  style={
    {
      "left": null,
    }
  }
>
  <div
    className="cell-content"
    style={
      {
        "minHeight": undefined,
      }
    }
  >
    <span
      className="no-data-cell"
    >
      MaskedLabel
    </span>
  </div>
</td>
`;

exports[`Cell verifies that a cell has the correct styles and no content when isMasked prop is true 1`] = `
<td
  aria-label="Some Label Here"
  className="cell masked"
  data-cell-column-id="ColumnId-undefined"
  headers="test-table-rowheader-RowID test-table-ColumnId-headerCell"
  onKeyDown={[Function]}
  onMouseDown={[Function]}
  style={
    {
      "left": null,
    }
  }
>
  <div
    className="cell-content"
    style={
      {
        "minHeight": undefined,
      }
    }
  >
    <span
      className="no-data-cell"
    >
      Terra.table.maskedCell
    </span>
  </div>
</td>
`;

exports[`Cell verifies that a grid cell has a FocusTrap element 1`] = `
<InjectIntl(Cell)
  ariaLabel="Some Label Here"
  columnId="ColumnId"
  columnIndex={0}
  key="key"
  rowId="RowID"
  rowIndex={1}
  tableId="test-table"
>
  <Cell
    ariaLabel="Some Label Here"
    columnId="ColumnId"
    columnIndex={0}
    intl={
      {
        "defaultFormats": {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": {},
        "formatters": {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    isMasked={false}
    isRowHeader={false}
    isSelectable={false}
    rowId="RowID"
    rowIndex={1}
    sectionId=""
    tableId="test-table"
  >
    <td
      aria-label="Some Label Here"
      className="cell"
      data-cell-column-id="ColumnId-undefined"
      headers="test-table-rowheader-RowID test-table-ColumnId-headerCell"
      onKeyDown={[Function]}
      style={
        {
          "left": null,
        }
      }
      tabIndex={-1}
    >
      <FocusTrap
        _createFocusTrap={[Function]}
        active={false}
        focusTrapOptions={
          {
            "clickOutsideDeactivates": true,
            "escapeDeactivates": false,
            "onDeactivate": [Function],
            "returnFocusOnDeactivate": true,
          }
        }
        paused={false}
      >
        <div
          className="cell-content"
          style={
            {
              "minHeight": undefined,
            }
          }
        >
          <button
            type="button"
          >
            Button
          </button>
          <button
            type="button"
          >
            Button 2
          </button>
        </div>
      </FocusTrap>
      <VisuallyHiddenText
        text="Terra.table.cell-interactable"
      >
        <span
          className="visually-hidden-text"
        >
          Terra.table.cell-interactable
        </span>
      </VisuallyHiddenText>
    </td>
  </Cell>
</InjectIntl(Cell)>
`;

exports[`Cell verifies that a grid cell without a focusale element does not have visually hidden text 1`] = `
<InjectIntl(Cell)
  ariaLabel="Some Label Here"
  columnId="ColumnId"
  columnIndex={0}
  key="key"
  rowId="RowID"
  rowIndex={1}
  tableId="test-table"
>
  <Cell
    ariaLabel="Some Label Here"
    columnId="ColumnId"
    columnIndex={0}
    intl={
      {
        "defaultFormats": {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": {},
        "formatters": {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    isMasked={false}
    isRowHeader={false}
    isSelectable={false}
    rowId="RowID"
    rowIndex={1}
    sectionId=""
    tableId="test-table"
  >
    <td
      aria-label="Some Label Here"
      className="cell"
      data-cell-column-id="ColumnId-undefined"
      headers="test-table-rowheader-RowID test-table-ColumnId-headerCell"
      onKeyDown={[Function]}
      style={
        {
          "left": null,
        }
      }
      tabIndex={-1}
    >
      <FocusTrap
        _createFocusTrap={[Function]}
        active={false}
        focusTrapOptions={
          {
            "clickOutsideDeactivates": true,
            "escapeDeactivates": false,
            "onDeactivate": [Function],
            "returnFocusOnDeactivate": true,
          }
        }
        paused={false}
      >
        <div
          className="cell-content"
          style={
            {
              "minHeight": undefined,
            }
          }
        >
          Data in cell
        </div>
      </FocusTrap>
    </td>
  </Cell>
</InjectIntl(Cell)>
`;

exports[`Cell verifies that a selected cell has the correct styles when isSelected prop is true 1`] = `
<td
  aria-label="Some Label Here"
  aria-selected={true}
  className="cell selected"
  data-cell-column-id="ColumnId-undefined"
  headers="test-table-rowheader-RowID test-table-ColumnId-headerCell"
  onKeyDown={[Function]}
  onMouseDown={[Function]}
  style={
    {
      "left": null,
    }
  }
>
  <div
    className="cell-content"
    style={
      {
        "minHeight": undefined,
      }
    }
  >
    Data in cell
  </div>
</td>
`;

exports[`Cell verifies that a table cell does not have a FocusTrap element 1`] = `
<td
  aria-label="Some Label Here"
  className="cell"
  data-cell-column-id="ColumnId-undefined"
  headers="test-table-rowheader-RowID test-table-ColumnId-headerCell"
  onKeyDown={[Function]}
  style={
    {
      "left": null,
    }
  }
>
  <div
    className="cell-content"
    style={
      {
        "minHeight": undefined,
      }
    }
  >
    Data in cell
  </div>
</td>
`;

exports[`Cell verifies that only a regular cell(<td>) is created when isRowHeader prop is false 1`] = `
<td
  className="cell"
  data-cell-column-id="ColumnId-undefined"
  headers="test-table-rowheader-RowID test-table-ColumnId-headerCell"
  onKeyDown={[Function]}
  onMouseDown={[Function]}
  style={
    {
      "left": null,
    }
  }
>
  <div
    className="cell-content"
    style={
      {
        "minHeight": undefined,
      }
    }
  >
    Data in cell
  </div>
</td>
`;

exports[`Cell verifies that only a row header cell (<th>) is created when isRowHeader prop is true 1`] = `
<th
  className="cell"
  data-cell-column-id="ColumnId-undefined"
  headers="test-table-ColumnId-headerCell"
  id="test-table-rowheader-RowID"
  onKeyDown={[Function]}
  onMouseDown={[Function]}
  role="rowheader"
  scope="row"
  style={
    {
      "left": null,
    }
  }
>
  <div
    className="cell-content"
    style={
      {
        "height": "50px",
      }
    }
  >
    Data in cell
  </div>
</th>
`;

exports[`Cell verifies that the cell rendered is marked blank when the cell content is empty 1`] = `
<td
  className="cell blank"
  data-cell-column-id="ColumnId-undefined"
  headers="test-table-rowheader-RowID test-table-ColumnId-headerCell"
  onKeyDown={[Function]}
  onMouseDown={[Function]}
  style={
    {
      "left": null,
    }
  }
>
  <div
    className="cell-content"
    style={
      {
        "minHeight": undefined,
      }
    }
  >
    <span
      className="no-data-cell"
    >
      Terra.table.blank
    </span>
  </div>
</td>
`;

exports[`Cell verifies that the cell rendered is marked selectable when isSelectable prop is true 1`] = `
<td
  className="cell selectable"
  data-cell-column-id="ColumnId-undefined"
  headers="test-table-rowheader-RowID test-table-ColumnId-headerCell"
  onKeyDown={[Function]}
  onMouseDown={[Function]}
  style={
    {
      "left": null,
    }
  }
>
  <div
    className="cell-content"
    style={
      {
        "minHeight": undefined,
      }
    }
  >
    Data in cell
  </div>
</td>
`;
