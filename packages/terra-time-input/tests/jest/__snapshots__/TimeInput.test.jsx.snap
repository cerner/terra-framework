// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`correctly applies the theme context className 1`] = `
<ThemeContextProvider
  theme={
    Object {
      "className": "orion-fusion-theme",
    }
  }
>
  <injectIntl(TimeInput)
    name="time-input"
  >
    <TimeInput
      atMaxDate={false}
      atMinDate={false}
      disabled={false}
      hourAttributes={Object {}}
      inputAttributes={
        Object {
          "disabled": false,
          "isInvalid": false,
          "required": false,
        }
      }
      intl={
        Object {
          "$t": [Function],
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "defaultRichTextElements": undefined,
          "fallbackOnEmptyString": true,
          "formatDate": [Function],
          "formatDateTimeRange": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatListToParts": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "onError": [Function],
          "onWarn": [Function],
          "textComponent": Symbol(react.fragment),
          "timeZone": undefined,
          "wrapRichTextChunksInFragment": undefined,
        }
      }
      isIncomplete={false}
      isInvalid={false}
      isInvalidMeridiem={false}
      minuteAttributes={Object {}}
      name="time-input"
      onBlur={null}
      onChange={null}
      required={false}
      secondAttributes={Object {}}
      showSeconds={false}
      variant="24-hour"
    >
      <div
        className="time-input-container orion-fusion-theme"
      >
        <div
          aria-label="Terra.timeInput.a11yLabelDefault"
          className="time-input"
          role="group"
        >
          <AccessibleValue
            readThis="Terra.timeInput.labeledTextValue"
          >
            <VisuallyHiddenText
              aria-hidden={true}
              text="Terra.timeInput.labeledTextValue"
            >
              <span
                aria-hidden={true}
                className="visually-hidden-text"
              >
                Terra.timeInput.labeledTextValue
              </span>
            </VisuallyHiddenText>
          </AccessibleValue>
          <input
            name="time-input"
            type="hidden"
            value=""
          />
          <AccessibleInput
            className="time-input-hour"
            description="Terra.timeInput.hourDescriptionTwentyFour"
            disabled={false}
            isInvalid={false}
            label="Terra.timeInput.hourLabel"
            maxLength="2"
            name="terra-time-hour-time-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            pattern="\\\\d*"
            refCallback={[Function]}
            required={false}
            showIsInvalid={false}
            size="2"
            type="text"
            value=""
          >
            <Input
              aria-describedby="00000000-0000-0000-0000-000000000000-description"
              aria-disabled={false}
              aria-invalid={false}
              aria-label="Terra.timeInput.hourLabel"
              className="time-input-hour"
              disabled={false}
              isIncomplete={false}
              isInvalid={false}
              maxLength="2"
              name="terra-time-hour-time-input"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              pattern="\\\\d*"
              refCallback={[Function]}
              required={false}
              size="2"
              type="text"
              value=""
            >
              <input
                aria-describedby="00000000-0000-0000-0000-000000000000-description"
                aria-disabled={false}
                aria-invalid={false}
                aria-label="Terra.timeInput.hourLabel"
                className="form-input orion-fusion-theme time-input-hour"
                disabled={false}
                maxLength="2"
                name="terra-time-hour-time-input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                pattern="\\\\d*"
                required={false}
                size="2"
                type="text"
                value=""
              />
            </Input>
            <VisuallyHiddenText
              id="00000000-0000-0000-0000-000000000000-description"
              text="Terra.timeInput.hourDescriptionTwentyFour"
            >
              <span
                className="visually-hidden-text"
                id="00000000-0000-0000-0000-000000000000-description"
              >
                Terra.timeInput.hourDescriptionTwentyFour
              </span>
            </VisuallyHiddenText>
          </AccessibleInput>
          <injectIntl(TimeSpacer)
            className="time-spacer"
          >
            <TimeSpacer
              className="time-spacer"
              intl={
                Object {
                  "$t": [Function],
                  "defaultFormats": Object {},
                  "defaultLocale": "en",
                  "defaultRichTextElements": undefined,
                  "fallbackOnEmptyString": true,
                  "formatDate": [Function],
                  "formatDateTimeRange": [Function],
                  "formatDateToParts": [Function],
                  "formatDisplayName": [Function],
                  "formatList": [Function],
                  "formatListToParts": [Function],
                  "formatMessage": [Function],
                  "formatNumber": [Function],
                  "formatNumberToParts": [Function],
                  "formatPlural": [Function],
                  "formatRelativeTime": [Function],
                  "formatTime": [Function],
                  "formatTimeToParts": [Function],
                  "formats": Object {},
                  "formatters": Object {
                    "getDateTimeFormat": [Function],
                    "getDisplayNames": [Function],
                    "getListFormat": [Function],
                    "getMessageFormat": [Function],
                    "getNumberFormat": [Function],
                    "getPluralRules": [Function],
                    "getRelativeTimeFormat": [Function],
                  },
                  "locale": "en",
                  "messages": null,
                  "onError": [Function],
                  "onWarn": [Function],
                  "textComponent": Symbol(react.fragment),
                  "timeZone": undefined,
                  "wrapRichTextChunksInFragment": undefined,
                }
              }
            >
              <span
                aria-hidden={true}
                className="time-spacer"
              >
                Terra.timeInput.timeSpacer
              </span>
            </TimeSpacer>
          </injectIntl(TimeSpacer)>
          <AccessibleInput
            className="time-input-minute"
            description="Terra.timeInput.descriptionMinute"
            disabled={false}
            isInvalid={false}
            label="Terra.timeInput.minutes"
            maxLength="2"
            name="terra-time-minute-time-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            pattern="\\\\d*"
            refCallback={[Function]}
            required={false}
            showIsInvalid={false}
            size="2"
            type="text"
            value=""
          >
            <Input
              aria-describedby="00000000-0000-0000-0000-000000000000-description"
              aria-disabled={false}
              aria-invalid={false}
              aria-label="Terra.timeInput.minutes"
              className="time-input-minute"
              disabled={false}
              isIncomplete={false}
              isInvalid={false}
              maxLength="2"
              name="terra-time-minute-time-input"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              pattern="\\\\d*"
              refCallback={[Function]}
              required={false}
              size="2"
              type="text"
              value=""
            >
              <input
                aria-describedby="00000000-0000-0000-0000-000000000000-description"
                aria-disabled={false}
                aria-invalid={false}
                aria-label="Terra.timeInput.minutes"
                className="form-input orion-fusion-theme time-input-minute"
                disabled={false}
                maxLength="2"
                name="terra-time-minute-time-input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                pattern="\\\\d*"
                required={false}
                size="2"
                type="text"
                value=""
              />
            </Input>
            <VisuallyHiddenText
              id="00000000-0000-0000-0000-000000000000-description"
              text="Terra.timeInput.descriptionMinute"
            >
              <span
                className="visually-hidden-text"
                id="00000000-0000-0000-0000-000000000000-description"
              >
                Terra.timeInput.descriptionMinute
              </span>
            </VisuallyHiddenText>
          </AccessibleInput>
        </div>
        <div
          aria-hidden={true}
          className="format-text"
        >
          Terra.timeInput.maskHourMinute
        </div>
      </div>
    </TimeInput>
  </injectIntl(TimeInput)>
</ThemeContextProvider>
`;

exports[`should ignore invalid times properly 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={Object {}}
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  required={false}
  secondAttributes={Object {}}
  showSeconds={false}
  value="11:2"
  variant="24-hour"
/>
`;

exports[`should ignore invalid times with seconds properly 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={
    Object {
      "disabled": false,
      "isInvalid": false,
      "required": false,
    }
  }
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  required={false}
  secondAttributes={Object {}}
  showSeconds={true}
  value="11:25:4"
  variant="24-hour"
/>
`;

exports[`should not have duplicate ids on the page when multiple date pickers are initialized 1`] = `
<div>
  <div
    class="time-input-container"
  >
    <div
      aria-label="Terra.timeInput.a11yLabelDefault"
      class="time-input"
      role="group"
    >
      <span
        aria-hidden="true"
        class="visually-hidden-text"
      >
        Terra.timeInput.labeledTextValue
      </span>
      <input
        name="time-input"
        type="hidden"
        value=""
      />
      <input
        aria-describedby="00000000-0000-0000-0000-000000000000-description"
        aria-disabled="false"
        aria-invalid="false"
        aria-label="Terra.timeInput.hourLabel"
        class="form-input time-input-hour"
        maxlength="2"
        name="terra-time-hour-time-input"
        pattern="\\\\d*"
        size="2"
        type="text"
        value=""
      />
      <span
        class="visually-hidden-text"
        id="00000000-0000-0000-0000-000000000000-description"
      >
        Terra.timeInput.hourDescriptionTwelve
      </span>
      <span
        aria-hidden="true"
        class="time-spacer"
      >
        Terra.timeInput.timeSpacer
      </span>
      <input
        aria-describedby="00000000-0000-0000-0000-000000000000-description"
        aria-disabled="false"
        aria-invalid="false"
        aria-label="Terra.timeInput.minutes"
        class="form-input time-input-minute"
        maxlength="2"
        name="terra-time-minute-time-input"
        pattern="\\\\d*"
        size="2"
        type="text"
        value=""
      />
      <span
        class="visually-hidden-text"
        id="00000000-0000-0000-0000-000000000000-description"
      >
        Terra.timeInput.descriptionMinute
      </span>
    </div>
    <div
      class="button-group meridiem-button-group"
    >
      <button
        aria-disabled="false"
        aria-pressed="true"
        class="button neutral button-group-button is-selected meridiem-button"
        type="button"
      >
        <span
          class="button-label text-only"
        >
          <span
            class=""
          >
            Terra.timeInput.am
          </span>
        </span>
      </button>
      <button
        aria-disabled="false"
        aria-pressed="false"
        class="button neutral button-group-button meridiem-button"
        type="button"
      >
        <span
          class="button-label text-only"
        >
          <span
            class=""
          >
            Terra.timeInput.pm
          </span>
        </span>
      </button>
    </div>
    <div
      aria-hidden="true"
      class="format-text"
    >
      Terra.timeInput.maskHourMinute
    </div>
  </div>
  <div
    class="time-input-container"
  >
    <div
      aria-label="Terra.timeInput.a11yLabelDefault"
      class="time-input"
      role="group"
    >
      <span
        aria-hidden="true"
        class="visually-hidden-text"
      >
        Terra.timeInput.labeledTextValue
      </span>
      <input
        name="time-input-2"
        type="hidden"
        value=""
      />
      <input
        aria-describedby="00000000-0000-0000-0000-000000000000-description"
        aria-disabled="false"
        aria-invalid="false"
        aria-label="Terra.timeInput.hourLabel"
        class="form-input time-input-hour"
        maxlength="2"
        name="terra-time-hour-time-input-2"
        pattern="\\\\d*"
        size="2"
        type="text"
        value=""
      />
      <span
        class="visually-hidden-text"
        id="00000000-0000-0000-0000-000000000000-description"
      >
        Terra.timeInput.hourDescriptionTwelve
      </span>
      <span
        aria-hidden="true"
        class="time-spacer"
      >
        Terra.timeInput.timeSpacer
      </span>
      <input
        aria-describedby="00000000-0000-0000-0000-000000000000-description"
        aria-disabled="false"
        aria-invalid="false"
        aria-label="Terra.timeInput.minutes"
        class="form-input time-input-minute"
        maxlength="2"
        name="terra-time-minute-time-input-2"
        pattern="\\\\d*"
        size="2"
        type="text"
        value=""
      />
      <span
        class="visually-hidden-text"
        id="00000000-0000-0000-0000-000000000000-description"
      >
        Terra.timeInput.descriptionMinute
      </span>
    </div>
    <div
      class="button-group meridiem-button-group"
    >
      <button
        aria-disabled="false"
        aria-pressed="true"
        class="button neutral button-group-button is-selected meridiem-button"
        type="button"
      >
        <span
          class="button-label text-only"
        >
          <span
            class=""
          >
            Terra.timeInput.am
          </span>
        </span>
      </button>
      <button
        aria-disabled="false"
        aria-pressed="false"
        class="button neutral button-group-button meridiem-button"
        type="button"
      >
        <span
          class="button-label text-only"
        >
          <span
            class=""
          >
            Terra.timeInput.pm
          </span>
        </span>
      </button>
    </div>
    <div
      aria-hidden="true"
      class="format-text"
    >
      Terra.timeInput.maskHourMinute
    </div>
  </div>
  <div
    class="time-input-container"
  >
    <div
      aria-label="Terra.timeInput.a11yLabelDefault"
      class="time-input"
      role="group"
    >
      <span
        aria-hidden="true"
        class="visually-hidden-text"
      >
        Terra.timeInput.labeledTextValue
      </span>
      <input
        name="time-input-3"
        type="hidden"
        value=""
      />
      <input
        aria-describedby="00000000-0000-0000-0000-000000000000-description"
        aria-disabled="false"
        aria-invalid="false"
        aria-label="Terra.timeInput.hourLabel"
        class="form-input time-input-hour"
        maxlength="2"
        name="terra-time-hour-time-input-3"
        pattern="\\\\d*"
        size="2"
        type="text"
        value=""
      />
      <span
        class="visually-hidden-text"
        id="00000000-0000-0000-0000-000000000000-description"
      >
        Terra.timeInput.hourDescriptionTwelve
      </span>
      <span
        aria-hidden="true"
        class="time-spacer"
      >
        Terra.timeInput.timeSpacer
      </span>
      <input
        aria-describedby="00000000-0000-0000-0000-000000000000-description"
        aria-disabled="false"
        aria-invalid="false"
        aria-label="Terra.timeInput.minutes"
        class="form-input time-input-minute"
        maxlength="2"
        name="terra-time-minute-time-input-3"
        pattern="\\\\d*"
        size="2"
        type="text"
        value=""
      />
      <span
        class="visually-hidden-text"
        id="00000000-0000-0000-0000-000000000000-description"
      >
        Terra.timeInput.descriptionMinute
      </span>
    </div>
    <div
      class="button-group meridiem-button-group"
    >
      <button
        aria-disabled="false"
        aria-pressed="true"
        class="button neutral button-group-button is-selected meridiem-button"
        type="button"
      >
        <span
          class="button-label text-only"
        >
          <span
            class=""
          >
            Terra.timeInput.am
          </span>
        </span>
      </button>
      <button
        aria-disabled="false"
        aria-pressed="false"
        class="button neutral button-group-button meridiem-button"
        type="button"
      >
        <span
          class="button-label text-only"
        >
          <span
            class=""
          >
            Terra.timeInput.pm
          </span>
        </span>
      </button>
    </div>
    <div
      aria-hidden="true"
      class="format-text"
    >
      Terra.timeInput.maskHourMinute
    </div>
  </div>
</div>
`;

exports[`should pass in refCallback as the ref prop of the hour input element 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={
    Object {
      "disabled": false,
      "isInvalid": false,
      "required": false,
    }
  }
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  refCallback={
    [MockFunction] {
      "calls": Array [
        Array [
          <input
            aria-describedby="00000000-0000-0000-0000-000000000000-description"
            aria-disabled="false"
            aria-invalid="false"
            aria-label="Terra.timeInput.hourLabel"
            class="form-input time-input-hour"
            maxlength="2"
            name="terra-time-hour-time-input"
            pattern="\\\\d*"
            size="2"
            type="text"
            value=""
          />,
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  required={false}
  secondAttributes={Object {}}
  showSeconds={false}
  variant="24-hour"
>
  <div
    className="time-input-container"
  >
    <div
      aria-label="Terra.timeInput.a11yLabelDefault"
      className="time-input"
      role="group"
    >
      <AccessibleValue
        readThis="Terra.timeInput.labeledTextValue"
      >
        <VisuallyHiddenText
          aria-hidden={true}
          text="Terra.timeInput.labeledTextValue"
        >
          <span
            aria-hidden={true}
            className="visually-hidden-text"
          >
            Terra.timeInput.labeledTextValue
          </span>
        </VisuallyHiddenText>
      </AccessibleValue>
      <input
        name="time-input"
        type="hidden"
        value=""
      />
      <AccessibleInput
        className="time-input-hour"
        description="Terra.timeInput.hourDescriptionTwentyFour"
        disabled={false}
        isInvalid={false}
        label="Terra.timeInput.hourLabel"
        maxLength="2"
        name="terra-time-hour-time-input"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        pattern="\\\\d*"
        refCallback={[Function]}
        required={false}
        showIsInvalid={false}
        size="2"
        type="text"
        value=""
      >
        <Input
          aria-describedby="00000000-0000-0000-0000-000000000000-description"
          aria-disabled={false}
          aria-invalid={false}
          aria-label="Terra.timeInput.hourLabel"
          className="time-input-hour"
          disabled={false}
          isIncomplete={false}
          isInvalid={false}
          maxLength="2"
          name="terra-time-hour-time-input"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          pattern="\\\\d*"
          refCallback={[Function]}
          required={false}
          size="2"
          type="text"
          value=""
        >
          <input
            aria-describedby="00000000-0000-0000-0000-000000000000-description"
            aria-disabled={false}
            aria-invalid={false}
            aria-label="Terra.timeInput.hourLabel"
            className="form-input time-input-hour"
            disabled={false}
            maxLength="2"
            name="terra-time-hour-time-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            pattern="\\\\d*"
            required={false}
            size="2"
            type="text"
            value=""
          />
        </Input>
        <VisuallyHiddenText
          id="00000000-0000-0000-0000-000000000000-description"
          text="Terra.timeInput.hourDescriptionTwentyFour"
        >
          <span
            className="visually-hidden-text"
            id="00000000-0000-0000-0000-000000000000-description"
          >
            Terra.timeInput.hourDescriptionTwentyFour
          </span>
        </VisuallyHiddenText>
      </AccessibleInput>
      <injectIntl(TimeSpacer)
        className="time-spacer"
      >
        <TimeSpacer
          className="time-spacer"
          intl={
            Object {
              "$t": [Function],
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "defaultRichTextElements": undefined,
              "fallbackOnEmptyString": true,
              "formatDate": [Function],
              "formatDateTimeRange": [Function],
              "formatDateToParts": [Function],
              "formatDisplayName": [Function],
              "formatList": [Function],
              "formatListToParts": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatNumberToParts": [Function],
              "formatPlural": [Function],
              "formatRelativeTime": [Function],
              "formatTime": [Function],
              "formatTimeToParts": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getDisplayNames": [Function],
                "getListFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralRules": [Function],
                "getRelativeTimeFormat": [Function],
              },
              "locale": "en",
              "messages": null,
              "onError": [Function],
              "onWarn": [Function],
              "textComponent": Symbol(react.fragment),
              "timeZone": undefined,
              "wrapRichTextChunksInFragment": undefined,
            }
          }
        >
          <span
            aria-hidden={true}
            className="time-spacer"
          >
            Terra.timeInput.timeSpacer
          </span>
        </TimeSpacer>
      </injectIntl(TimeSpacer)>
      <AccessibleInput
        className="time-input-minute"
        description="Terra.timeInput.descriptionMinute"
        disabled={false}
        isInvalid={false}
        label="Terra.timeInput.minutes"
        maxLength="2"
        name="terra-time-minute-time-input"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        pattern="\\\\d*"
        refCallback={[Function]}
        required={false}
        showIsInvalid={false}
        size="2"
        type="text"
        value=""
      >
        <Input
          aria-describedby="00000000-0000-0000-0000-000000000000-description"
          aria-disabled={false}
          aria-invalid={false}
          aria-label="Terra.timeInput.minutes"
          className="time-input-minute"
          disabled={false}
          isIncomplete={false}
          isInvalid={false}
          maxLength="2"
          name="terra-time-minute-time-input"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          pattern="\\\\d*"
          refCallback={[Function]}
          required={false}
          size="2"
          type="text"
          value=""
        >
          <input
            aria-describedby="00000000-0000-0000-0000-000000000000-description"
            aria-disabled={false}
            aria-invalid={false}
            aria-label="Terra.timeInput.minutes"
            className="form-input time-input-minute"
            disabled={false}
            maxLength="2"
            name="terra-time-minute-time-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            pattern="\\\\d*"
            required={false}
            size="2"
            type="text"
            value=""
          />
        </Input>
        <VisuallyHiddenText
          id="00000000-0000-0000-0000-000000000000-description"
          text="Terra.timeInput.descriptionMinute"
        >
          <span
            className="visually-hidden-text"
            id="00000000-0000-0000-0000-000000000000-description"
          >
            Terra.timeInput.descriptionMinute
          </span>
        </VisuallyHiddenText>
      </AccessibleInput>
    </div>
    <div
      aria-hidden={true}
      className="format-text"
    >
      Terra.timeInput.maskHourMinute
    </div>
  </div>
</TimeInput>
`;

exports[`should render a 12 hour clock time input with seconds input 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={
    Object {
      "disabled": true,
      "isInvalid": false,
      "required": false,
    }
  }
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  required={false}
  secondAttributes={Object {}}
  showSeconds={true}
  variant="12-hour"
/>
`;

exports[`should render a 12 hour timepicker meridiem with buttons and seconds input when viewed on a mobile device 1`] = `
<div
  class="time-input-container"
>
  <div
    aria-label="Terra.timeInput.a11yLabelDefault"
    class="time-input"
    role="group"
  >
    <span
      aria-hidden="true"
      class="visually-hidden-text"
    >
      Terra.timeInput.labeledTextValue
    </span>
    <input
      name="time-input"
      type="hidden"
      value=""
    />
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.hourLabel"
      class="form-input time-input-hour with-second"
      maxlength="2"
      name="terra-time-hour-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.hourDescriptionTwelve
    </span>
    <span
      aria-hidden="true"
      class="time-spacer"
    >
      Terra.timeInput.timeSpacer
    </span>
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.minutes"
      class="form-input time-input-minute with-second"
      maxlength="2"
      name="terra-time-minute-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.descriptionMinute
    </span>
    <span
      aria-hidden="true"
      class="time-spacer"
    >
      Terra.timeInput.timeSpacer
    </span>
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.seconds"
      class="form-input time-input-second"
      maxlength="2"
      name="terra-time-second-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.descriptionSecond
    </span>
  </div>
  <div
    class="button-group meridiem-button-group"
  >
    <button
      aria-disabled="false"
      aria-pressed="true"
      class="button neutral button-group-button is-selected meridiem-button"
      type="button"
    >
      <span
        class="button-label text-only"
      >
        <span
          class=""
        >
          Terra.timeInput.am
        </span>
      </span>
    </button>
    <button
      aria-disabled="false"
      aria-pressed="false"
      class="button neutral button-group-button meridiem-button"
      type="button"
    >
      <span
        class="button-label text-only"
      >
        <span
          class=""
        >
          Terra.timeInput.pm
        </span>
      </span>
    </button>
  </div>
  <div
    aria-hidden="true"
    class="format-text"
  >
    Terra.timeInput.maskHourMinuteSecond
  </div>
</div>
`;

exports[`should render a 12 hour timepicker meridiem with buttons when viewed on a mobile device 1`] = `
<div
  class="time-input-container"
>
  <div
    aria-label="Terra.timeInput.a11yLabelDefault"
    class="time-input"
    role="group"
  >
    <span
      aria-hidden="true"
      class="visually-hidden-text"
    >
      Terra.timeInput.labeledTextValue
    </span>
    <input
      name="time-input"
      type="hidden"
      value=""
    />
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.hourLabel"
      class="form-input time-input-hour"
      maxlength="2"
      name="terra-time-hour-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.hourDescriptionTwelve
    </span>
    <span
      aria-hidden="true"
      class="time-spacer"
    >
      Terra.timeInput.timeSpacer
    </span>
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.minutes"
      class="form-input time-input-minute"
      maxlength="2"
      name="terra-time-minute-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.descriptionMinute
    </span>
  </div>
  <div
    class="button-group meridiem-button-group"
  >
    <button
      aria-disabled="false"
      aria-pressed="true"
      class="button neutral button-group-button is-selected meridiem-button"
      type="button"
    >
      <span
        class="button-label text-only"
      >
        <span
          class=""
        >
          Terra.timeInput.am
        </span>
      </span>
    </button>
    <button
      aria-disabled="false"
      aria-pressed="false"
      class="button neutral button-group-button meridiem-button"
      type="button"
    >
      <span
        class="button-label text-only"
      >
        <span
          class=""
        >
          Terra.timeInput.pm
        </span>
      </span>
    </button>
  </div>
  <div
    aria-hidden="true"
    class="format-text"
  >
    Terra.timeInput.maskHourMinute
  </div>
</div>
`;

exports[`should render a 24 hour timepicker properly on mobile devices 1`] = `
<div
  class="time-input-container"
>
  <div
    aria-label="Terra.timeInput.a11yLabelDefault"
    class="time-input"
    role="group"
  >
    <span
      aria-hidden="true"
      class="visually-hidden-text"
    >
      Terra.timeInput.labeledTextValue
    </span>
    <input
      name="time-input"
      type="hidden"
      value=""
    />
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.hourLabel"
      class="form-input time-input-hour"
      maxlength="2"
      name="terra-time-hour-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.hourDescriptionTwentyFour
    </span>
    <span
      aria-hidden="true"
      class="time-spacer"
    >
      Terra.timeInput.timeSpacer
    </span>
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.minutes"
      class="form-input time-input-minute"
      maxlength="2"
      name="terra-time-minute-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.descriptionMinute
    </span>
  </div>
  <div
    aria-hidden="true"
    class="format-text"
  >
    Terra.timeInput.maskHourMinute
  </div>
</div>
`;

exports[`should render a 24 hour timepicker with seconds properly on mobile devices 1`] = `
<div
  class="time-input-container"
>
  <div
    aria-label="Terra.timeInput.a11yLabelDefault"
    class="time-input"
    role="group"
  >
    <span
      aria-hidden="true"
      class="visually-hidden-text"
    >
      Terra.timeInput.labeledTextValue
    </span>
    <input
      name="time-input"
      type="hidden"
      value=""
    />
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.hourLabel"
      class="form-input time-input-hour with-second"
      maxlength="2"
      name="terra-time-hour-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.hourDescriptionTwentyFour
    </span>
    <span
      aria-hidden="true"
      class="time-spacer"
    >
      Terra.timeInput.timeSpacer
    </span>
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.minutes"
      class="form-input time-input-minute with-second"
      maxlength="2"
      name="terra-time-minute-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.descriptionMinute
    </span>
    <span
      aria-hidden="true"
      class="time-spacer"
    >
      Terra.timeInput.timeSpacer
    </span>
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.seconds"
      class="form-input time-input-second"
      maxlength="2"
      name="terra-time-second-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.descriptionSecond
    </span>
  </div>
  <div
    aria-hidden="true"
    class="format-text"
  >
    Terra.timeInput.maskHourMinuteSecond
  </div>
</div>
`;

exports[`should render a default time input 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={Object {}}
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  required={false}
  secondAttributes={Object {}}
  showSeconds={false}
  variant="24-hour"
/>
`;

exports[`should render a disabled time input 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={true}
  hourAttributes={Object {}}
  inputAttributes={
    Object {
      "disabled": false,
      "isInvalid": false,
      "required": false,
    }
  }
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  required={false}
  secondAttributes={Object {}}
  showSeconds={false}
  variant="24-hour"
/>
`;

exports[`should render a time input with 12 hour clock set 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={Object {}}
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  required={false}
  secondAttributes={Object {}}
  showSeconds={false}
  variant="12-hour"
/>
`;

exports[`should render a time input with a default time 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={Object {}}
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  required={false}
  secondAttributes={Object {}}
  showSeconds={false}
  value="10:45"
  variant="24-hour"
/>
`;

exports[`should render a time input with custom attributes 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={
    Object {
      "id": "terra-time-input",
    }
  }
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  required={false}
  secondAttributes={Object {}}
  showSeconds={false}
  variant="24-hour"
/>
`;

exports[`should render a time input with onBlur 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={Object {}}
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={[Function]}
  onChange={null}
  required={false}
  secondAttributes={Object {}}
  showSeconds={false}
  variant="24-hour"
/>
`;

exports[`should render a time input with onChange 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={Object {}}
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={[Function]}
  required={false}
  secondAttributes={Object {}}
  showSeconds={false}
  variant="24-hour"
/>
`;

exports[`should render a time input with onFocus 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={Object {}}
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  onFocus={[Function]}
  required={false}
  secondAttributes={Object {}}
  showSeconds={false}
  variant="24-hour"
/>
`;

exports[`should render a time input with seconds input 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={
    Object {
      "disabled": false,
      "isInvalid": false,
      "required": false,
    }
  }
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  required={false}
  secondAttributes={Object {}}
  showSeconds={true}
  variant="24-hour"
/>
`;

exports[`should render a time input with seconds input and a value 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={
    Object {
      "disabled": false,
      "isInvalid": false,
      "required": false,
    }
  }
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  required={false}
  secondAttributes={Object {}}
  showSeconds={true}
  value="12:12:12"
  variant="24-hour"
/>
`;

exports[`should render a time input with seconds input and custom attributes 1`] = `
<TimeInput
  atMaxDate={false}
  atMinDate={false}
  disabled={false}
  hourAttributes={Object {}}
  inputAttributes={
    Object {
      "id": "terra-time-input",
    }
  }
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isIncomplete={false}
  isInvalid={false}
  isInvalidMeridiem={false}
  minuteAttributes={Object {}}
  name="time-input"
  onBlur={null}
  onChange={null}
  required={false}
  secondAttributes={
    Object {
      "id": "id-0",
    }
  }
  showSeconds={true}
  variant="24-hour"
/>
`;

exports[`should set the labels with the correct htmlFor a 24 hour timepicker properly on mobile devices 1`] = `
<div
  class="time-input-container"
>
  <div
    aria-label="Terra.timeInput.a11yLabelDefault"
    class="time-input"
    role="group"
  >
    <span
      aria-hidden="true"
      class="visually-hidden-text"
    >
      Terra.timeInput.labeledTextValue
    </span>
    <input
      name="time-input"
      type="hidden"
      value=""
    />
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.hourLabel"
      class="form-input time-input-hour"
      id="id-2"
      maxlength="2"
      name="terra-time-hour-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.hourDescriptionTwentyFour
    </span>
    <span
      aria-hidden="true"
      class="time-spacer"
    >
      Terra.timeInput.timeSpacer
    </span>
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.minutes"
      class="form-input time-input-minute"
      id="id-1"
      maxlength="2"
      name="terra-time-minute-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.descriptionMinute
    </span>
  </div>
  <div
    aria-hidden="true"
    class="format-text"
  >
    Terra.timeInput.maskHourMinute
  </div>
</div>
`;

exports[`should set the labels with the correct htmlFor a 24 hour timepicker properly on mobile devices 2`] = `
<div
  class="time-input-container"
>
  <div
    aria-label="Terra.timeInput.a11yLabelDefault"
    class="time-input"
    role="group"
  >
    <span
      aria-hidden="true"
      class="visually-hidden-text"
    >
      Terra.timeInput.labeledTextValue
    </span>
    <input
      name="time-input"
      type="hidden"
      value=""
    />
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.hourLabel"
      class="form-input time-input-hour with-second"
      id="id-2"
      maxlength="2"
      name="terra-time-hour-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.hourDescriptionTwentyFour
    </span>
    <span
      aria-hidden="true"
      class="time-spacer"
    >
      Terra.timeInput.timeSpacer
    </span>
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.minutes"
      class="form-input time-input-minute with-second"
      id="id-1"
      maxlength="2"
      name="terra-time-minute-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.descriptionMinute
    </span>
    <span
      aria-hidden="true"
      class="time-spacer"
    >
      Terra.timeInput.timeSpacer
    </span>
    <input
      aria-describedby="00000000-0000-0000-0000-000000000000-description"
      aria-disabled="false"
      aria-invalid="false"
      aria-label="Terra.timeInput.seconds"
      class="form-input time-input-second"
      id="id-0"
      maxlength="2"
      name="terra-time-second-time-input"
      pattern="\\\\d*"
      size="2"
      type="text"
      value=""
    />
    <span
      class="visually-hidden-text"
      id="00000000-0000-0000-0000-000000000000-description"
    >
      Terra.timeInput.descriptionSecond
    </span>
  </div>
  <div
    aria-hidden="true"
    class="format-text"
  >
    Terra.timeInput.maskHourMinuteSecond
  </div>
</div>
`;
