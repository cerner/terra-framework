// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UtilityButton correctly applies the theme context className 1`] = `
<ContextProvider
  value={
    Object {
      "className": "orion-fusion-theme",
      "name": undefined,
    }
  }
>
  <injectIntl(UtilityButton)
    initialSelectedKey="menu"
    menuItems={Array []}
    onChange={[MockFunction]}
    onDisclose={[MockFunction]}
    onRequestClose={[MockFunction]}
    variant="header"
  />
</ContextProvider>
`;

exports[`UtilityButton it should pass in a custom prop 1`] = `
<UtilityButton
  id="test"
  initialSelectedKey="menu"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  menuItems={Array []}
  onChange={[MockFunction]}
  onDisclose={[MockFunction]}
  onRequestClose={[MockFunction]}
  title=""
  variant="header"
/>
`;

exports[`UtilityButton should render with a title 1`] = `
<UtilityButton
  initialSelectedKey="menu"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  menuItems={Array []}
  onChange={[MockFunction]}
  onDisclose={[MockFunction]}
  onRequestClose={[MockFunction]}
  title="name"
  variant="header"
/>
`;

exports[`UtilityButton should render with an accessory 1`] = `
<UtilityButton
  accessory={<image />}
  initialSelectedKey="menu"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  menuItems={Array []}
  onChange={[MockFunction]}
  onDisclose={[MockFunction]}
  onRequestClose={[MockFunction]}
  title=""
  variant="header"
/>
`;

exports[`UtilityButton should render with default props 1`] = `
<UtilityButton
  initialSelectedKey="menu"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  menuItems={Array []}
  onChange={[MockFunction]}
  onDisclose={[MockFunction]}
  onRequestClose={[MockFunction]}
  title=""
  variant="header"
/>
`;

exports[`UtilityButton should render with menu items 1`] = `
<UtilityButton
  initialSelectedKey="menu"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  menuItems={
    Array [
      Object {
        "childKeys": Array [
          "item-1",
          "item-2",
          "item-3",
          "item-4",
          "item-5",
          "item-6",
          "item-7",
          "item-8",
        ],
        "contentLocation": "body",
        "isSelectable": false,
        "isSelected": false,
        "key": "menu",
        "metaData": Object {
          "otherInformation": "Other Information",
        },
        "title": "Menu",
      },
      Object {
        "childKeys": Array [
          "item-1.1",
        ],
        "content": undefined,
        "contentLocation": "body",
        "isSelectable": false,
        "isSelected": false,
        "key": "item-1",
        "title": "Item 1",
      },
      Object {
        "childKeys": Array [
          "item-2.1",
          "item-2.2",
        ],
        "id": "test-item-2",
        "isSelectable": false,
        "isSelected": false,
        "key": "item-2",
        "title": "Item 2",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "footer",
        "isSelectable": false,
        "isSelected": false,
        "key": "item-3",
        "title": "item-3",
      },
      Object {
        "childKeys": Array [
          "item-4.1",
          "item-4.2",
          "item-4.3",
        ],
        "contentLocation": "body",
        "isSelectable": false,
        "isSelected": false,
        "key": "item-4",
        "title": "Item 4",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "body",
        "isSelectable": false,
        "isSelected": false,
        "key": "item-1.1",
        "metaData": Object {
          "otherInformation": "Other Information",
        },
        "title": "Item 1.1",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "body",
        "isSelectable": false,
        "isSelected": false,
        "key": "item-2.1",
        "title": "Item 2.1",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "body",
        "isSelectable": false,
        "isSelected": false,
        "key": "item-2.2",
        "title": "Item 2.2",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "body",
        "isSelectable": false,
        "isSelected": false,
        "key": "item-4.1",
        "title": "Item 4.1",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "body",
        "isSelectable": false,
        "isSelected": false,
        "key": "item-4.2",
        "title": "Item 4.2",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "body",
        "isSelectable": false,
        "isSelected": false,
        "key": "item-4.3",
        "title": "Item 4.3",
      },
      Object {
        "childKeys": Array [
          "item-5.1",
          "item-5.2",
        ],
        "contentLocation": "body",
        "isSelectable": false,
        "isSelected": false,
        "key": "item-5",
        "title": "Item 5",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "body",
        "isSelectable": true,
        "isSelected": false,
        "key": "item-5.1",
        "title": "Item 5.1",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "body",
        "isSelectable": true,
        "isSelected": false,
        "key": "item-5.2",
        "title": "Item 5.2",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "footer",
        "isSelectable": true,
        "isSelected": false,
        "key": "item-6",
        "title": "Item 6",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "body",
        "id": "test-item-7",
        "isSelectable": false,
        "isSelected": true,
        "key": "item-7",
        "title": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua",
      },
      Object {
        "childKeys": Array [],
        "contentLocation": "body",
        "id": "test-item-8",
        "isReadOnly": true,
        "isSelectable": false,
        "isSelected": false,
        "key": "item-8",
        "title": "Read Only Item",
      },
    ]
  }
  onChange={[MockFunction]}
  onDisclose={[MockFunction]}
  onRequestClose={[MockFunction]}
  title=""
  variant="header"
/>
`;
