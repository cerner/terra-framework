// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UtilityMenu correctly applies the theme context className 1`] = `
<ContextProvider
  value={
    Object {
      "className": "orion-fusion-theme",
      "name": undefined,
    }
  }
>
  <injectIntl(UtilityMenu)
    initialSelectedKey="key"
    menuItems={
      Array [
        Object {
          "childKeys": Array [],
          "contentLocation": "footer",
          "isSelected": false,
          "key": "key",
          "title": "title",
        },
      ]
    }
    onChange={[MockFunction]}
    onDisclose={[MockFunction]}
    variant="header"
  />
</ContextProvider>
`;

exports[`UtilityMenu it should pass in a custom prop 1`] = `
<UtilityMenu
  id="test"
  initialSelectedKey="key"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  menuItems={
    Array [
      Object {
        "childKeys": Array [],
        "contentLocation": "footer",
        "isSelected": false,
        "key": "key",
        "title": "title",
      },
    ]
  }
  menuRole="navigation"
  onChange={[MockFunction]}
  onDisclose={[MockFunction]}
  variant="header"
/>
`;

exports[`UtilityMenu it should render with a read-only menu item 1`] = `
<UtilityMenu
  id="test"
  initialSelectedKey="key"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  menuItems={
    Array [
      Object {
        "childKeys": Array [],
        "contentLocation": "footer",
        "isReadOnly": true,
        "key": "key",
        "title": "title",
      },
    ]
  }
  menuRole="navigation"
  onChange={[MockFunction]}
  onDisclose={[MockFunction]}
  variant="header"
/>
`;

exports[`UtilityMenu should render with a user specified role 1`] = `
<UtilityMenu
  id="test"
  initialSelectedKey="key"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  menuItems={
    Array [
      Object {
        "childKeys": Array [],
        "contentLocation": "footer",
        "isSelected": false,
        "key": "key",
        "title": "title",
      },
    ]
  }
  menuRole="menu"
  onChange={[MockFunction]}
  onDisclose={[MockFunction]}
  variant="header"
/>
`;

exports[`UtilityMenu should render with default props 1`] = `
<UtilityMenu
  initialSelectedKey="key"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  menuItems={
    Array [
      Object {
        "childKeys": Array [],
        "contentLocation": "footer",
        "isSelected": false,
        "key": "key",
        "title": "title",
      },
    ]
  }
  menuRole="navigation"
  onChange={[MockFunction]}
  onDisclose={[MockFunction]}
  variant="header"
/>
`;

exports[`UtilityMenu should render with isHeightBounded 1`] = `
<UtilityMenu
  initialSelectedKey="key"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  isHeightBounded={true}
  menuItems={
    Array [
      Object {
        "childKeys": Array [],
        "contentLocation": "footer",
        "isSelected": false,
        "key": "key",
        "title": "title",
      },
    ]
  }
  menuRole="navigation"
  onChange={[MockFunction]}
  onDisclose={[MockFunction]}
  variant="header"
/>
`;

exports[`UtilityMenu should render with onRequestClose set 1`] = `
<UtilityMenu
  initialSelectedKey="key"
  intl={
    Object {
      "$t": [Function],
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "defaultRichTextElements": undefined,
      "fallbackOnEmptyString": true,
      "formatDate": [Function],
      "formatDateTimeRange": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatListToParts": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "onError": [Function],
      "onWarn": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
      "wrapRichTextChunksInFragment": undefined,
    }
  }
  menuItems={
    Array [
      Object {
        "childKeys": Array [],
        "contentLocation": "footer",
        "isSelected": false,
        "key": "key",
        "title": "title",
      },
    ]
  }
  menuRole="navigation"
  onChange={[MockFunction]}
  onDisclose={[MockFunction]}
  onRequestClose={[MockFunction]}
  variant="header"
/>
`;
