// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PopupContent Prop Tests with default props correctly applies the theme context className 1`] = `
<ThemeContextProvider
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  theme={
    {
      "className": "orion-fusion-theme",
    }
  }
>
  <PopupContent
    classNameInner={null}
    contentHeight={640}
    contentHeightMax={-1}
    contentWidth={640}
    contentWidthMax={-1}
    isFocusedDisabled={false}
    isHeaderDisabled={false}
    isHeightAutomatic={false}
    isMenu={false}
    isWidthAutomatic={false}
    onRequestClose={[MockFunction]}
    onResize={[MockFunction]}
    popupContentRole="dialog"
  >
    <FocusTrap
      _createFocusTrap={[Function]}
      active={true}
      focusTrapOptions={
        {
          "clickOutsideDeactivates": true,
          "returnFocusOnDeactivate": true,
        }
      }
      paused={false}
    >
      <div>
        <OnClickOutside(HookshotContent)
          className="content orion-fusion-theme"
          data-terra-popup-content={true}
          eventTypes={
            [
              "mousedown",
              "touchstart",
            ]
          }
          excludeScrollbar={false}
          onEsc={[MockFunction]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onResize={[Function]}
          outsideClickIgnoreClass="ignore-react-onclickoutside"
          preventDefault={false}
          role="dialog"
          stopPropagation={false}
        >
          <HookshotContent
            className="content orion-fusion-theme"
            data-terra-popup-content={true}
            disableOnClickOutside={[Function]}
            enableOnClickOutside={[Function]}
            eventTypes={
              [
                "mousedown",
                "touchstart",
              ]
            }
            onEsc={[MockFunction]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onResize={[Function]}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            role="dialog"
            stopPropagation={false}
          >
            <div
              className="content content orion-fusion-theme"
              data-terra-popup-content={true}
              onFocus={[Function]}
              onKeyDown={[Function]}
              role="dialog"
            >
              <div
                className="inner"
                style={
                  {
                    "height": "640px",
                    "width": "640px",
                  }
                }
              >
                <ContentContainer
                  fill={false}
                  header={
                    <div
                      className="header"
                    >
                      <FormattedMessage
                        id="Terra.popup.header.close"
                        values={{}}
                      >
                        [Function]
                      </FormattedMessage>
                    </div>
                  }
                  setFocusOnContainer={false}
                >
                  <div
                    className="content-container-static"
                  >
                    <div
                      className="header"
                    >
                      <div
                        className="header"
                      >
                        <FormattedMessage
                          id="Terra.popup.header.close"
                          values={{}}
                        >
                          <Button
                            data-terra-popup-header-button={true}
                            icon={
                              <span
                                className="close-icon"
                              />
                            }
                            isBlock={false}
                            isCompact={false}
                            isDisabled={false}
                            isIconOnly={true}
                            isLeftAligned={false}
                            isReversed={false}
                            onClick={[MockFunction]}
                            text="Terra.popup.header.close"
                            type="button"
                            variant="utility"
                          >
                            <button
                              aria-disabled={false}
                              aria-label="Terra.popup.header.close"
                              className="button utility orion-fusion-theme"
                              data-terra-popup-header-button={true}
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              title="Terra.popup.header.close"
                              type="button"
                            >
                              <span
                                className="button-label-win icon-only"
                              >
                                <span
                                  className="icon"
                                >
                                  <span
                                    className="close-icon icon-svg"
                                  />
                                </span>
                              </span>
                            </button>
                          </Button>
                        </FormattedMessage>
                      </div>
                    </div>
                    <div
                      className="main"
                    >
                      <Scroll
                        className="normalizer orion-fusion-theme"
                      >
                        <div
                          className="scroll normalizer orion-fusion-theme"
                        >
                          <div
                            key=".0"
                          >
                            children node(s)
                          </div>
                        </div>
                      </Scroll>
                    </div>
                  </div>
                </ContentContainer>
              </div>
            </div>
          </HookshotContent>
        </OnClickOutside(HookshotContent)>
      </div>
    </FocusTrap>
  </PopupContent>
</ThemeContextProvider>
`;

exports[`PopupContent Prop Tests with default props matches the snapshot 1`] = `
<FocusTrap
  _createFocusTrap={[Function]}
  active={true}
  focusTrapOptions={
    {
      "clickOutsideDeactivates": true,
      "returnFocusOnDeactivate": true,
    }
  }
  paused={false}
>
  <div>
    <OnClickOutside(HookshotContent)
      className="content"
      data-terra-popup-content={true}
      eventTypes={
        [
          "mousedown",
          "touchstart",
        ]
      }
      excludeScrollbar={false}
      intl={
        {
          "defaultFormats": {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": {},
          "formatters": {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      onEsc={[MockFunction]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onResize={[Function]}
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      role="dialog"
      stopPropagation={false}
    >
      <div
        className="inner"
        style={
          {
            "height": "640px",
            "width": "640px",
          }
        }
      >
        <ContentContainer
          fill={false}
          header={
            <div
              className="header"
            >
              <FormattedMessage
                id="Terra.popup.header.close"
                values={{}}
              >
                [Function]
              </FormattedMessage>
            </div>
          }
          setFocusOnContainer={false}
        >
          <div
            key=".0"
          >
            children node(s)
          </div>
        </ContentContainer>
      </div>
    </OnClickOutside(HookshotContent)>
  </div>
</FocusTrap>
`;

exports[`PopupContent Prop Tests with header matches the mount snapshot 1`] = `
<PopupContent
  classNameInner={null}
  contentHeight={640}
  contentHeightMax={640}
  contentWidth={640}
  contentWidthMax={640}
  intl={
    {
      "defaultFormats": {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": {},
      "formatters": {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isFocusedDisabled={false}
  isHeaderDisabled={false}
  isHeightAutomatic={false}
  isMenu={false}
  isWidthAutomatic={false}
  onRequestClose={[MockFunction]}
  onResize={[MockFunction]}
  popupContentRole="dialog"
  refCallback={
    [MockFunction] {
      "calls": [
        [
          <div
            class="content content"
            data-terra-popup-content="true"
            intl="[object Object]"
            role="dialog"
          >
            <div
              class="inner is-full-screen"
              style="height: 640px; width: 640px;"
            >
              <div
                class="content-container-static"
              >
                <div
                  class="header"
                >
                  <div
                    class="header"
                  >
                    <button
                      aria-disabled="false"
                      aria-label="Terra.popup.header.close"
                      class="button utility"
                      data-terra-popup-header-button="true"
                      title="Terra.popup.header.close"
                      type="button"
                    >
                      <span
                        class="button-label-win icon-only"
                      >
                        <span
                          class="icon"
                        >
                          <span
                            class="close-icon icon-svg"
                          />
                        </span>
                      </span>
                    </button>
                  </div>
                </div>
                <div
                  class="main"
                >
                  <div
                    class="scroll normalizer"
                  >
                    <div>
                      children node(s)
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
>
  <FocusTrap
    _createFocusTrap={[Function]}
    active={true}
    focusTrapOptions={
      {
        "clickOutsideDeactivates": true,
        "returnFocusOnDeactivate": true,
      }
    }
    paused={false}
  >
    <div>
      <OnClickOutside(HookshotContent)
        className="content"
        data-terra-popup-content={true}
        eventTypes={
          [
            "mousedown",
            "touchstart",
          ]
        }
        excludeScrollbar={false}
        intl={
          {
            "defaultFormats": {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": {},
            "formatters": {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": null,
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
        onEsc={[MockFunction]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onResize={[Function]}
        outsideClickIgnoreClass="ignore-react-onclickoutside"
        preventDefault={false}
        refCallback={
          [MockFunction] {
            "calls": [
              [
                <div
                  class="content content"
                  data-terra-popup-content="true"
                  intl="[object Object]"
                  role="dialog"
                >
                  <div
                    class="inner is-full-screen"
                    style="height: 640px; width: 640px;"
                  >
                    <div
                      class="content-container-static"
                    >
                      <div
                        class="header"
                      >
                        <div
                          class="header"
                        >
                          <button
                            aria-disabled="false"
                            aria-label="Terra.popup.header.close"
                            class="button utility"
                            data-terra-popup-header-button="true"
                            title="Terra.popup.header.close"
                            type="button"
                          >
                            <span
                              class="button-label-win icon-only"
                            >
                              <span
                                class="icon"
                              >
                                <span
                                  class="close-icon icon-svg"
                                />
                              </span>
                            </span>
                          </button>
                        </div>
                      </div>
                      <div
                        class="main"
                      >
                        <div
                          class="scroll normalizer"
                        >
                          <div>
                            children node(s)
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        role="dialog"
        stopPropagation={false}
      >
        <HookshotContent
          className="content"
          data-terra-popup-content={true}
          disableOnClickOutside={[Function]}
          enableOnClickOutside={[Function]}
          eventTypes={
            [
              "mousedown",
              "touchstart",
            ]
          }
          intl={
            {
              "defaultFormats": {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": {},
              "formatters": {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": null,
              "now": [Function],
              "onError": [Function],
              "textComponent": "span",
              "timeZone": null,
            }
          }
          onEsc={[MockFunction]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onResize={[Function]}
          outsideClickIgnoreClass="ignore-react-onclickoutside"
          preventDefault={false}
          refCallback={
            [MockFunction] {
              "calls": [
                [
                  <div
                    class="content content"
                    data-terra-popup-content="true"
                    intl="[object Object]"
                    role="dialog"
                  >
                    <div
                      class="inner is-full-screen"
                      style="height: 640px; width: 640px;"
                    >
                      <div
                        class="content-container-static"
                      >
                        <div
                          class="header"
                        >
                          <div
                            class="header"
                          >
                            <button
                              aria-disabled="false"
                              aria-label="Terra.popup.header.close"
                              class="button utility"
                              data-terra-popup-header-button="true"
                              title="Terra.popup.header.close"
                              type="button"
                            >
                              <span
                                class="button-label-win icon-only"
                              >
                                <span
                                  class="icon"
                                >
                                  <span
                                    class="close-icon icon-svg"
                                  />
                                </span>
                              </span>
                            </button>
                          </div>
                        </div>
                        <div
                          class="main"
                        >
                          <div
                            class="scroll normalizer"
                          >
                            <div>
                              children node(s)
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>,
                ],
              ],
              "results": [
                {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          role="dialog"
          stopPropagation={false}
        >
          <div
            className="content content"
            data-terra-popup-content={true}
            intl={
              {
                "defaultFormats": {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": {},
                "formatters": {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            onFocus={[Function]}
            onKeyDown={[Function]}
            role="dialog"
          >
            <div
              className="inner is-full-screen"
              style={
                {
                  "height": "640px",
                  "width": "640px",
                }
              }
            >
              <ContentContainer
                fill={false}
                header={
                  <div
                    className="header"
                  >
                    <FormattedMessage
                      id="Terra.popup.header.close"
                      values={{}}
                    >
                      [Function]
                    </FormattedMessage>
                  </div>
                }
                setFocusOnContainer={false}
              >
                <div
                  className="content-container-static"
                >
                  <div
                    className="header"
                  >
                    <div
                      className="header"
                    >
                      <FormattedMessage
                        id="Terra.popup.header.close"
                        values={{}}
                      >
                        <Button
                          data-terra-popup-header-button={true}
                          icon={
                            <span
                              className="close-icon"
                            />
                          }
                          isBlock={false}
                          isCompact={false}
                          isDisabled={false}
                          isIconOnly={true}
                          isLeftAligned={false}
                          isReversed={false}
                          onClick={[MockFunction]}
                          text="Terra.popup.header.close"
                          type="button"
                          variant="utility"
                        >
                          <button
                            aria-disabled={false}
                            aria-label="Terra.popup.header.close"
                            className="button utility"
                            data-terra-popup-header-button={true}
                            disabled={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            title="Terra.popup.header.close"
                            type="button"
                          >
                            <span
                              className="button-label-win icon-only"
                            >
                              <span
                                className="icon"
                              >
                                <span
                                  className="close-icon icon-svg"
                                />
                              </span>
                            </span>
                          </button>
                        </Button>
                      </FormattedMessage>
                    </div>
                  </div>
                  <div
                    className="main"
                  >
                    <Scroll
                      className="normalizer"
                    >
                      <div
                        className="scroll normalizer"
                      >
                        <div
                          key=".0"
                        >
                          children node(s)
                        </div>
                      </div>
                    </Scroll>
                  </div>
                </div>
              </ContentContainer>
            </div>
          </div>
        </HookshotContent>
      </OnClickOutside(HookshotContent)>
    </div>
  </FocusTrap>
</PopupContent>
`;

exports[`PopupContent Prop Tests with header matches the shallow snapshot 1`] = `
<FocusTrap
  _createFocusTrap={[Function]}
  active={true}
  focusTrapOptions={
    {
      "clickOutsideDeactivates": true,
      "returnFocusOnDeactivate": true,
    }
  }
  paused={false}
>
  <div>
    <OnClickOutside(HookshotContent)
      className="content"
      data-terra-popup-content={true}
      eventTypes={
        [
          "mousedown",
          "touchstart",
        ]
      }
      excludeScrollbar={false}
      intl={
        {
          "defaultFormats": {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": {},
          "formatters": {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      onEsc={[MockFunction]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onResize={[Function]}
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      refCallback={[MockFunction]}
      role="dialog"
      stopPropagation={false}
    >
      <div
        className="inner is-full-screen"
        style={
          {
            "height": "640px",
            "width": "640px",
          }
        }
      >
        <ContentContainer
          fill={false}
          header={
            <div
              className="header"
            >
              <FormattedMessage
                id="Terra.popup.header.close"
                values={{}}
              >
                [Function]
              </FormattedMessage>
            </div>
          }
          setFocusOnContainer={false}
        >
          <div
            key=".0"
          >
            children node(s)
          </div>
        </ContentContainer>
      </div>
    </OnClickOutside(HookshotContent)>
  </div>
</FocusTrap>
`;

exports[`PopupContentExports should match the snapshot 1`] = `
{
  "cornerSize": 3,
  "default": [Function],
}
`;
