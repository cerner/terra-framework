// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tabs correctly applies the theme context className 1`] = `
<ThemeContextProvider
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  theme={
    Object {
      "className": "orion-fusion-theme",
    }
  }
>
  <Tabs
    fill={false}
    isClosable={false}
    isDraggable={false}
    setFocusOnContent={false}
    tabFill={false}
    variant="modular-left-aligned"
    verticalOrientation={false}
  >
    <CommonTabs
      activeItemKey="default"
      isDraggable={false}
      onClosingTab={[Function]}
      onRequestActivate={[Function]}
      variant="modular-left-aligned"
      verticalOrientation={false}
    >
      <div
        className="workspace"
        role="none"
      >
        <div
          aria-hidden={true}
          className="body-shadow-container"
        >
          <div
            className="body-shadow"
          />
        </div>
        <div
          className="tab-header"
          role="none"
        >
          <InjectIntl(Tabs)
            isDraggable={false}
            onTabStateChange={[Function]}
            tabData={
              Array [
                Object {
                  "associatedPanelId": "terra-common-tabs-default-panel",
                  "customDisplay": undefined,
                  "icon": undefined,
                  "id": "terra-common-tabs-default",
                  "isClosable": false,
                  "isDisabled": false,
                  "isIconOnly": false,
                  "isSelected": true,
                  "itemKey": "default",
                  "label": "Default",
                  "metaData": undefined,
                  "onSelect": [Function],
                  "showIcon": false,
                },
              ]
            }
            variant="modular-left-aligned"
            verticalOrientation={false}
          >
            <Tabs
              intl={
                Object {
                  "defaultFormats": Object {},
                  "defaultLocale": "en",
                  "formatDate": [Function],
                  "formatHTMLMessage": [Function],
                  "formatMessage": [Function],
                  "formatNumber": [Function],
                  "formatPlural": [Function],
                  "formatRelative": [Function],
                  "formatTime": [Function],
                  "formats": Object {},
                  "formatters": Object {
                    "getDateTimeFormat": [Function],
                    "getMessageFormat": [Function],
                    "getNumberFormat": [Function],
                    "getPluralFormat": [Function],
                    "getRelativeFormat": [Function],
                  },
                  "locale": "en",
                  "messages": null,
                  "now": [Function],
                  "onError": [Function],
                  "textComponent": "span",
                  "timeZone": null,
                }
              }
              isDraggable={false}
              onTabStateChange={[Function]}
              tabData={
                Array [
                  Object {
                    "associatedPanelId": "terra-common-tabs-default-panel",
                    "customDisplay": undefined,
                    "icon": undefined,
                    "id": "terra-common-tabs-default",
                    "isClosable": false,
                    "isDisabled": false,
                    "isIconOnly": false,
                    "isSelected": true,
                    "itemKey": "default",
                    "label": "Default",
                    "metaData": undefined,
                    "onSelect": [Function],
                    "showIcon": false,
                  },
                ]
              }
              variant="modular-left-aligned"
              verticalOrientation={false}
            >
              <div
                className="container orion-fusion-theme"
              >
                <div
                  aria-orientation="horizontal"
                  aria-owns=""
                  className="tab-container orion-fusion-theme"
                  data-tab-is-calculating="true"
                  role="tablist"
                >
                  <InjectIntl(Tab)
                    associatedPanelId="terra-common-tabs-default-panel"
                    hiddenStartIndex={1}
                    id="terra-common-tabs-default"
                    index={0}
                    isClosable={false}
                    isDisabled={false}
                    isDraggable={false}
                    isIconOnly={false}
                    isSelected={true}
                    itemKey="default"
                    key="terra-common-tabs-default"
                    label="Default"
                    onClosingTab={[Function]}
                    onSelect={[Function]}
                    setDropdownOpen={[Function]}
                    showIcon={false}
                    tabIds={
                      Array [
                        "terra-common-tabs-default",
                      ]
                    }
                    variant="modular-left-aligned"
                    verticalOrientation={false}
                    zIndex={1}
                  >
                    <Tab
                      associatedPanelId="terra-common-tabs-default-panel"
                      hiddenStartIndex={1}
                      id="terra-common-tabs-default"
                      index={0}
                      intl={
                        Object {
                          "defaultFormats": Object {},
                          "defaultLocale": "en",
                          "formatDate": [Function],
                          "formatHTMLMessage": [Function],
                          "formatMessage": [Function],
                          "formatNumber": [Function],
                          "formatPlural": [Function],
                          "formatRelative": [Function],
                          "formatTime": [Function],
                          "formats": Object {},
                          "formatters": Object {
                            "getDateTimeFormat": [Function],
                            "getMessageFormat": [Function],
                            "getNumberFormat": [Function],
                            "getPluralFormat": [Function],
                            "getRelativeFormat": [Function],
                          },
                          "locale": "en",
                          "messages": null,
                          "now": [Function],
                          "onError": [Function],
                          "textComponent": "span",
                          "timeZone": null,
                        }
                      }
                      isClosable={false}
                      isDisabled={false}
                      isDraggable={false}
                      isIconOnly={false}
                      isSelected={true}
                      itemKey="default"
                      label="Default"
                      onClosingTab={[Function]}
                      onSelect={[Function]}
                      setDropdownOpen={[Function]}
                      showIcon={false}
                      tabIds={
                        Array [
                          "terra-common-tabs-default",
                        ]
                      }
                      variant="modular-left-aligned"
                      verticalOrientation={false}
                      zIndex={1}
                    >
                      <div
                        aria-controls="terra-common-tabs-default-panel"
                        aria-disabled={false}
                        aria-label="Default"
                        aria-selected={true}
                        className="tab is-active is-text-only orion-fusion-theme"
                        data-focus-styles-enabled={true}
                        data-terra-tabs-show-focus-styles={true}
                        id="terra-common-tabs-default"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        onMouseDown={[Function]}
                        role="tab"
                        style={
                          Object {
                            "zIndex": 1,
                          }
                        }
                        tabIndex={0}
                        title="Default"
                      >
                        <div
                          className="inner"
                        >
                          <span
                            className="label"
                          >
                            Default
                          </span>
                        </div>
                      </div>
                    </Tab>
                  </InjectIntl(Tab)>
                  <OnClickOutside(InjectIntl(TabDropDown))
                    eventTypes={
                      Array [
                        "mousedown",
                        "touchstart",
                      ]
                    }
                    excludeScrollbar={false}
                    isOpen={false}
                    onBlur={[Function]}
                    onFocus={[Function]}
                    onRequestClose={[Function]}
                    outsideClickIgnoreClass="ignore-react-onclickoutside"
                    preventDefault={false}
                    refCallback={[Function]}
                    stopPropagation={false}
                  >
                    <InjectIntl(TabDropDown)
                      disableOnClickOutside={[Function]}
                      enableOnClickOutside={[Function]}
                      eventTypes={
                        Array [
                          "mousedown",
                          "touchstart",
                        ]
                      }
                      isOpen={false}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onRequestClose={[Function]}
                      outsideClickIgnoreClass="ignore-react-onclickoutside"
                      preventDefault={false}
                      refCallback={[Function]}
                      stopPropagation={false}
                    >
                      <TabDropDown
                        disableOnClickOutside={[Function]}
                        enableOnClickOutside={[Function]}
                        eventTypes={
                          Array [
                            "mousedown",
                            "touchstart",
                          ]
                        }
                        intl={
                          Object {
                            "defaultFormats": Object {},
                            "defaultLocale": "en",
                            "formatDate": [Function],
                            "formatHTMLMessage": [Function],
                            "formatMessage": [Function],
                            "formatNumber": [Function],
                            "formatPlural": [Function],
                            "formatRelative": [Function],
                            "formatTime": [Function],
                            "formats": Object {},
                            "formatters": Object {
                              "getDateTimeFormat": [Function],
                              "getMessageFormat": [Function],
                              "getNumberFormat": [Function],
                              "getPluralFormat": [Function],
                              "getRelativeFormat": [Function],
                            },
                            "locale": "en",
                            "messages": null,
                            "now": [Function],
                            "onError": [Function],
                            "textComponent": "span",
                            "timeZone": null,
                          }
                        }
                        isOpen={false}
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onRequestClose={[Function]}
                        outsideClickIgnoreClass="ignore-react-onclickoutside"
                        preventDefault={false}
                        refCallback={[Function]}
                        stopPropagation={false}
                      >
                        <div
                          className="drop-down orion-fusion-theme"
                          onMouseDown={[Function]}
                          role="none"
                        />
                      </TabDropDown>
                    </InjectIntl(TabDropDown)>
                  </OnClickOutside(InjectIntl(TabDropDown))>
                </div>
                <div
                  className="divcontainer orion-fusion-theme"
                />
              </div>
            </Tabs>
          </InjectIntl(Tabs)>
        </div>
        <div
          className="body orion-fusion-theme"
          role="none"
        >
          <CommonTabItem
            associatedPanelId="terra-common-tabs-default-panel"
            id="terra-common-tabs-default"
            isActive={true}
            isClosable={false}
            isDisabled={false}
            isIconOnly={false}
            itemKey="default"
            key=".$default"
            label="Default"
            portalElement={
              <div
                role="none"
                style="position: relative; height: 100%; width: 100%;"
              >
                <div
                  class="panel orion-fusion-theme"
                  role="none"
                >
                  <div
                    class="panel-header"
                    data-testid="workspace-content-heading"
                    role="none"
                  />
                  <div
                    class="panel-content"
                    role="none"
                  >
                    <div
                      aria-labelledby="terra-common-tabs-default"
                      class="panel-overflow"
                      data-application-overflow-container="true"
                      id="terra-common-tabs-default-panel"
                      role="tabpanel"
                      tabindex="-1"
                    >
                      <div
                        class="outer-container"
                        data-testid="dynamic-overlay-container"
                        tabindex="-1"
                      >
                        <div
                          class="content-container"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
            render={[Function]}
            showIcon={false}
            variant="modular-left-aligned"
          >
            <Portal
              containerInfo={
                <div
                  role="none"
                  style="position: relative; height: 100%; width: 100%;"
                >
                  <div
                    class="panel orion-fusion-theme"
                    role="none"
                  >
                    <div
                      class="panel-header"
                      data-testid="workspace-content-heading"
                      role="none"
                    />
                    <div
                      class="panel-content"
                      role="none"
                    >
                      <div
                        aria-labelledby="terra-common-tabs-default"
                        class="panel-overflow"
                        data-application-overflow-container="true"
                        id="terra-common-tabs-default-panel"
                        role="tabpanel"
                        tabindex="-1"
                      >
                        <div
                          class="outer-container"
                          data-testid="dynamic-overlay-container"
                          tabindex="-1"
                        >
                          <div
                            class="content-container"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              }
            >
              <CommonTabContent
                setFocusOnContent={false}
                variant="framework"
              >
                <div
                  className="panel orion-fusion-theme"
                  role="none"
                >
                  <div
                    className="panel-header"
                    data-testid="workspace-content-heading"
                    role="none"
                  />
                  <div
                    className="panel-content"
                    role="none"
                  >
                    <div
                      aria-labelledby="terra-common-tabs-default"
                      className="panel-overflow"
                      data-application-overflow-container={true}
                      id="terra-common-tabs-default-panel"
                      role="tabpanel"
                      tabIndex={-1}
                    >
                      <DynamicOverlayContainer
                        overlays={Array []}
                      >
                        <div
                          className="outer-container"
                          data-testid="dynamic-overlay-container"
                          tabIndex="-1"
                        >
                          <div
                            className="content-container"
                          />
                        </div>
                      </DynamicOverlayContainer>
                    </div>
                  </div>
                </div>
              </CommonTabContent>
            </Portal>
          </CommonTabItem>
        </div>
      </div>
    </CommonTabs>
  </Tabs>
</ThemeContextProvider>
`;

exports[`Tabs should not render add icon if onSelectAddButton is passed as null 1`] = `
<Tabs
  fill={false}
  id="application-id"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isClosable={false}
  isDraggable={false}
  setFocusOnContent={false}
  tabFill={false}
  verticalOrientation={false}
>
  <CommonTabs
    activeItemKey="default"
    id="application-id"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    isDraggable={false}
    onClosingTab={[Function]}
    onRequestActivate={[Function]}
    variant="framework"
    verticalOrientation={false}
  >
    <div
      className="structural"
      role="none"
    >
      <div
        aria-hidden={true}
      >
        <div />
      </div>
      <div
        className="tab-header"
        role="none"
      >
        <InjectIntl(Tabs)
          isDraggable={false}
          onTabStateChange={[Function]}
          tabData={
            Array [
              Object {
                "associatedPanelId": "application-id-default-panel",
                "customDisplay": undefined,
                "icon": undefined,
                "id": "application-id-default",
                "isClosable": false,
                "isDisabled": false,
                "isIconOnly": false,
                "isSelected": true,
                "itemKey": "default",
                "label": "Default",
                "metaData": undefined,
                "onSelect": [Function],
                "showIcon": false,
              },
            ]
          }
          variant="framework"
          verticalOrientation={false}
        >
          <Tabs
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            isDraggable={false}
            onTabStateChange={[Function]}
            tabData={
              Array [
                Object {
                  "associatedPanelId": "application-id-default-panel",
                  "customDisplay": undefined,
                  "icon": undefined,
                  "id": "application-id-default",
                  "isClosable": false,
                  "isDisabled": false,
                  "isIconOnly": false,
                  "isSelected": true,
                  "itemKey": "default",
                  "label": "Default",
                  "metaData": undefined,
                  "onSelect": [Function],
                  "showIcon": false,
                },
              ]
            }
            variant="framework"
            verticalOrientation={false}
          >
            <div
              className="container"
            >
              <div
                aria-orientation="horizontal"
                aria-owns=""
                className="tab-container"
                data-tab-is-calculating="true"
                role="tablist"
              >
                <InjectIntl(Tab)
                  associatedPanelId="application-id-default-panel"
                  hiddenStartIndex={1}
                  id="application-id-default"
                  index={0}
                  isClosable={false}
                  isDisabled={false}
                  isDraggable={false}
                  isIconOnly={false}
                  isSelected={true}
                  itemKey="default"
                  key="application-id-default"
                  label="Default"
                  onClosingTab={[Function]}
                  onSelect={[Function]}
                  setDropdownOpen={[Function]}
                  showIcon={false}
                  tabIds={
                    Array [
                      "application-id-default",
                    ]
                  }
                  variant="framework"
                  verticalOrientation={false}
                  zIndex={1}
                >
                  <Tab
                    associatedPanelId="application-id-default-panel"
                    hiddenStartIndex={1}
                    id="application-id-default"
                    index={0}
                    intl={
                      Object {
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatHTMLMessage": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatPlural": [Function],
                        "formatRelative": [Function],
                        "formatTime": [Function],
                        "formats": Object {},
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralFormat": [Function],
                          "getRelativeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": null,
                        "now": [Function],
                        "onError": [Function],
                        "textComponent": "span",
                        "timeZone": null,
                      }
                    }
                    isClosable={false}
                    isDisabled={false}
                    isDraggable={false}
                    isIconOnly={false}
                    isSelected={true}
                    itemKey="default"
                    label="Default"
                    onClosingTab={[Function]}
                    onSelect={[Function]}
                    setDropdownOpen={[Function]}
                    showIcon={false}
                    tabIds={
                      Array [
                        "application-id-default",
                      ]
                    }
                    variant="framework"
                    verticalOrientation={false}
                    zIndex={1}
                  >
                    <div
                      aria-controls="application-id-default-panel"
                      aria-disabled={false}
                      aria-label="Default"
                      aria-selected={true}
                      className="tab is-text-only is-active"
                      data-focus-styles-enabled={true}
                      data-terra-tabs-show-focus-styles={true}
                      id="application-id-default"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      onMouseDown={[Function]}
                      role="tab"
                      style={
                        Object {
                          "zIndex": 1,
                        }
                      }
                      tabIndex={0}
                      title="Default"
                    >
                      <div
                        className="inner"
                      >
                        <span
                          className="label"
                        >
                          Default
                        </span>
                      </div>
                    </div>
                  </Tab>
                </InjectIntl(Tab)>
                <OnClickOutside(InjectIntl(TabDropDown))
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  excludeScrollbar={false}
                  isOpen={false}
                  onBlur={[Function]}
                  onFocus={[Function]}
                  onRequestClose={[Function]}
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  refCallback={[Function]}
                  stopPropagation={false}
                >
                  <InjectIntl(TabDropDown)
                    disableOnClickOutside={[Function]}
                    enableOnClickOutside={[Function]}
                    eventTypes={
                      Array [
                        "mousedown",
                        "touchstart",
                      ]
                    }
                    isOpen={false}
                    onBlur={[Function]}
                    onFocus={[Function]}
                    onRequestClose={[Function]}
                    outsideClickIgnoreClass="ignore-react-onclickoutside"
                    preventDefault={false}
                    refCallback={[Function]}
                    stopPropagation={false}
                  >
                    <TabDropDown
                      disableOnClickOutside={[Function]}
                      enableOnClickOutside={[Function]}
                      eventTypes={
                        Array [
                          "mousedown",
                          "touchstart",
                        ]
                      }
                      intl={
                        Object {
                          "defaultFormats": Object {},
                          "defaultLocale": "en",
                          "formatDate": [Function],
                          "formatHTMLMessage": [Function],
                          "formatMessage": [Function],
                          "formatNumber": [Function],
                          "formatPlural": [Function],
                          "formatRelative": [Function],
                          "formatTime": [Function],
                          "formats": Object {},
                          "formatters": Object {
                            "getDateTimeFormat": [Function],
                            "getMessageFormat": [Function],
                            "getNumberFormat": [Function],
                            "getPluralFormat": [Function],
                            "getRelativeFormat": [Function],
                          },
                          "locale": "en",
                          "messages": null,
                          "now": [Function],
                          "onError": [Function],
                          "textComponent": "span",
                          "timeZone": null,
                        }
                      }
                      isOpen={false}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onRequestClose={[Function]}
                      outsideClickIgnoreClass="ignore-react-onclickoutside"
                      preventDefault={false}
                      refCallback={[Function]}
                      stopPropagation={false}
                    >
                      <div
                        className="drop-down"
                        onMouseDown={[Function]}
                        role="none"
                      />
                    </TabDropDown>
                  </InjectIntl(TabDropDown)>
                </OnClickOutside(InjectIntl(TabDropDown))>
              </div>
              <div
                className="divcontainer"
              />
            </div>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="body"
        role="none"
      >
        <CommonTabItem
          associatedPanelId="application-id-default-panel"
          id="application-id-default"
          isActive={true}
          isClosable={false}
          isDisabled={false}
          isIconOnly={false}
          itemKey="default"
          key=".$default"
          label="Default"
          portalElement={null}
          render={[Function]}
          showIcon={false}
          variant="framework"
        >
          <CommonTabContent
            setFocusOnContent={false}
            variant="framework"
          >
            <div
              className="panel"
              role="none"
            >
              <div
                className="panel-header"
                data-testid="workspace-content-heading"
                role="none"
              />
              <div
                className="panel-content"
                role="none"
              >
                <div
                  aria-labelledby="application-id-default"
                  className="panel-overflow"
                  data-application-overflow-container={true}
                  id="application-id-default-panel"
                  role="tabpanel"
                  tabIndex={-1}
                >
                  <DynamicOverlayContainer
                    overlays={Array []}
                  >
                    <div
                      className="outer-container"
                      data-testid="dynamic-overlay-container"
                      tabIndex="-1"
                    >
                      <div
                        className="content-container"
                      />
                    </div>
                  </DynamicOverlayContainer>
                </div>
              </div>
            </div>
          </CommonTabContent>
        </CommonTabItem>
      </div>
    </div>
  </CommonTabs>
</Tabs>
`;

exports[`Tabs should render a controlled component when onChange and activeKey are set 1`] = `
<div
  className="structural"
  role="none"
>
  <div
    aria-hidden={true}
  >
    <div />
  </div>
  <div
    className="tab-header"
    role="none"
  >
    <InjectIntl(Tabs)
      isDraggable={false}
      onChange={[Function]}
      onTabStateChange={[Function]}
      tabData={
        Array [
          Object {
            "associatedPanelId": "terra-common-tabs-default-panel",
            "customDisplay": undefined,
            "icon": undefined,
            "id": "terra-common-tabs-default",
            "isClosable": false,
            "isDisabled": false,
            "isIconOnly": false,
            "isSelected": true,
            "itemKey": "default",
            "label": "Default",
            "metaData": undefined,
            "onSelect": [Function],
            "showIcon": false,
          },
        ]
      }
      variant="framework"
      verticalOrientation={false}
    />
  </div>
  <div
    className="body"
    role="none"
  >
    <CommonTabItem
      associatedPanelId="terra-common-tabs-default-panel"
      id="terra-common-tabs-default"
      isActive={true}
      isClosable={false}
      isDisabled={false}
      isIconOnly={false}
      itemKey="default"
      key=".$default"
      label="Default"
      portalElement={null}
      render={[Function]}
      showIcon={false}
      variant="framework"
    />
  </div>
</div>
`;

exports[`Tabs should render a default component 1`] = `
<div
  className="structural"
  role="none"
>
  <div
    aria-hidden={true}
  >
    <div />
  </div>
  <div
    className="tab-header"
    role="none"
  >
    <InjectIntl(Tabs)
      isDraggable={false}
      onTabStateChange={[Function]}
      tabData={
        Array [
          Object {
            "associatedPanelId": "terra-common-tabs-default-panel",
            "customDisplay": undefined,
            "icon": undefined,
            "id": "terra-common-tabs-default",
            "isClosable": false,
            "isDisabled": false,
            "isIconOnly": false,
            "isSelected": true,
            "itemKey": "default",
            "label": "Default",
            "metaData": undefined,
            "onSelect": [Function],
            "showIcon": false,
          },
        ]
      }
      variant="framework"
      verticalOrientation={false}
    />
  </div>
  <div
    className="body"
    role="none"
  >
    <CommonTabItem
      associatedPanelId="terra-common-tabs-default-panel"
      id="terra-common-tabs-default"
      isActive={true}
      isClosable={false}
      isDisabled={false}
      isIconOnly={false}
      itemKey="default"
      key=".$default"
      label="Default"
      portalElement={null}
      render={[Function]}
      showIcon={false}
      variant="framework"
    />
  </div>
</div>
`;

exports[`Tabs should render a draggable tabs component 1`] = `
<div
  className="structural"
  role="none"
>
  <div
    aria-hidden={true}
  >
    <div />
  </div>
  <div
    className="tab-header"
    role="none"
  >
    <InjectIntl(Tabs)
      isDraggable={true}
      onTabOrderChange={[MockFunction]}
      onTabStateChange={[Function]}
      tabData={
        Array [
          Object {
            "associatedPanelId": "terra-common-tabs-default-panel",
            "customDisplay": undefined,
            "icon": undefined,
            "id": "terra-common-tabs-default",
            "isClosable": false,
            "isDisabled": false,
            "isIconOnly": false,
            "isSelected": true,
            "itemKey": "default",
            "label": "Default",
            "metaData": undefined,
            "onSelect": [Function],
            "showIcon": false,
          },
        ]
      }
      variant="framework"
      verticalOrientation={false}
    />
  </div>
  <div
    className="body"
    role="none"
  >
    <CommonTabItem
      associatedPanelId="terra-common-tabs-default-panel"
      id="terra-common-tabs-default"
      isActive={true}
      isClosable={false}
      isDisabled={false}
      isIconOnly={false}
      itemKey="default"
      key=".$default"
      label="Default"
      portalElement={null}
      render={[Function]}
      showIcon={false}
      variant="framework"
    />
  </div>
</div>
`;

exports[`Tabs should render an id based on the Tabs id and the Tab key 1`] = `
<div
  className="structural"
  role="none"
>
  <div
    aria-hidden={true}
  >
    <div />
  </div>
  <div
    className="tab-header"
    role="none"
  >
    <InjectIntl(Tabs)
      isDraggable={false}
      onTabStateChange={[Function]}
      tabData={
        Array [
          Object {
            "associatedPanelId": "application-id-default-panel",
            "customDisplay": undefined,
            "icon": undefined,
            "id": "application-id-default",
            "isClosable": false,
            "isDisabled": false,
            "isIconOnly": false,
            "isSelected": true,
            "itemKey": "default",
            "label": "Default",
            "metaData": undefined,
            "onSelect": [Function],
            "showIcon": false,
          },
        ]
      }
      variant="framework"
      verticalOrientation={false}
    />
  </div>
  <div
    className="body"
    role="none"
  >
    <CommonTabItem
      associatedPanelId="application-id-default-panel"
      id="application-id-default"
      isActive={true}
      isClosable={false}
      isDisabled={false}
      isIconOnly={false}
      itemKey="default"
      key=".$default"
      label="Default"
      portalElement={null}
      render={[Function]}
      showIcon={false}
      variant="framework"
    />
  </div>
</div>
`;

exports[`Tabs should render an uncontrolled component when defaultActiveKey is set 1`] = `
<div
  className="structural"
  role="none"
>
  <div
    aria-hidden={true}
  >
    <div />
  </div>
  <div
    className="tab-header"
    role="none"
  >
    <InjectIntl(Tabs)
      isDraggable={false}
      onTabStateChange={[Function]}
      tabData={
        Array [
          Object {
            "associatedPanelId": "terra-common-tabs-default-panel",
            "customDisplay": undefined,
            "icon": undefined,
            "id": "terra-common-tabs-default",
            "isClosable": false,
            "isDisabled": false,
            "isIconOnly": false,
            "isSelected": true,
            "itemKey": "default",
            "label": "Default",
            "metaData": undefined,
            "onSelect": [Function],
            "showIcon": false,
          },
        ]
      }
      variant="framework"
      verticalOrientation={false}
    />
  </div>
  <div
    className="body"
    role="none"
  >
    <CommonTabItem
      associatedPanelId="terra-common-tabs-default-panel"
      id="terra-common-tabs-default"
      isActive={true}
      isClosable={false}
      isDisabled={false}
      isIconOnly={false}
      itemKey="default"
      key=".$default"
      label="Default"
      portalElement={null}
      render={[Function]}
      showIcon={false}
      variant="framework"
    />
  </div>
</div>
`;

exports[`Tabs should render horizontal tab if verticalorientation is passed as null 1`] = `
<div
  className="structural"
  role="none"
>
  <div
    aria-hidden={true}
  >
    <div />
  </div>
  <div
    className="tab-header"
    role="none"
  >
    <InjectIntl(Tabs)
      isDraggable={true}
      onTabStateChange={[Function]}
      tabData={
        Array [
          Object {
            "associatedPanelId": "terra-common-tabs-default-panel",
            "customDisplay": undefined,
            "icon": undefined,
            "id": "terra-common-tabs-default",
            "isClosable": false,
            "isDisabled": false,
            "isIconOnly": false,
            "isSelected": true,
            "itemKey": "default",
            "label": "Default",
            "metaData": undefined,
            "onSelect": [Function],
            "showIcon": false,
          },
        ]
      }
      variant="framework"
      verticalOrientation={false}
    />
  </div>
  <div
    className="body"
    role="none"
  >
    <CommonTabItem
      associatedPanelId="terra-common-tabs-default-panel"
      id="terra-common-tabs-default"
      isActive={true}
      isClosable={false}
      isDisabled={false}
      isIconOnly={false}
      itemKey="default"
      key=".$default"
      label="Default"
      portalElement={null}
      render={[Function]}
      showIcon={false}
      variant="framework"
    />
  </div>
</div>
`;

exports[`Tabs should render vertical tab 1`] = `
<div
  className="structural"
  role="none"
>
  <div
    aria-hidden={true}
  >
    <div />
  </div>
  <div
    className="tab-header"
    role="none"
  >
    <InjectIntl(Tabs)
      isDraggable={true}
      onTabStateChange={[Function]}
      tabData={
        Array [
          Object {
            "associatedPanelId": "terra-common-tabs-default-panel",
            "customDisplay": undefined,
            "icon": undefined,
            "id": "terra-common-tabs-default",
            "isClosable": false,
            "isDisabled": false,
            "isIconOnly": false,
            "isSelected": true,
            "itemKey": "default",
            "label": "Default",
            "metaData": undefined,
            "onSelect": [Function],
            "showIcon": false,
          },
        ]
      }
      variant="framework"
      verticalOrientation={true}
    />
  </div>
  <div
    className="body is-vertical"
    role="none"
  >
    <CommonTabItem
      associatedPanelId="terra-common-tabs-default-panel"
      id="terra-common-tabs-default"
      isActive={true}
      isClosable={false}
      isDisabled={false}
      isIconOnly={false}
      itemKey="default"
      key=".$default"
      label="Default"
      portalElement={null}
      render={[Function]}
      showIcon={false}
      variant="framework"
    />
  </div>
</div>
`;

exports[`Tabs should render with add icon 1`] = `
<Tabs
  ariaLabelAddTab="Add Tab"
  fill={false}
  id="application-id"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isClosable={false}
  isDraggable={false}
  onSelectAddButton={[MockFunction]}
  setFocusOnContent={false}
  tabFill={false}
  verticalOrientation={false}
>
  <CommonTabs
    activeItemKey="default"
    ariaLabelAddTab="Add Tab"
    id="application-id"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    isDraggable={false}
    onClosingTab={[Function]}
    onRequestActivate={[Function]}
    onSelectAddButton={[MockFunction]}
    variant="framework"
    verticalOrientation={false}
  >
    <div
      className="structural"
      role="none"
    >
      <div
        aria-hidden={true}
      >
        <div />
      </div>
      <div
        className="tab-header"
        role="none"
      >
        <InjectIntl(Tabs)
          ariaLabelAddTab="Add Tab"
          isDraggable={false}
          onSelectAddButton={[MockFunction]}
          onTabStateChange={[Function]}
          tabData={
            Array [
              Object {
                "associatedPanelId": "application-id-default-panel",
                "customDisplay": undefined,
                "icon": undefined,
                "id": "application-id-default",
                "isClosable": false,
                "isDisabled": false,
                "isIconOnly": false,
                "isSelected": true,
                "itemKey": "default",
                "label": "Default",
                "metaData": undefined,
                "onSelect": [Function],
                "showIcon": false,
              },
            ]
          }
          variant="framework"
          verticalOrientation={false}
        >
          <Tabs
            ariaLabelAddTab="Add Tab"
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            isDraggable={false}
            onSelectAddButton={[MockFunction]}
            onTabStateChange={[Function]}
            tabData={
              Array [
                Object {
                  "associatedPanelId": "application-id-default-panel",
                  "customDisplay": undefined,
                  "icon": undefined,
                  "id": "application-id-default",
                  "isClosable": false,
                  "isDisabled": false,
                  "isIconOnly": false,
                  "isSelected": true,
                  "itemKey": "default",
                  "label": "Default",
                  "metaData": undefined,
                  "onSelect": [Function],
                  "showIcon": false,
                },
              ]
            }
            variant="framework"
            verticalOrientation={false}
          >
            <div
              className="container"
            >
              <div
                aria-orientation="horizontal"
                aria-owns=""
                className="tab-container"
                data-tab-is-calculating="true"
                role="tablist"
              >
                <InjectIntl(Tab)
                  associatedPanelId="application-id-default-panel"
                  hiddenStartIndex={1}
                  id="application-id-default"
                  index={0}
                  isClosable={false}
                  isDisabled={false}
                  isDraggable={false}
                  isIconOnly={false}
                  isSelected={true}
                  itemKey="default"
                  key="application-id-default"
                  label="Default"
                  onClosingTab={[Function]}
                  onSelect={[Function]}
                  setDropdownOpen={[Function]}
                  showIcon={false}
                  tabIds={
                    Array [
                      "application-id-default",
                      "00000000-0000-0000-0000-000000000000",
                    ]
                  }
                  variant="framework"
                  verticalOrientation={false}
                  zIndex={1}
                >
                  <Tab
                    associatedPanelId="application-id-default-panel"
                    hiddenStartIndex={1}
                    id="application-id-default"
                    index={0}
                    intl={
                      Object {
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatHTMLMessage": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatPlural": [Function],
                        "formatRelative": [Function],
                        "formatTime": [Function],
                        "formats": Object {},
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralFormat": [Function],
                          "getRelativeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": null,
                        "now": [Function],
                        "onError": [Function],
                        "textComponent": "span",
                        "timeZone": null,
                      }
                    }
                    isClosable={false}
                    isDisabled={false}
                    isDraggable={false}
                    isIconOnly={false}
                    isSelected={true}
                    itemKey="default"
                    label="Default"
                    onClosingTab={[Function]}
                    onSelect={[Function]}
                    setDropdownOpen={[Function]}
                    showIcon={false}
                    tabIds={
                      Array [
                        "application-id-default",
                        "00000000-0000-0000-0000-000000000000",
                      ]
                    }
                    variant="framework"
                    verticalOrientation={false}
                    zIndex={1}
                  >
                    <div
                      aria-controls="application-id-default-panel"
                      aria-disabled={false}
                      aria-label="Default"
                      aria-selected={true}
                      className="tab is-text-only is-active"
                      data-focus-styles-enabled={true}
                      data-terra-tabs-show-focus-styles={true}
                      id="application-id-default"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      onMouseDown={[Function]}
                      role="tab"
                      style={
                        Object {
                          "zIndex": 1,
                        }
                      }
                      tabIndex={0}
                      title="Default"
                    >
                      <div
                        className="inner"
                      >
                        <span
                          className="label"
                        >
                          Default
                        </span>
                      </div>
                    </div>
                  </Tab>
                </InjectIntl(Tab)>
                <OnClickOutside(InjectIntl(TabDropDown))
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  excludeScrollbar={false}
                  isOpen={false}
                  onBlur={[Function]}
                  onFocus={[Function]}
                  onRequestClose={[Function]}
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  refCallback={[Function]}
                  stopPropagation={false}
                >
                  <InjectIntl(TabDropDown)
                    disableOnClickOutside={[Function]}
                    enableOnClickOutside={[Function]}
                    eventTypes={
                      Array [
                        "mousedown",
                        "touchstart",
                      ]
                    }
                    isOpen={false}
                    onBlur={[Function]}
                    onFocus={[Function]}
                    onRequestClose={[Function]}
                    outsideClickIgnoreClass="ignore-react-onclickoutside"
                    preventDefault={false}
                    refCallback={[Function]}
                    stopPropagation={false}
                  >
                    <TabDropDown
                      disableOnClickOutside={[Function]}
                      enableOnClickOutside={[Function]}
                      eventTypes={
                        Array [
                          "mousedown",
                          "touchstart",
                        ]
                      }
                      intl={
                        Object {
                          "defaultFormats": Object {},
                          "defaultLocale": "en",
                          "formatDate": [Function],
                          "formatHTMLMessage": [Function],
                          "formatMessage": [Function],
                          "formatNumber": [Function],
                          "formatPlural": [Function],
                          "formatRelative": [Function],
                          "formatTime": [Function],
                          "formats": Object {},
                          "formatters": Object {
                            "getDateTimeFormat": [Function],
                            "getMessageFormat": [Function],
                            "getNumberFormat": [Function],
                            "getPluralFormat": [Function],
                            "getRelativeFormat": [Function],
                          },
                          "locale": "en",
                          "messages": null,
                          "now": [Function],
                          "onError": [Function],
                          "textComponent": "span",
                          "timeZone": null,
                        }
                      }
                      isOpen={false}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onRequestClose={[Function]}
                      outsideClickIgnoreClass="ignore-react-onclickoutside"
                      preventDefault={false}
                      refCallback={[Function]}
                      stopPropagation={false}
                    >
                      <div
                        className="drop-down"
                        onMouseDown={[Function]}
                        role="none"
                      />
                    </TabDropDown>
                  </InjectIntl(TabDropDown)>
                </OnClickOutside(InjectIntl(TabDropDown))>
              </div>
              <div
                className="divcontainer"
              >
                <InjectIntl(AddButton)
                  addAriaLabel="Add Tab"
                  id="00000000-0000-0000-0000-000000000000"
                  index={1}
                  isSelected={false}
                  onAddClick={[Function]}
                  tabIds={
                    Array [
                      "application-id-default",
                      "00000000-0000-0000-0000-000000000000",
                    ]
                  }
                  title="Add Tab"
                >
                  <AddButton
                    addAriaLabel="Add Tab"
                    id="00000000-0000-0000-0000-000000000000"
                    index={1}
                    intl={
                      Object {
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatHTMLMessage": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatPlural": [Function],
                        "formatRelative": [Function],
                        "formatTime": [Function],
                        "formats": Object {},
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralFormat": [Function],
                          "getRelativeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": null,
                        "now": [Function],
                        "onError": [Function],
                        "textComponent": "span",
                        "timeZone": null,
                      }
                    }
                    isSelected={false}
                    onAddClick={[Function]}
                    tabIds={
                      Array [
                        "application-id-default",
                        "00000000-0000-0000-0000-000000000000",
                      ]
                    }
                    title="Add Tab"
                  >
                    <Button
                      className="button"
                      data-terra-tab-add-btn={true}
                      data-terra-tabs-show-focus-styles={true}
                      icon={
                        <IconAdd
                          a11yLabel="Add Tab Terra.tabs.addbutton.focus"
                          data-name="Layer 1"
                          viewBox="0 0 48 48"
                          xmlns="http://www.w3.org/2000/svg"
                        />
                      }
                      id="00000000-0000-0000-0000-000000000000"
                      index={1}
                      isBlock={false}
                      isCompact={false}
                      isDisabled={false}
                      isIconOnly={true}
                      isReversed={false}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      tabIndex="-1"
                      text="Add Tab"
                      type="button"
                      variant="de-emphasis"
                    >
                      <button
                        aria-disabled={false}
                        aria-label="Add Tab Terra.tabs.addbutton.focus"
                        className="button de-emphasis button"
                        data-terra-tab-add-btn={true}
                        data-terra-tabs-show-focus-styles={true}
                        disabled={false}
                        id="00000000-0000-0000-0000-000000000000"
                        index={1}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        tabIndex="-1"
                        title="Add Tab Terra.tabs.addbutton.focus"
                        type="button"
                      >
                        <span
                          className="button-label-win icon-only"
                        >
                          <span
                            className="icon"
                          >
                            <IconAdd
                              a11yLabel="Add Tab Terra.tabs.addbutton.focus"
                              className="icon-svg"
                              data-name="Layer 1"
                              viewBox="0 0 48 48"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <IconBase
                                a11yLabel="Add Tab Terra.tabs.addbutton.focus"
                                className="icon-svg"
                                data-name="Layer 1"
                                focusable="false"
                                height="1em"
                                isBidi={false}
                                isSpin={false}
                                viewBox="0 0 48 48"
                                width="1em"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <svg
                                  className="tui-Icon icon icon-svg"
                                  data-name="Layer 1"
                                  focusable="false"
                                  height="1em"
                                  viewBox="0 0 48 48"
                                  width="1em"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <title>
                                    Add Tab Terra.tabs.addbutton.focus
                                  </title>
                                  <path
                                    d="M48 21H27V0h-6v21H0v6h21v21h6V27h21z"
                                  />
                                </svg>
                              </IconBase>
                            </IconAdd>
                          </span>
                        </span>
                      </button>
                    </Button>
                  </AddButton>
                </InjectIntl(AddButton)>
              </div>
            </div>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="body"
        role="none"
      >
        <CommonTabItem
          associatedPanelId="application-id-default-panel"
          id="application-id-default"
          isActive={true}
          isClosable={false}
          isDisabled={false}
          isIconOnly={false}
          itemKey="default"
          key=".$default"
          label="Default"
          portalElement={null}
          render={[Function]}
          showIcon={false}
          variant="framework"
        >
          <CommonTabContent
            setFocusOnContent={false}
            variant="framework"
          >
            <div
              className="panel"
              role="none"
            >
              <div
                className="panel-header"
                data-testid="workspace-content-heading"
                role="none"
              />
              <div
                className="panel-content"
                role="none"
              >
                <div
                  aria-labelledby="application-id-default"
                  className="panel-overflow"
                  data-application-overflow-container={true}
                  id="application-id-default-panel"
                  role="tabpanel"
                  tabIndex={-1}
                >
                  <DynamicOverlayContainer
                    overlays={Array []}
                  >
                    <div
                      className="outer-container"
                      data-testid="dynamic-overlay-container"
                      tabIndex="-1"
                    >
                      <div
                        className="content-container"
                      />
                    </div>
                  </DynamicOverlayContainer>
                </div>
              </div>
            </div>
          </CommonTabContent>
        </CommonTabItem>
      </div>
    </div>
  </CommonTabs>
</Tabs>
`;

exports[`Tabs should render with add icon 2`] = `
<Tabs
  ariaLabelAddTab="Add Tab"
  fill={false}
  id="application-id"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isClosable={false}
  isDraggable={false}
  onSelectAddButton={[Function]}
  setFocusOnContent={false}
  tabFill={false}
  verticalOrientation={false}
>
  <CommonTabs
    activeItemKey="default"
    ariaLabelAddTab="Add Tab"
    id="application-id"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    isDraggable={false}
    onClosingTab={[Function]}
    onRequestActivate={[Function]}
    onSelectAddButton={[Function]}
    variant="framework"
    verticalOrientation={false}
  >
    <div
      className="structural"
      role="none"
    >
      <div
        aria-hidden={true}
      >
        <div />
      </div>
      <div
        className="tab-header"
        role="none"
      >
        <InjectIntl(Tabs)
          ariaLabelAddTab="Add Tab"
          isDraggable={false}
          onSelectAddButton={[Function]}
          onTabStateChange={[Function]}
          tabData={
            Array [
              Object {
                "associatedPanelId": "application-id-default-panel",
                "customDisplay": undefined,
                "icon": undefined,
                "id": "application-id-default",
                "isClosable": false,
                "isDisabled": false,
                "isIconOnly": false,
                "isSelected": true,
                "itemKey": "default",
                "label": "Default",
                "metaData": undefined,
                "onSelect": [Function],
                "showIcon": false,
              },
            ]
          }
          variant="framework"
          verticalOrientation={false}
        >
          <Tabs
            ariaLabelAddTab="Add Tab"
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            isDraggable={false}
            onSelectAddButton={[Function]}
            onTabStateChange={[Function]}
            tabData={
              Array [
                Object {
                  "associatedPanelId": "application-id-default-panel",
                  "customDisplay": undefined,
                  "icon": undefined,
                  "id": "application-id-default",
                  "isClosable": false,
                  "isDisabled": false,
                  "isIconOnly": false,
                  "isSelected": true,
                  "itemKey": "default",
                  "label": "Default",
                  "metaData": undefined,
                  "onSelect": [Function],
                  "showIcon": false,
                },
              ]
            }
            variant="framework"
            verticalOrientation={false}
          >
            <div
              className="container"
            >
              <div
                aria-orientation="horizontal"
                aria-owns=""
                className="tab-container"
                data-tab-is-calculating="true"
                role="tablist"
              >
                <InjectIntl(Tab)
                  associatedPanelId="application-id-default-panel"
                  hiddenStartIndex={1}
                  id="application-id-default"
                  index={0}
                  isClosable={false}
                  isDisabled={false}
                  isDraggable={false}
                  isIconOnly={false}
                  isSelected={true}
                  itemKey="default"
                  key="application-id-default"
                  label="Default"
                  onClosingTab={[Function]}
                  onSelect={[Function]}
                  setDropdownOpen={[Function]}
                  showIcon={false}
                  tabIds={
                    Array [
                      "application-id-default",
                      "00000000-0000-0000-0000-000000000000",
                    ]
                  }
                  variant="framework"
                  verticalOrientation={false}
                  zIndex={1}
                >
                  <Tab
                    associatedPanelId="application-id-default-panel"
                    hiddenStartIndex={1}
                    id="application-id-default"
                    index={0}
                    intl={
                      Object {
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatHTMLMessage": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatPlural": [Function],
                        "formatRelative": [Function],
                        "formatTime": [Function],
                        "formats": Object {},
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralFormat": [Function],
                          "getRelativeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": null,
                        "now": [Function],
                        "onError": [Function],
                        "textComponent": "span",
                        "timeZone": null,
                      }
                    }
                    isClosable={false}
                    isDisabled={false}
                    isDraggable={false}
                    isIconOnly={false}
                    isSelected={true}
                    itemKey="default"
                    label="Default"
                    onClosingTab={[Function]}
                    onSelect={[Function]}
                    setDropdownOpen={[Function]}
                    showIcon={false}
                    tabIds={
                      Array [
                        "application-id-default",
                        "00000000-0000-0000-0000-000000000000",
                      ]
                    }
                    variant="framework"
                    verticalOrientation={false}
                    zIndex={1}
                  >
                    <div
                      aria-controls="application-id-default-panel"
                      aria-disabled={false}
                      aria-label="Default"
                      aria-selected={true}
                      className="tab is-text-only is-active"
                      data-focus-styles-enabled={true}
                      data-terra-tabs-show-focus-styles={true}
                      id="application-id-default"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      onMouseDown={[Function]}
                      role="tab"
                      style={
                        Object {
                          "zIndex": 1,
                        }
                      }
                      tabIndex={0}
                      title="Default"
                    >
                      <div
                        className="inner"
                      >
                        <span
                          className="label"
                        >
                          Default
                        </span>
                      </div>
                    </div>
                  </Tab>
                </InjectIntl(Tab)>
                <OnClickOutside(InjectIntl(TabDropDown))
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  excludeScrollbar={false}
                  isOpen={false}
                  onBlur={[Function]}
                  onFocus={[Function]}
                  onRequestClose={[Function]}
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  refCallback={[Function]}
                  stopPropagation={false}
                >
                  <InjectIntl(TabDropDown)
                    disableOnClickOutside={[Function]}
                    enableOnClickOutside={[Function]}
                    eventTypes={
                      Array [
                        "mousedown",
                        "touchstart",
                      ]
                    }
                    isOpen={false}
                    onBlur={[Function]}
                    onFocus={[Function]}
                    onRequestClose={[Function]}
                    outsideClickIgnoreClass="ignore-react-onclickoutside"
                    preventDefault={false}
                    refCallback={[Function]}
                    stopPropagation={false}
                  >
                    <TabDropDown
                      disableOnClickOutside={[Function]}
                      enableOnClickOutside={[Function]}
                      eventTypes={
                        Array [
                          "mousedown",
                          "touchstart",
                        ]
                      }
                      intl={
                        Object {
                          "defaultFormats": Object {},
                          "defaultLocale": "en",
                          "formatDate": [Function],
                          "formatHTMLMessage": [Function],
                          "formatMessage": [Function],
                          "formatNumber": [Function],
                          "formatPlural": [Function],
                          "formatRelative": [Function],
                          "formatTime": [Function],
                          "formats": Object {},
                          "formatters": Object {
                            "getDateTimeFormat": [Function],
                            "getMessageFormat": [Function],
                            "getNumberFormat": [Function],
                            "getPluralFormat": [Function],
                            "getRelativeFormat": [Function],
                          },
                          "locale": "en",
                          "messages": null,
                          "now": [Function],
                          "onError": [Function],
                          "textComponent": "span",
                          "timeZone": null,
                        }
                      }
                      isOpen={false}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onRequestClose={[Function]}
                      outsideClickIgnoreClass="ignore-react-onclickoutside"
                      preventDefault={false}
                      refCallback={[Function]}
                      stopPropagation={false}
                    >
                      <div
                        className="drop-down"
                        onMouseDown={[Function]}
                        role="none"
                      />
                    </TabDropDown>
                  </InjectIntl(TabDropDown)>
                </OnClickOutside(InjectIntl(TabDropDown))>
              </div>
              <div
                className="divcontainer"
              >
                <InjectIntl(AddButton)
                  addAriaLabel="Add Tab"
                  id="00000000-0000-0000-0000-000000000000"
                  index={1}
                  isSelected={false}
                  onAddClick={[Function]}
                  tabIds={
                    Array [
                      "application-id-default",
                      "00000000-0000-0000-0000-000000000000",
                    ]
                  }
                  title="Add Tab"
                >
                  <AddButton
                    addAriaLabel="Add Tab"
                    id="00000000-0000-0000-0000-000000000000"
                    index={1}
                    intl={
                      Object {
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatHTMLMessage": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatPlural": [Function],
                        "formatRelative": [Function],
                        "formatTime": [Function],
                        "formats": Object {},
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralFormat": [Function],
                          "getRelativeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": null,
                        "now": [Function],
                        "onError": [Function],
                        "textComponent": "span",
                        "timeZone": null,
                      }
                    }
                    isSelected={false}
                    onAddClick={[Function]}
                    tabIds={
                      Array [
                        "application-id-default",
                        "00000000-0000-0000-0000-000000000000",
                      ]
                    }
                    title="Add Tab"
                  >
                    <Button
                      className="button"
                      data-terra-tab-add-btn={true}
                      data-terra-tabs-show-focus-styles={true}
                      icon={
                        <IconAdd
                          a11yLabel="Add Tab Terra.tabs.addbutton.focus"
                          data-name="Layer 1"
                          viewBox="0 0 48 48"
                          xmlns="http://www.w3.org/2000/svg"
                        />
                      }
                      id="00000000-0000-0000-0000-000000000000"
                      index={1}
                      isBlock={false}
                      isCompact={false}
                      isDisabled={false}
                      isIconOnly={true}
                      isReversed={false}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      tabIndex="-1"
                      text="Add Tab"
                      type="button"
                      variant="de-emphasis"
                    >
                      <button
                        aria-disabled={false}
                        aria-label="Add Tab Terra.tabs.addbutton.focus"
                        className="button de-emphasis button"
                        data-terra-tab-add-btn={true}
                        data-terra-tabs-show-focus-styles={true}
                        disabled={false}
                        id="00000000-0000-0000-0000-000000000000"
                        index={1}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        tabIndex="-1"
                        title="Add Tab Terra.tabs.addbutton.focus"
                        type="button"
                      >
                        <span
                          className="button-label-win icon-only"
                        >
                          <span
                            className="icon"
                          >
                            <IconAdd
                              a11yLabel="Add Tab Terra.tabs.addbutton.focus"
                              className="icon-svg"
                              data-name="Layer 1"
                              viewBox="0 0 48 48"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <IconBase
                                a11yLabel="Add Tab Terra.tabs.addbutton.focus"
                                className="icon-svg"
                                data-name="Layer 1"
                                focusable="false"
                                height="1em"
                                isBidi={false}
                                isSpin={false}
                                viewBox="0 0 48 48"
                                width="1em"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <svg
                                  className="tui-Icon icon icon-svg"
                                  data-name="Layer 1"
                                  focusable="false"
                                  height="1em"
                                  viewBox="0 0 48 48"
                                  width="1em"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <title>
                                    Add Tab Terra.tabs.addbutton.focus
                                  </title>
                                  <path
                                    d="M48 21H27V0h-6v21H0v6h21v21h6V27h21z"
                                  />
                                </svg>
                              </IconBase>
                            </IconAdd>
                          </span>
                        </span>
                      </button>
                    </Button>
                  </AddButton>
                </InjectIntl(AddButton)>
              </div>
            </div>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="body"
        role="none"
      >
        <CommonTabItem
          associatedPanelId="application-id-default-panel"
          id="application-id-default"
          isActive={true}
          isClosable={false}
          isDisabled={false}
          isIconOnly={false}
          itemKey="default"
          key=".$default"
          label="Default"
          portalElement={null}
          render={[Function]}
          showIcon={false}
          variant="framework"
        >
          <CommonTabContent
            setFocusOnContent={false}
            variant="framework"
          >
            <div
              className="panel"
              role="none"
            >
              <div
                className="panel-header"
                data-testid="workspace-content-heading"
                role="none"
              />
              <div
                className="panel-content"
                role="none"
              >
                <div
                  aria-labelledby="application-id-default"
                  className="panel-overflow"
                  data-application-overflow-container={true}
                  id="application-id-default-panel"
                  role="tabpanel"
                  tabIndex={-1}
                >
                  <DynamicOverlayContainer
                    overlays={Array []}
                  >
                    <div
                      className="outer-container"
                      data-testid="dynamic-overlay-container"
                      tabIndex="-1"
                    >
                      <div
                        className="content-container"
                      />
                    </div>
                  </DynamicOverlayContainer>
                </div>
              </div>
            </div>
          </CommonTabContent>
        </CommonTabItem>
      </div>
    </div>
  </CommonTabs>
</Tabs>
`;

exports[`Tabs should render with close icon 1`] = `
<Tabs
  fill={false}
  id="application-id"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isClosable={false}
  isDraggable={false}
  isclosable={true}
  onTabClose={[MockFunction]}
  setFocusOnContent={false}
  tabFill={false}
  verticalOrientation={false}
>
  <CommonTabs
    activeItemKey="default"
    id="application-id"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    isDraggable={false}
    isclosable={true}
    onClosingTab={[Function]}
    onRequestActivate={[Function]}
    onTabClose={[MockFunction]}
    variant="framework"
    verticalOrientation={false}
  >
    <div
      className="structural"
      role="none"
    >
      <div
        aria-hidden={true}
      >
        <div />
      </div>
      <div
        className="tab-header"
        role="none"
      >
        <InjectIntl(Tabs)
          isDraggable={false}
          onTabStateChange={[Function]}
          tabData={
            Array [
              Object {
                "associatedPanelId": "application-id-default-panel",
                "customDisplay": undefined,
                "icon": undefined,
                "id": "application-id-default",
                "isClosable": false,
                "isDisabled": false,
                "isIconOnly": false,
                "isSelected": true,
                "itemKey": "default",
                "label": "Default",
                "metaData": undefined,
                "onSelect": [Function],
                "showIcon": false,
              },
            ]
          }
          variant="framework"
          verticalOrientation={false}
        >
          <Tabs
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": null,
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            isDraggable={false}
            onTabStateChange={[Function]}
            tabData={
              Array [
                Object {
                  "associatedPanelId": "application-id-default-panel",
                  "customDisplay": undefined,
                  "icon": undefined,
                  "id": "application-id-default",
                  "isClosable": false,
                  "isDisabled": false,
                  "isIconOnly": false,
                  "isSelected": true,
                  "itemKey": "default",
                  "label": "Default",
                  "metaData": undefined,
                  "onSelect": [Function],
                  "showIcon": false,
                },
              ]
            }
            variant="framework"
            verticalOrientation={false}
          >
            <div
              className="container"
            >
              <div
                aria-orientation="horizontal"
                aria-owns=""
                className="tab-container"
                data-tab-is-calculating="true"
                role="tablist"
              >
                <InjectIntl(Tab)
                  associatedPanelId="application-id-default-panel"
                  hiddenStartIndex={1}
                  id="application-id-default"
                  index={0}
                  isClosable={false}
                  isDisabled={false}
                  isDraggable={false}
                  isIconOnly={false}
                  isSelected={true}
                  itemKey="default"
                  key="application-id-default"
                  label="Default"
                  onClosingTab={[Function]}
                  onSelect={[Function]}
                  setDropdownOpen={[Function]}
                  showIcon={false}
                  tabIds={
                    Array [
                      "application-id-default",
                    ]
                  }
                  variant="framework"
                  verticalOrientation={false}
                  zIndex={1}
                >
                  <Tab
                    associatedPanelId="application-id-default-panel"
                    hiddenStartIndex={1}
                    id="application-id-default"
                    index={0}
                    intl={
                      Object {
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatHTMLMessage": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatPlural": [Function],
                        "formatRelative": [Function],
                        "formatTime": [Function],
                        "formats": Object {},
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralFormat": [Function],
                          "getRelativeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": null,
                        "now": [Function],
                        "onError": [Function],
                        "textComponent": "span",
                        "timeZone": null,
                      }
                    }
                    isClosable={false}
                    isDisabled={false}
                    isDraggable={false}
                    isIconOnly={false}
                    isSelected={true}
                    itemKey="default"
                    label="Default"
                    onClosingTab={[Function]}
                    onSelect={[Function]}
                    setDropdownOpen={[Function]}
                    showIcon={false}
                    tabIds={
                      Array [
                        "application-id-default",
                      ]
                    }
                    variant="framework"
                    verticalOrientation={false}
                    zIndex={1}
                  >
                    <div
                      aria-controls="application-id-default-panel"
                      aria-disabled={false}
                      aria-label="Default"
                      aria-selected={true}
                      className="tab is-text-only is-active"
                      data-focus-styles-enabled={true}
                      data-terra-tabs-show-focus-styles={true}
                      id="application-id-default"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      onMouseDown={[Function]}
                      role="tab"
                      style={
                        Object {
                          "zIndex": 1,
                        }
                      }
                      tabIndex={0}
                      title="Default"
                    >
                      <div
                        className="inner"
                      >
                        <span
                          className="label"
                        >
                          Default
                        </span>
                      </div>
                    </div>
                  </Tab>
                </InjectIntl(Tab)>
                <OnClickOutside(InjectIntl(TabDropDown))
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  excludeScrollbar={false}
                  isOpen={false}
                  onBlur={[Function]}
                  onFocus={[Function]}
                  onRequestClose={[Function]}
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  refCallback={[Function]}
                  stopPropagation={false}
                >
                  <InjectIntl(TabDropDown)
                    disableOnClickOutside={[Function]}
                    enableOnClickOutside={[Function]}
                    eventTypes={
                      Array [
                        "mousedown",
                        "touchstart",
                      ]
                    }
                    isOpen={false}
                    onBlur={[Function]}
                    onFocus={[Function]}
                    onRequestClose={[Function]}
                    outsideClickIgnoreClass="ignore-react-onclickoutside"
                    preventDefault={false}
                    refCallback={[Function]}
                    stopPropagation={false}
                  >
                    <TabDropDown
                      disableOnClickOutside={[Function]}
                      enableOnClickOutside={[Function]}
                      eventTypes={
                        Array [
                          "mousedown",
                          "touchstart",
                        ]
                      }
                      intl={
                        Object {
                          "defaultFormats": Object {},
                          "defaultLocale": "en",
                          "formatDate": [Function],
                          "formatHTMLMessage": [Function],
                          "formatMessage": [Function],
                          "formatNumber": [Function],
                          "formatPlural": [Function],
                          "formatRelative": [Function],
                          "formatTime": [Function],
                          "formats": Object {},
                          "formatters": Object {
                            "getDateTimeFormat": [Function],
                            "getMessageFormat": [Function],
                            "getNumberFormat": [Function],
                            "getPluralFormat": [Function],
                            "getRelativeFormat": [Function],
                          },
                          "locale": "en",
                          "messages": null,
                          "now": [Function],
                          "onError": [Function],
                          "textComponent": "span",
                          "timeZone": null,
                        }
                      }
                      isOpen={false}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onRequestClose={[Function]}
                      outsideClickIgnoreClass="ignore-react-onclickoutside"
                      preventDefault={false}
                      refCallback={[Function]}
                      stopPropagation={false}
                    >
                      <div
                        className="drop-down"
                        onMouseDown={[Function]}
                        role="none"
                      />
                    </TabDropDown>
                  </InjectIntl(TabDropDown)>
                </OnClickOutside(InjectIntl(TabDropDown))>
              </div>
              <div
                className="divcontainer"
              />
            </div>
          </Tabs>
        </InjectIntl(Tabs)>
      </div>
      <div
        className="body"
        role="none"
      >
        <CommonTabItem
          associatedPanelId="application-id-default-panel"
          id="application-id-default"
          isActive={true}
          isClosable={false}
          isDisabled={false}
          isIconOnly={false}
          itemKey="default"
          key=".$default"
          label="Default"
          portalElement={null}
          render={[Function]}
          showIcon={false}
          variant="framework"
        >
          <CommonTabContent
            setFocusOnContent={false}
            variant="framework"
          >
            <div
              className="panel"
              role="none"
            >
              <div
                className="panel-header"
                data-testid="workspace-content-heading"
                role="none"
              />
              <div
                className="panel-content"
                role="none"
              >
                <div
                  aria-labelledby="application-id-default"
                  className="panel-overflow"
                  data-application-overflow-container={true}
                  id="application-id-default-panel"
                  role="tabpanel"
                  tabIndex={-1}
                >
                  <DynamicOverlayContainer
                    overlays={Array []}
                  >
                    <div
                      className="outer-container"
                      data-testid="dynamic-overlay-container"
                      tabIndex="-1"
                    >
                      <div
                        className="content-container"
                      />
                    </div>
                  </DynamicOverlayContainer>
                </div>
              </div>
            </div>
          </CommonTabContent>
        </CommonTabItem>
      </div>
    </div>
  </CommonTabs>
</Tabs>
`;

exports[`Tabs should render with content filled when indicated 1`] = `
<CommonTabs
  activeItemKey="default"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isDraggable={false}
  onClosingTab={[Function]}
  onRequestActivate={[Function]}
  variant="framework"
  verticalOrientation={false}
>
  <CommonTabItem
    isClosable={false}
    isDisabled={false}
    isIconOnly={false}
    itemKey="default"
    key="default"
    label="Default"
    render={[Function]}
    showIcon={false}
    variant="framework"
  />
</CommonTabs>
`;

exports[`Tabs should render with tabs filled when indicated 1`] = `
<CommonTabs
  activeItemKey="default"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isDraggable={false}
  onClosingTab={[Function]}
  onRequestActivate={[Function]}
  variant="framework"
  verticalOrientation={false}
>
  <CommonTabItem
    isClosable={false}
    isDisabled={false}
    isIconOnly={false}
    itemKey="default"
    key="default"
    label="Default"
    render={[Function]}
    showIcon={false}
    variant="framework"
  />
</CommonTabs>
`;

exports[`Tabs should set custom props 1`] = `
<CommonTabs
  activeItemKey="default"
  className="customClass"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isDraggable={false}
  onClosingTab={[Function]}
  onRequestActivate={[Function]}
  variant="framework"
  verticalOrientation={false}
>
  <CommonTabItem
    isClosable={false}
    isDisabled={false}
    isIconOnly={false}
    itemKey="default"
    key="default"
    label="Default"
    render={[Function]}
    showIcon={false}
    variant="framework"
  />
</CommonTabs>
`;

exports[`Tabs should set custom props for child Tab Pane 1`] = `
<div
  className="structural"
  role="none"
>
  <div
    aria-hidden={true}
  >
    <div />
  </div>
  <div
    className="tab-header"
    role="none"
  >
    <InjectIntl(Tabs)
      isDraggable={false}
      onTabStateChange={[Function]}
      tabData={
        Array [
          Object {
            "associatedPanelId": "terra-common-tabs-default-panel",
            "customDisplay": undefined,
            "icon": undefined,
            "id": "terra-common-tabs-default",
            "isClosable": false,
            "isDisabled": false,
            "isIconOnly": false,
            "isSelected": true,
            "itemKey": "default",
            "label": "Default",
            "metaData": undefined,
            "onSelect": [Function],
            "showIcon": false,
          },
        ]
      }
      variant="framework"
      verticalOrientation={false}
    />
  </div>
  <div
    className="body"
    role="none"
  >
    <CommonTabItem
      associatedPanelId="terra-common-tabs-default-panel"
      id="terra-common-tabs-default"
      isActive={true}
      isClosable={false}
      isDisabled={false}
      isIconOnly={false}
      itemKey="default"
      key=".$default"
      label="Default"
      portalElement={null}
      render={[Function]}
      showIcon={false}
      variant="framework"
    />
  </div>
</div>
`;
