// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InjectIntl should render the embedded content consumer container 1`] = `
<div
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <InjectIntl(EmbeddedContentConsumer)
    onMount={[Function]}
    src="/terra-framework/#/raw/provider/cerner-terra-framework-docs/embedded-content-consumer/providers/basic-provider"
    title="basic provider"
  >
    <EmbeddedContentConsumer
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      onMount={[Function]}
      src="/terra-framework/#/raw/provider/cerner-terra-framework-docs/embedded-content-consumer/providers/basic-provider"
      title="basic provider"
    >
      <div
        className="container"
      >
        <VisuallyHiddenText
          className="visually-hidden-text"
          text="Terra.embeddedContentConsumer.beginEmbeddedContent"
        >
          <span
            className="visually-hidden-text visually-hidden-text"
          >
            Terra.embeddedContentConsumer.beginEmbeddedContent
          </span>
        </VisuallyHiddenText>
        <div
          className="embedded-content-wrapper"
          title="basic provider"
        />
        <VisuallyHiddenText
          className="visually-hidden-text"
          text="Terra.embeddedContentConsumer.endEmbeddedContent"
        >
          <span
            className="visually-hidden-text visually-hidden-text"
          >
            Terra.embeddedContentConsumer.endEmbeddedContent
          </span>
        </VisuallyHiddenText>
      </div>
    </EmbeddedContentConsumer>
  </InjectIntl(EmbeddedContentConsumer)>
</div>
`;

exports[`InjectIntl should render the embedded content consumer with custom class names 1`] = `
<div
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <InjectIntl(EmbeddedContentConsumer)
    className="container"
    onMount={[Function]}
    src="https://www.cdc.gov/"
    title="custom class name"
  >
    <EmbeddedContentConsumer
      className="container"
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      onMount={[Function]}
      src="https://www.cdc.gov/"
      title="custom class name"
    >
      <div
        className="container"
      >
        <VisuallyHiddenText
          className="visually-hidden-text"
          text="Terra.embeddedContentConsumer.beginEmbeddedContent"
        >
          <span
            className="visually-hidden-text visually-hidden-text"
          >
            Terra.embeddedContentConsumer.beginEmbeddedContent
          </span>
        </VisuallyHiddenText>
        <div
          className="embedded-content-wrapper"
          title="custom class name"
        />
        <VisuallyHiddenText
          className="visually-hidden-text"
          text="Terra.embeddedContentConsumer.endEmbeddedContent"
        >
          <span
            className="visually-hidden-text visually-hidden-text"
          >
            Terra.embeddedContentConsumer.endEmbeddedContent
          </span>
        </VisuallyHiddenText>
      </div>
    </EmbeddedContentConsumer>
  </InjectIntl(EmbeddedContentConsumer)>
</div>
`;

exports[`InjectIntl should render the embedded content consumer with options attributes 1`] = `
<div
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <InjectIntl(EmbeddedContentConsumer)
    onMount={[Function]}
    options={
      Object {
        "iframeAttrs": Object {
          "height": "100px",
          "srcdoc": "<p><b>Inline HTML Content</b></p><p>This is an inline html content that can be used to render the content into the frame.</p>",
          "width": "100%",
        },
      }
    }
    src=""
    title="inline html content"
  >
    <EmbeddedContentConsumer
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      onMount={[Function]}
      options={
        Object {
          "iframeAttrs": Object {
            "height": "100px",
            "srcdoc": "<p><b>Inline HTML Content</b></p><p>This is an inline html content that can be used to render the content into the frame.</p>",
            "width": "100%",
          },
        }
      }
      src=""
      title="inline html content"
    >
      <div
        className="container"
      >
        <VisuallyHiddenText
          className="visually-hidden-text"
          text="Terra.embeddedContentConsumer.beginEmbeddedContent"
        >
          <span
            className="visually-hidden-text visually-hidden-text"
          >
            Terra.embeddedContentConsumer.beginEmbeddedContent
          </span>
        </VisuallyHiddenText>
        <div
          className="embedded-content-wrapper"
          title="inline html content"
        />
        <VisuallyHiddenText
          className="visually-hidden-text"
          text="Terra.embeddedContentConsumer.endEmbeddedContent"
        >
          <span
            className="visually-hidden-text visually-hidden-text"
          >
            Terra.embeddedContentConsumer.endEmbeddedContent
          </span>
        </VisuallyHiddenText>
      </div>
    </EmbeddedContentConsumer>
  </InjectIntl(EmbeddedContentConsumer)>
</div>
`;

exports[`InjectIntl should render the embedded content consumer with title prop 1`] = `
<div
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <InjectIntl(EmbeddedContentConsumer)
    onMount={[Function]}
    src="https://www.cdc.gov/"
    title="title for the frame content"
  >
    <EmbeddedContentConsumer
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      onMount={[Function]}
      src="https://www.cdc.gov/"
      title="title for the frame content"
    >
      <div
        className="container"
      >
        <VisuallyHiddenText
          className="visually-hidden-text"
          text="Terra.embeddedContentConsumer.beginEmbeddedContent"
        >
          <span
            className="visually-hidden-text visually-hidden-text"
          >
            Terra.embeddedContentConsumer.beginEmbeddedContent
          </span>
        </VisuallyHiddenText>
        <div
          className="embedded-content-wrapper"
          title="title for the frame content"
        />
        <VisuallyHiddenText
          className="visually-hidden-text"
          text="Terra.embeddedContentConsumer.endEmbeddedContent"
        >
          <span
            className="visually-hidden-text visually-hidden-text"
          >
            Terra.embeddedContentConsumer.endEmbeddedContent
          </span>
        </VisuallyHiddenText>
      </div>
    </EmbeddedContentConsumer>
  </InjectIntl(EmbeddedContentConsumer)>
</div>
`;

exports[`InjectIntl should render the embedded content consumer with title prop and options prop 1`] = `
<div
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <InjectIntl(EmbeddedContentConsumer)
    onMount={[Function]}
    options={
      Object {
        "iframeAttrs": Object {
          "title": "title of content set from options.iframeAttrs",
        },
      }
    }
    src="https://www.cdc.gov/"
    title="title that will be used for the frame content"
  >
    <EmbeddedContentConsumer
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      onMount={[Function]}
      options={
        Object {
          "iframeAttrs": Object {
            "title": "title of content set from options.iframeAttrs",
          },
        }
      }
      src="https://www.cdc.gov/"
      title="title that will be used for the frame content"
    >
      <div
        className="container"
      >
        <VisuallyHiddenText
          className="visually-hidden-text"
          text="Terra.embeddedContentConsumer.beginEmbeddedContent"
        >
          <span
            className="visually-hidden-text visually-hidden-text"
          >
            Terra.embeddedContentConsumer.beginEmbeddedContent
          </span>
        </VisuallyHiddenText>
        <div
          className="embedded-content-wrapper"
          title="title that will be used for the frame content"
        />
        <VisuallyHiddenText
          className="visually-hidden-text"
          text="Terra.embeddedContentConsumer.endEmbeddedContent"
        >
          <span
            className="visually-hidden-text visually-hidden-text"
          >
            Terra.embeddedContentConsumer.endEmbeddedContent
          </span>
        </VisuallyHiddenText>
      </div>
    </EmbeddedContentConsumer>
  </InjectIntl(EmbeddedContentConsumer)>
</div>
`;

exports[`InjectIntl should render visually hidden text before and after the embedded content consumer container 1`] = `
<InjectIntl(EmbeddedContentConsumer)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  options={
    Object {
      "iframeAttrs": Object {
        "title": "title of content set from options.iframeAttrs",
      },
    }
  }
  src="https://www.google.com/"
>
  <EmbeddedContentConsumer
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    options={
      Object {
        "iframeAttrs": Object {
          "title": "title of content set from options.iframeAttrs",
        },
      }
    }
    src="https://www.google.com/"
  >
    <div
      className="container"
    >
      <VisuallyHiddenText
        className="visually-hidden-text"
        text="Terra.embeddedContentConsumer.beginEmbeddedContent"
      >
        <span
          className="visually-hidden-text visually-hidden-text"
        >
          Terra.embeddedContentConsumer.beginEmbeddedContent
        </span>
      </VisuallyHiddenText>
      <div
        className="embedded-content-wrapper"
      />
      <VisuallyHiddenText
        className="visually-hidden-text"
        text="Terra.embeddedContentConsumer.endEmbeddedContent"
      >
        <span
          className="visually-hidden-text visually-hidden-text"
        >
          Terra.embeddedContentConsumer.endEmbeddedContent
        </span>
      </VisuallyHiddenText>
    </div>
  </EmbeddedContentConsumer>
</InjectIntl(EmbeddedContentConsumer)>
`;

exports[`sets appropriate config option when resizeConfig.scrolling is false 1`] = `
<div>
  <InjectIntl(EmbeddedContentConsumer)
    options={
      Object {
        "resizeConfig": Object {
          "scrolling": false,
        },
      }
    }
    src="https://www.google.com/"
  />
</div>
`;

exports[`sets appropriate config option when resizeConfig.scrolling is true 1`] = `
<div>
  <InjectIntl(EmbeddedContentConsumer)
    options={
      Object {
        "resizeConfig": Object {
          "scrolling": true,
        },
      }
    }
    src="https://www.google.com/"
  />
</div>
`;
