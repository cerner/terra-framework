$selector: ':root' !default;

// stylelint-disable scss/at-mixin-pattern
@mixin themeStyles {
  /* stylelint-disable suitcss/custom-property-no-outside-root */
  :global {
    #{$selector} {
      @content;
    }
  }
  /* stylelint-enable suitcss/custom-property-no-outside-root */
}
// stylelint-enable scss/at-mixin-pattern

// functions to urlencode the svg string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@function url-encode($string) {
  $map: (
    '%': '%25',
    '<': '%3C',
    '>': '%3E',
    ' ': '%20',
    '!': '%21',
    '*': '%2A',
    "'": '%27',
    '"': '%22',
    '(': '%28',
    ')': '%29',
    ';': '%3B',
    ':': '%3A',
    '@': '%40',
    '&': '%26',
    '=': '%3D',
    '+': '%2B',
    '$': '%24',
    ',': '%2C',
    '/': '%2F',
    '?': '%3F',
    '#': '%23',
    '[': '%5B',
    ']': '%5D'
  );
  $new: $string;
  @each $search, $replace in $map {
    $new: str-replace($new, $search, $replace);
  }
  @return $new;
}

@function inline-svg($string) {
  @return url('data:image/svg+xml;charset=US-ASCII,#{url-encode($string)}');
}

// stylelint-disable-next-line scss/at-mixin-pattern
@mixin inline-svg-var($var, $svg) {
  #{$var}: inline-svg(#{$svg});
}
